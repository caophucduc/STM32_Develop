
STM32F103C8T6_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  0000617c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c58  08004c58  0000617c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c58  08004c58  0000617c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08004c60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f4  20000180  08004ddc  00006180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  08004ddc  00006374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000617c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010593  00000000  00000000  000061a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ef  00000000  00000000  00016738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000057fe  00000000  00000000  00019c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  0001f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6e  00000000  00000000  0001ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019793  00000000  00000000  00020a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013299  00000000  00000000  0003a1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008484c  00000000  00000000  0004d472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d1cbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b64  00000000  00000000  000d1d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  000d3868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b2c 	.word	0x08004b2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08004b2c 	.word	0x08004b2c

0800014c <readWord>:
uint32_t readWord(uint32_t address)
{
	uint32_t read_data;
	read_data = *(uint32_t*)(address);
	return read_data;
}
 800014c:	6800      	ldr	r0, [r0, #0]
 800014e:	4770      	bx	lr

08000150 <lockFlash>:

	flashStatus = Unlocked;
}

void lockFlash()
{
 8000150:	b508      	push	{r3, lr}
	/* Lock the Flash to enable the flash control register access *************/
	while(HAL_FLASH_Lock()!=HAL_OK)
 8000152:	e003      	b.n	800015c <lockFlash+0xc>
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 8000154:	f000 fd2a 	bl	8000bac <HAL_FLASH_Unlock>
 8000158:	2800      	cmp	r0, #0
 800015a:	d1fb      	bne.n	8000154 <lockFlash+0x4>
	while(HAL_FLASH_Lock()!=HAL_OK)
 800015c:	f000 fd46 	bl	8000bec <HAL_FLASH_Lock>
 8000160:	2800      	cmp	r0, #0
 8000162:	d1f7      	bne.n	8000154 <lockFlash+0x4>
 8000164:	e003      	b.n	800016e <lockFlash+0x1e>

	/* Lock Access to option bytes sector */
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 8000166:	f000 fd4b 	bl	8000c00 <HAL_FLASH_OB_Unlock>
 800016a:	2800      	cmp	r0, #0
 800016c:	d1fb      	bne.n	8000166 <lockFlash+0x16>
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 800016e:	f000 fd61 	bl	8000c34 <HAL_FLASH_OB_Lock>
 8000172:	2800      	cmp	r0, #0
 8000174:	d1f7      	bne.n	8000166 <lockFlash+0x16>

	flashStatus = Locked;
 8000176:	f240 139c 	movw	r3, #412	@ 0x19c
 800017a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800017e:	2203      	movs	r2, #3
 8000180:	701a      	strb	r2, [r3, #0]
}
 8000182:	bd08      	pop	{r3, pc}

08000184 <deinitEverything>:
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
}

void deinitEverything()
{
 8000184:	b508      	push	{r3, lr}
	//-- reset peripherals to guarantee flawless start of user application
	HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 8000186:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800018a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800018e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000192:	f000 ff5b 	bl	800104c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin);
 8000196:	2108      	movs	r1, #8
 8000198:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800019c:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80001a0:	f000 ff54 	bl	800104c <HAL_GPIO_DeInit>
	USBD_DeInit(&hUsbDeviceFS);
 80001a4:	f240 10d4 	movw	r0, #468	@ 0x1d4
 80001a8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80001ac:	f003 fd29 	bl	8003c02 <USBD_DeInit>
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 80001b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80001b4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80001b8:	699a      	ldr	r2, [r3, #24]
 80001ba:	f022 0210 	bic.w	r2, r2, #16
 80001be:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 80001c0:	699a      	ldr	r2, [r3, #24]
 80001c2:	f022 0220 	bic.w	r2, r2, #32
 80001c6:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 80001c8:	699a      	ldr	r2, [r3, #24]
 80001ca:	f022 0208 	bic.w	r2, r2, #8
 80001ce:	619a      	str	r2, [r3, #24]
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 80001d0:	699a      	ldr	r2, [r3, #24]
 80001d2:	f022 0204 	bic.w	r2, r2, #4
 80001d6:	619a      	str	r2, [r3, #24]
	HAL_RCC_DeInit();
 80001d8:	f001 ff2a 	bl	8002030 <HAL_RCC_DeInit>
	HAL_DeInit();
 80001dc:	f000 fb94 	bl	8000908 <HAL_DeInit>
	SysTick->CTRL = 0;
 80001e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80001e4:	2200      	movs	r2, #0
 80001e6:	611a      	str	r2, [r3, #16]
	SysTick->LOAD = 0;
 80001e8:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0;
 80001ea:	619a      	str	r2, [r3, #24]
}
 80001ec:	bd08      	pop	{r3, pc}

080001ee <jumpToApp>:
{
 80001ee:	b510      	push	{r4, lr}
 80001f0:	4604      	mov	r4, r0
	deinitEverything();
 80001f2:	f7ff ffc7 	bl	8000184 <deinitEverything>
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 80001f6:	6823      	ldr	r3, [r4, #0]
 80001f8:	6862      	ldr	r2, [r4, #4]
 80001fa:	f383 8808 	msr	MSP, r3
 80001fe:	4710      	bx	r2
}
 8000200:	bd10      	pop	{r4, pc}

08000202 <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
	 uint8_t comVAR=0, i;
	 for(i=0;i<length;i++)
 8000202:	2300      	movs	r3, #0
	 uint8_t comVAR=0, i;
 8000204:	469c      	mov	ip, r3
	 for(i=0;i<length;i++)
 8000206:	4293      	cmp	r3, r2
 8000208:	d217      	bcs.n	800023a <string_compare+0x38>
{
 800020a:	b510      	push	{r4, lr}
 800020c:	e007      	b.n	800021e <string_compare+0x1c>
	   	{
	   		  if(array1[i]==array2[i])
	   	  		  comVAR++;
 800020e:	f10c 0c01 	add.w	ip, ip, #1
 8000212:	fa5f fc8c 	uxtb.w	ip, ip
	 for(i=0;i<length;i++)
 8000216:	3301      	adds	r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	4293      	cmp	r3, r2
 800021c:	d207      	bcs.n	800022e <string_compare+0x2c>
	   		  if(array1[i]==array2[i])
 800021e:	5cc4      	ldrb	r4, [r0, r3]
 8000220:	f811 e003 	ldrb.w	lr, [r1, r3]
 8000224:	4574      	cmp	r4, lr
 8000226:	d0f2      	beq.n	800020e <string_compare+0xc>
	   	  	  else comVAR=0;
 8000228:	f04f 0c00 	mov.w	ip, #0
 800022c:	e7f3      	b.n	8000216 <string_compare+0x14>
	   	}
	 if (comVAR==length)
 800022e:	4594      	cmp	ip, r2
 8000230:	d001      	beq.n	8000236 <string_compare+0x34>
		 	return 1;
	 else 	return 0;
 8000232:	2000      	movs	r0, #0
}
 8000234:	bd10      	pop	{r4, pc}
		 	return 1;
 8000236:	2001      	movs	r0, #1
 8000238:	e7fc      	b.n	8000234 <string_compare+0x32>
	 if (comVAR==length)
 800023a:	4293      	cmp	r3, r2
 800023c:	d001      	beq.n	8000242 <string_compare+0x40>
	 else 	return 0;
 800023e:	2000      	movs	r0, #0
}
 8000240:	4770      	bx	lr
		 	return 1;
 8000242:	2001      	movs	r0, #1
 8000244:	4770      	bx	lr

08000246 <errorBlink>:

void errorBlink()
{
 8000246:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000252:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000256:	f000 ff8b 	bl	8001170 <HAL_GPIO_WritePin>
	while(1)
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800025a:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800025e:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000262:	2200      	movs	r2, #0
 8000264:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000268:	4620      	mov	r0, r4
 800026a:	f000 ff81 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800026e:	20c8      	movs	r0, #200	@ 0xc8
 8000270:	f000 fba8 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027a:	4620      	mov	r0, r4
 800027c:	f000 ff78 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000280:	20c8      	movs	r0, #200	@ 0xc8
 8000282:	f000 fb9f 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800028c:	4620      	mov	r0, r4
 800028e:	f000 ff6f 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000292:	20c8      	movs	r0, #200	@ 0xc8
 8000294:	f000 fb96 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800029e:	4620      	mov	r0, r4
 80002a0:	f000 ff66 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80002a4:	20c8      	movs	r0, #200	@ 0xc8
 80002a6:	f000 fb8d 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002b0:	4620      	mov	r0, r4
 80002b2:	f000 ff5d 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80002b6:	20c8      	movs	r0, #200	@ 0xc8
 80002b8:	f000 fb84 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002c2:	4620      	mov	r0, r4
 80002c4:	f000 ff54 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80002c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002cc:	f000 fb7a 	bl	80009c4 <HAL_Delay>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002d6:	4620      	mov	r0, r4
 80002d8:	f000 ff4a 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(800);
 80002dc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80002e0:	f000 fb70 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ea:	4620      	mov	r0, r4
 80002ec:	f000 ff40 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80002f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002f4:	f000 fb66 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002fe:	4620      	mov	r0, r4
 8000300:	f000 ff36 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(800);
 8000304:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000308:	f000 fb5c 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000312:	4620      	mov	r0, r4
 8000314:	f000 ff2c 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000318:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800031c:	f000 fb52 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000326:	4620      	mov	r0, r4
 8000328:	f000 ff22 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(800);
 800032c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000330:	f000 fb48 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800033a:	4620      	mov	r0, r4
 800033c:	f000 ff18 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000340:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000344:	f000 fb3e 	bl	80009c4 <HAL_Delay>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800034e:	4620      	mov	r0, r4
 8000350:	f000 ff0e 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000354:	20c8      	movs	r0, #200	@ 0xc8
 8000356:	f000 fb35 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000360:	4620      	mov	r0, r4
 8000362:	f000 ff05 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000366:	20c8      	movs	r0, #200	@ 0xc8
 8000368:	f000 fb2c 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000372:	4620      	mov	r0, r4
 8000374:	f000 fefc 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000378:	20c8      	movs	r0, #200	@ 0xc8
 800037a:	f000 fb23 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000384:	4620      	mov	r0, r4
 8000386:	f000 fef3 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800038a:	20c8      	movs	r0, #200	@ 0xc8
 800038c:	f000 fb1a 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000396:	4620      	mov	r0, r4
 8000398:	f000 feea 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800039c:	20c8      	movs	r0, #200	@ 0xc8
 800039e:	f000 fb11 	bl	80009c4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003a8:	4620      	mov	r0, r4
 80003aa:	f000 fee1 	bl	8001170 <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 80003ae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80003b2:	f000 fb07 	bl	80009c4 <HAL_Delay>
	while(1)
 80003b6:	e750      	b.n	800025a <errorBlink+0x14>

080003b8 <bootloaderInit>:
{
 80003b8:	b570      	push	{r4, r5, r6, lr}
	Flashed_offset = 0;
 80003ba:	f240 13a0 	movw	r3, #416	@ 0x1a0
 80003be:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
	flashStatus = Unerased;
 80003c6:	f240 139c 	movw	r3, #412	@ 0x19c
 80003ca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80003ce:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(BOOT1_GPIO_Port, BOOT1_Pin) == GPIO_PIN_SET)
 80003d0:	2104      	movs	r1, #4
 80003d2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80003d6:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80003da:	f000 fec2 	bl	8001162 <HAL_GPIO_ReadPin>
 80003de:	2801      	cmp	r0, #1
 80003e0:	d13c      	bne.n	800045c <bootloaderInit+0xa4>
 80003e2:	4606      	mov	r6, r0
		for(uint8_t i=0; i<10; i++)
 80003e4:	2400      	movs	r4, #0
 80003e6:	e017      	b.n	8000418 <bootloaderInit+0x60>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003e8:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80003ec:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f6:	4628      	mov	r0, r5
 80003f8:	f000 feba 	bl	8001170 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f000 fae1 	bl	80009c4 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000408:	4628      	mov	r0, r5
 800040a:	f000 feb1 	bl	8001170 <HAL_GPIO_WritePin>
			HAL_Delay(90);
 800040e:	205a      	movs	r0, #90	@ 0x5a
 8000410:	f000 fad8 	bl	80009c4 <HAL_Delay>
		for(uint8_t i=0; i<10; i++)
 8000414:	3401      	adds	r4, #1
 8000416:	b2e4      	uxtb	r4, r4
 8000418:	2c09      	cmp	r4, #9
 800041a:	d9e5      	bls.n	80003e8 <bootloaderInit+0x30>
		HAL_GPIO_WritePin(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin, GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	2108      	movs	r1, #8
 8000420:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000424:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000428:	f000 fea2 	bl	8001170 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(App_GPIO_Port, App_Pin) == GPIO_PIN_RESET)
 800042c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000430:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000434:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000438:	f000 fe93 	bl	8001162 <HAL_GPIO_ReadPin>
 800043c:	b9c0      	cbnz	r0, 8000470 <bootloaderInit+0xb8>
		App = App1;
 800043e:	f240 13a4 	movw	r3, #420	@ 0x1a4
 8000442:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
	if(bootloaderMode == JumpMode)
 800044a:	bb9e      	cbnz	r6, 80004b4 <bootloaderInit+0xfc>
		if(App == App1)
 800044c:	f240 13a4 	movw	r3, #420	@ 0x1a4
 8000450:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000454:	781d      	ldrb	r5, [r3, #0]
 8000456:	b31d      	cbz	r5, 80004a0 <bootloaderInit+0xe8>
			for(uint8_t i=0; i<10; i++)
 8000458:	4634      	mov	r4, r6
 800045a:	e030      	b.n	80004be <bootloaderInit+0x106>
		HAL_GPIO_WritePin(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2108      	movs	r1, #8
 8000460:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000464:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000468:	f000 fe82 	bl	8001170 <HAL_GPIO_WritePin>
		bootloaderMode = JumpMode;
 800046c:	2600      	movs	r6, #0
 800046e:	e7dd      	b.n	800042c <bootloaderInit+0x74>
		App = App2;
 8000470:	f240 13a4 	movw	r3, #420	@ 0x1a4
 8000474:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	e7e5      	b.n	800044a <bootloaderInit+0x92>
			for(uint8_t i=0; i<10; i++)
 800047e:	3401      	adds	r4, #1
 8000480:	b2e4      	uxtb	r4, r4
 8000482:	2c09      	cmp	r4, #9
 8000484:	d80e      	bhi.n	80004a4 <bootloaderInit+0xec>
				if(readWord(APP1_START + (i*4)) == -1)
 8000486:	f104 7000 	add.w	r0, r4, #33554432	@ 0x2000000
 800048a:	f500 50a0 	add.w	r0, r0, #5120	@ 0x1400
 800048e:	0080      	lsls	r0, r0, #2
 8000490:	f7ff fe5c 	bl	800014c <readWord>
 8000494:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000498:	d1f1      	bne.n	800047e <bootloaderInit+0xc6>
					emptyCellCount++;
 800049a:	3501      	adds	r5, #1
 800049c:	b2ed      	uxtb	r5, r5
 800049e:	e7ee      	b.n	800047e <bootloaderInit+0xc6>
			for(uint8_t i=0; i<10; i++)
 80004a0:	462c      	mov	r4, r5
 80004a2:	e7ee      	b.n	8000482 <bootloaderInit+0xca>
			if(emptyCellCount != 10)
 80004a4:	2d0a      	cmp	r5, #10
 80004a6:	d006      	beq.n	80004b6 <bootloaderInit+0xfe>
				jumpToApp(APP1_START);
 80004a8:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 80004ac:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80004b0:	f7ff fe9d 	bl	80001ee <jumpToApp>
}
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
				errorBlink();
 80004b6:	f7ff fec6 	bl	8000246 <errorBlink>
			for(uint8_t i=0; i<10; i++)
 80004ba:	3401      	adds	r4, #1
 80004bc:	b2e4      	uxtb	r4, r4
 80004be:	2c09      	cmp	r4, #9
 80004c0:	d80c      	bhi.n	80004dc <bootloaderInit+0x124>
				if(readWord(APP2_START + (i*4)) == -1)
 80004c2:	f104 7000 	add.w	r0, r4, #33554432	@ 0x2000000
 80004c6:	f500 5028 	add.w	r0, r0, #10752	@ 0x2a00
 80004ca:	0080      	lsls	r0, r0, #2
 80004cc:	f7ff fe3e 	bl	800014c <readWord>
 80004d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80004d4:	d1f1      	bne.n	80004ba <bootloaderInit+0x102>
					emptyCellCount++;
 80004d6:	3601      	adds	r6, #1
 80004d8:	b2f6      	uxtb	r6, r6
 80004da:	e7ee      	b.n	80004ba <bootloaderInit+0x102>
			if(emptyCellCount != 10)
 80004dc:	2e0a      	cmp	r6, #10
 80004de:	d006      	beq.n	80004ee <bootloaderInit+0x136>
				jumpToApp(APP2_START);
 80004e0:	f44f 4028 	mov.w	r0, #43008	@ 0xa800
 80004e4:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80004e8:	f7ff fe81 	bl	80001ee <jumpToApp>
 80004ec:	e7e2      	b.n	80004b4 <bootloaderInit+0xfc>
				errorBlink();
 80004ee:	f7ff feaa 	bl	8000246 <errorBlink>

080004f2 <eraseMemory>:
{
 80004f2:	b500      	push	{lr}
 80004f4:	b087      	sub	sp, #28
	while(HAL_FLASH_Unlock()!=HAL_OK)
 80004f6:	e003      	b.n	8000500 <eraseMemory+0xe>
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 80004f8:	f000 fb78 	bl	8000bec <HAL_FLASH_Lock>
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d1fb      	bne.n	80004f8 <eraseMemory+0x6>
	while(HAL_FLASH_Unlock()!=HAL_OK)
 8000500:	f000 fb54 	bl	8000bac <HAL_FLASH_Unlock>
 8000504:	2800      	cmp	r0, #0
 8000506:	d1f7      	bne.n	80004f8 <eraseMemory+0x6>
 8000508:	e003      	b.n	8000512 <eraseMemory+0x20>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 800050a:	f000 fb93 	bl	8000c34 <HAL_FLASH_OB_Lock>
 800050e:	2800      	cmp	r0, #0
 8000510:	d1fb      	bne.n	800050a <eraseMemory+0x18>
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 8000512:	f000 fb75 	bl	8000c00 <HAL_FLASH_OB_Unlock>
 8000516:	2800      	cmp	r0, #0
 8000518:	d1f7      	bne.n	800050a <eraseMemory+0x18>
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800051a:	2300      	movs	r3, #0
 800051c:	9302      	str	r3, [sp, #8]
	if(App == App1)
 800051e:	f240 13a4 	movw	r3, #420	@ 0x1a4
 8000522:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b96b      	cbnz	r3, 8000546 <eraseMemory+0x54>
		EraseInitStruct.PageAddress = APP1_START;
 800052a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800052e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000532:	9304      	str	r3, [sp, #16]
	EraseInitStruct.NbPages = FLASH_BANK_SIZE/FLASH_PAGE_SIZE_USER;
 8000534:	2316      	movs	r3, #22
 8000536:	9305      	str	r3, [sp, #20]
	status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000538:	a901      	add	r1, sp, #4
 800053a:	a802      	add	r0, sp, #8
 800053c:	f000 fbef 	bl	8000d1e <HAL_FLASHEx_Erase>
 8000540:	f88d 0003 	strb.w	r0, [sp, #3]
	while(HAL_FLASH_Lock()!=HAL_OK)
 8000544:	e009      	b.n	800055a <eraseMemory+0x68>
		EraseInitStruct.PageAddress = APP2_START;
 8000546:	f44f 4328 	mov.w	r3, #43008	@ 0xa800
 800054a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800054e:	9304      	str	r3, [sp, #16]
 8000550:	e7f0      	b.n	8000534 <eraseMemory+0x42>
		while(HAL_FLASH_Unlock()!=HAL_OK);//Weird fix attempt
 8000552:	f000 fb2b 	bl	8000bac <HAL_FLASH_Unlock>
 8000556:	2800      	cmp	r0, #0
 8000558:	d1fb      	bne.n	8000552 <eraseMemory+0x60>
	while(HAL_FLASH_Lock()!=HAL_OK)
 800055a:	f000 fb47 	bl	8000bec <HAL_FLASH_Lock>
 800055e:	2800      	cmp	r0, #0
 8000560:	d1f7      	bne.n	8000552 <eraseMemory+0x60>
 8000562:	e003      	b.n	800056c <eraseMemory+0x7a>
		while(HAL_FLASH_OB_Unlock()!=HAL_OK);//Weird fix attempt
 8000564:	f000 fb4c 	bl	8000c00 <HAL_FLASH_OB_Unlock>
 8000568:	2800      	cmp	r0, #0
 800056a:	d1fb      	bne.n	8000564 <eraseMemory+0x72>
	while(HAL_FLASH_OB_Lock()!=HAL_OK)
 800056c:	f000 fb62 	bl	8000c34 <HAL_FLASH_OB_Lock>
 8000570:	2800      	cmp	r0, #0
 8000572:	d1f7      	bne.n	8000564 <eraseMemory+0x72>
	if(status_erase != HAL_OK)
 8000574:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000578:	b973      	cbnz	r3, 8000598 <eraseMemory+0xa6>
	flashStatus = Erased;
 800057a:	f240 139c 	movw	r3, #412	@ 0x19c
 800057e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	Flashed_offset = 0;
 8000586:	f240 13a0 	movw	r3, #416	@ 0x1a0
 800058a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
}
 8000592:	b007      	add	sp, #28
 8000594:	f85d fb04 	ldr.w	pc, [sp], #4
		errorBlink();
 8000598:	f7ff fe55 	bl	8000246 <errorBlink>

0800059c <unlockFlashAndEraseMemory>:
{
 800059c:	b500      	push	{lr}
 800059e:	b087      	sub	sp, #28
	while(HAL_FLASH_Unlock()!=HAL_OK)
 80005a0:	e003      	b.n	80005aa <unlockFlashAndEraseMemory+0xe>
		while(HAL_FLASH_Lock()!=HAL_OK);//Weird fix attempt
 80005a2:	f000 fb23 	bl	8000bec <HAL_FLASH_Lock>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	d1fb      	bne.n	80005a2 <unlockFlashAndEraseMemory+0x6>
	while(HAL_FLASH_Unlock()!=HAL_OK)
 80005aa:	f000 faff 	bl	8000bac <HAL_FLASH_Unlock>
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d1f7      	bne.n	80005a2 <unlockFlashAndEraseMemory+0x6>
 80005b2:	e003      	b.n	80005bc <unlockFlashAndEraseMemory+0x20>
		while(HAL_FLASH_OB_Lock()!=HAL_OK);//Weird fix attempt
 80005b4:	f000 fb3e 	bl	8000c34 <HAL_FLASH_OB_Lock>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d1fb      	bne.n	80005b4 <unlockFlashAndEraseMemory+0x18>
	while(HAL_FLASH_OB_Unlock()!=HAL_OK)
 80005bc:	f000 fb20 	bl	8000c00 <HAL_FLASH_OB_Unlock>
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d1f7      	bne.n	80005b4 <unlockFlashAndEraseMemory+0x18>
	if(flashStatus != Erased)
 80005c4:	f240 139c 	movw	r3, #412	@ 0x19c
 80005c8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d017      	beq.n	8000602 <unlockFlashAndEraseMemory+0x66>
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80005d2:	2300      	movs	r3, #0
 80005d4:	9302      	str	r3, [sp, #8]
		if(App == App1)
 80005d6:	f240 13a4 	movw	r3, #420	@ 0x1a4
 80005da:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b9c3      	cbnz	r3, 8000614 <unlockFlashAndEraseMemory+0x78>
			EraseInitStruct.PageAddress = APP1_START;
 80005e2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80005e6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80005ea:	9304      	str	r3, [sp, #16]
		EraseInitStruct.NbPages = FLASH_BANK_SIZE/FLASH_PAGE_SIZE_USER;
 80005ec:	2316      	movs	r3, #22
 80005ee:	9305      	str	r3, [sp, #20]
		status_erase = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80005f0:	a901      	add	r1, sp, #4
 80005f2:	a802      	add	r0, sp, #8
 80005f4:	f000 fb93 	bl	8000d1e <HAL_FLASHEx_Erase>
 80005f8:	f88d 0003 	strb.w	r0, [sp, #3]
		if(status_erase != HAL_OK)
 80005fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000600:	b973      	cbnz	r3, 8000620 <unlockFlashAndEraseMemory+0x84>
	flashStatus = Unlocked;
 8000602:	f240 139c 	movw	r3, #412	@ 0x19c
 8000606:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800060a:	2202      	movs	r2, #2
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	b007      	add	sp, #28
 8000610:	f85d fb04 	ldr.w	pc, [sp], #4
			EraseInitStruct.PageAddress = APP2_START;
 8000614:	f44f 4328 	mov.w	r3, #43008	@ 0xa800
 8000618:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800061c:	9304      	str	r3, [sp, #16]
 800061e:	e7e5      	b.n	80005ec <unlockFlashAndEraseMemory+0x50>
			errorBlink();
 8000620:	f7ff fe11 	bl	8000246 <errorBlink>

08000624 <messageHandler>:
	}
}

void messageHandler(uint8_t* Buf)
{
 8000624:	b510      	push	{r4, lr}
 8000626:	4604      	mov	r4, r0
	if(string_compare((char*)Buf, ERASE_FLASH_MEMORY, strlen(ERASE_FLASH_MEMORY))
 8000628:	220b      	movs	r2, #11
 800062a:	f644 3144 	movw	r1, #19268	@ 0x4b44
 800062e:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8000632:	f7ff fde6 	bl	8000202 <string_compare>
 8000636:	b130      	cbz	r0, 8000646 <messageHandler+0x22>
			&& flashStatus != Unlocked)
 8000638:	f240 139c 	movw	r3, #412	@ 0x19c
 800063c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d112      	bne.n	800066c <messageHandler+0x48>
	{
		eraseMemory();
		CDC_Transmit_FS((uint8_t*)&"Flash: Erased!\n", strlen("Flash: Erased!\n"));
	}else if(string_compare((char*)Buf, FLASHING_START, strlen(FLASHING_START)))
 8000646:	220d      	movs	r2, #13
 8000648:	f644 3160 	movw	r1, #19296	@ 0x4b60
 800064c:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8000650:	4620      	mov	r0, r4
 8000652:	f7ff fdd6 	bl	8000202 <string_compare>
 8000656:	b198      	cbz	r0, 8000680 <messageHandler+0x5c>
	{
		unlockFlashAndEraseMemory();
 8000658:	f7ff ffa0 	bl	800059c <unlockFlashAndEraseMemory>
		CDC_Transmit_FS((uint8_t*)&"Flash: Unlocked!\n", strlen("Flash: Unlocked!\n"));
 800065c:	2111      	movs	r1, #17
 800065e:	f644 3070 	movw	r0, #19312	@ 0x4b70
 8000662:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8000666:	f004 f814 	bl	8004692 <CDC_Transmit_FS>
	}else
	{
		CDC_Transmit_FS((uint8_t*)&"Error: Incorrect step or unknown command!\n",
			  strlen("Error: Incorrect step or unknown command!\n"));
	}
}
 800066a:	bd10      	pop	{r4, pc}
		eraseMemory();
 800066c:	f7ff ff41 	bl	80004f2 <eraseMemory>
		CDC_Transmit_FS((uint8_t*)&"Flash: Erased!\n", strlen("Flash: Erased!\n"));
 8000670:	210f      	movs	r1, #15
 8000672:	f644 3050 	movw	r0, #19280	@ 0x4b50
 8000676:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800067a:	f004 f80a 	bl	8004692 <CDC_Transmit_FS>
 800067e:	e7f4      	b.n	800066a <messageHandler+0x46>
	}else if(string_compare((char*)Buf, FLASHING_FINISH, strlen(FLASHING_FINISH))
 8000680:	220e      	movs	r2, #14
 8000682:	f644 3184 	movw	r1, #19332	@ 0x4b84
 8000686:	f6c0 0100 	movt	r1, #2048	@ 0x800
 800068a:	4620      	mov	r0, r4
 800068c:	f7ff fdb9 	bl	8000202 <string_compare>
 8000690:	b130      	cbz	r0, 80006a0 <messageHandler+0x7c>
			  && flashStatus == Unlocked)
 8000692:	f240 139c 	movw	r3, #412	@ 0x19c
 8000696:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d017      	beq.n	80006d0 <messageHandler+0xac>
	}else if(string_compare((char*)Buf, FLASHING_ABORT, strlen(FLASHING_ABORT))
 80006a0:	220d      	movs	r2, #13
 80006a2:	f644 31a8 	movw	r1, #19368	@ 0x4ba8
 80006a6:	f6c0 0100 	movt	r1, #2048	@ 0x800
 80006aa:	4620      	mov	r0, r4
 80006ac:	f7ff fda9 	bl	8000202 <string_compare>
 80006b0:	b130      	cbz	r0, 80006c0 <messageHandler+0x9c>
			  && flashStatus == Unlocked)
 80006b2:	f240 139c 	movw	r3, #412	@ 0x19c
 80006b6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d011      	beq.n	80006e4 <messageHandler+0xc0>
		CDC_Transmit_FS((uint8_t*)&"Error: Incorrect step or unknown command!\n",
 80006c0:	212a      	movs	r1, #42	@ 0x2a
 80006c2:	f644 30cc 	movw	r0, #19404	@ 0x4bcc
 80006c6:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80006ca:	f003 ffe2 	bl	8004692 <CDC_Transmit_FS>
}
 80006ce:	e7cc      	b.n	800066a <messageHandler+0x46>
		lockFlash();
 80006d0:	f7ff fd3e 	bl	8000150 <lockFlash>
		CDC_Transmit_FS((uint8_t*)&"Flash: Success!\n", strlen("Flash: Success!\n"));
 80006d4:	2110      	movs	r1, #16
 80006d6:	f644 3094 	movw	r0, #19348	@ 0x4b94
 80006da:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80006de:	f003 ffd8 	bl	8004692 <CDC_Transmit_FS>
 80006e2:	e7c2      	b.n	800066a <messageHandler+0x46>
		lockFlash();
 80006e4:	f7ff fd34 	bl	8000150 <lockFlash>
		eraseMemory();
 80006e8:	f7ff ff03 	bl	80004f2 <eraseMemory>
		CDC_Transmit_FS((uint8_t*)&"Flash: Aborted!\n", strlen("Flash: Aborted!\n"));
 80006ec:	2110      	movs	r1, #16
 80006ee:	f644 30b8 	movw	r0, #19384	@ 0x4bb8
 80006f2:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80006f6:	f003 ffcc 	bl	8004692 <CDC_Transmit_FS>
 80006fa:	e7b6      	b.n	800066a <messageHandler+0x46>

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000700:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	2400      	movs	r4, #0
 8000704:	9404      	str	r4, [sp, #16]
 8000706:	9405      	str	r4, [sp, #20]
 8000708:	9406      	str	r4, [sp, #24]
 800070a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000710:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000714:	699a      	ldr	r2, [r3, #24]
 8000716:	f042 0210 	orr.w	r2, r2, #16
 800071a:	619a      	str	r2, [r3, #24]
 800071c:	699a      	ldr	r2, [r3, #24]
 800071e:	f002 0210 	and.w	r2, r2, #16
 8000722:	9200      	str	r2, [sp, #0]
 8000724:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	699a      	ldr	r2, [r3, #24]
 8000728:	f042 0220 	orr.w	r2, r2, #32
 800072c:	619a      	str	r2, [r3, #24]
 800072e:	699a      	ldr	r2, [r3, #24]
 8000730:	f002 0220 	and.w	r2, r2, #32
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	699a      	ldr	r2, [r3, #24]
 800073a:	f042 0208 	orr.w	r2, r2, #8
 800073e:	619a      	str	r2, [r3, #24]
 8000740:	699a      	ldr	r2, [r3, #24]
 8000742:	f002 0208 	and.w	r2, r2, #8
 8000746:	9202      	str	r2, [sp, #8]
 8000748:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	699a      	ldr	r2, [r3, #24]
 800074c:	f042 0204 	orr.w	r2, r2, #4
 8000750:	619a      	str	r2, [r3, #24]
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	9303      	str	r3, [sp, #12]
 800075a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800075c:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8000760:	f2c4 0601 	movt	r6, #16385	@ 0x4001
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800076a:	4630      	mov	r0, r6
 800076c:	f000 fd00 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_ENABLE_GPIO_Port, USB_ENABLE_Pin, GPIO_PIN_RESET);
 8000770:	f44f 6540 	mov.w	r5, #3072	@ 0xc00
 8000774:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8000778:	4622      	mov	r2, r4
 800077a:	2108      	movs	r1, #8
 800077c:	4628      	mov	r0, r5
 800077e:	f000 fcf7 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000782:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000786:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	f04f 0801 	mov.w	r8, #1
 800078c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000792:	2703      	movs	r7, #3
 8000794:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000796:	a904      	add	r1, sp, #16
 8000798:	4630      	mov	r0, r6
 800079a:	f000 fb1f 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin App_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|App_Pin;
 800079e:	f640 0304 	movw	r3, #2052	@ 0x804
 80007a2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	a904      	add	r1, sp, #16
 80007aa:	4628      	mov	r0, r5
 80007ac:	f000 fb16 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = USB_ENABLE_Pin;
 80007b0:	2308      	movs	r3, #8
 80007b2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(USB_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007bc:	a904      	add	r1, sp, #16
 80007be:	4628      	mov	r0, r5
 80007c0:	f000 fb0c 	bl	8000ddc <HAL_GPIO_Init>

}
 80007c4:	b008      	add	sp, #32
 80007c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080007ca <SystemClock_Config>:
{
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	2228      	movs	r2, #40	@ 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	eb0d 0002 	add.w	r0, sp, r2
 80007d6:	f004 f97d 	bl	8004ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007da:	2400      	movs	r4, #0
 80007dc:	9405      	str	r4, [sp, #20]
 80007de:	9406      	str	r4, [sp, #24]
 80007e0:	9407      	str	r4, [sp, #28]
 80007e2:	9408      	str	r4, [sp, #32]
 80007e4:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e6:	9401      	str	r4, [sp, #4]
 80007e8:	9402      	str	r4, [sp, #8]
 80007ea:	9403      	str	r4, [sp, #12]
 80007ec:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ee:	2201      	movs	r2, #1
 80007f0:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f6:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2502      	movs	r5, #2
 80007fc:	9511      	str	r5, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000800:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000804:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	a80a      	add	r0, sp, #40	@ 0x28
 8000808:	f001 fca7 	bl	800215a <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000818:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081c:	4629      	mov	r1, r5
 800081e:	a805      	add	r0, sp, #20
 8000820:	f001 ff56 	bl	80026d0 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000824:	2310      	movs	r3, #16
 8000826:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000828:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082a:	a801      	add	r0, sp, #4
 800082c:	f002 f832 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
}
 8000830:	b015      	add	sp, #84	@ 0x54
 8000832:	bd30      	pop	{r4, r5, pc}

08000834 <main>:
{
 8000834:	b508      	push	{r3, lr}
  HAL_Init();
 8000836:	f000 f89f 	bl	8000978 <HAL_Init>
  SystemClock_Config();
 800083a:	f7ff ffc6 	bl	80007ca <SystemClock_Config>
  MX_GPIO_Init();
 800083e:	f7ff ff5d 	bl	80006fc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000842:	f003 feb3 	bl	80045ac <MX_USB_DEVICE_Init>
  bootloaderInit();
 8000846:	f7ff fdb7 	bl	80003b8 <bootloaderInit>
  while (1)
 800084a:	e7fe      	b.n	800084a <main+0x16>

0800084c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800084c:	4770      	bx	lr

0800084e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084e:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000858:	699a      	ldr	r2, [r3, #24]
 800085a:	f042 0201 	orr.w	r2, r2, #1
 800085e:	619a      	str	r2, [r3, #24]
 8000860:	699a      	ldr	r2, [r3, #24]
 8000862:	f002 0201 	and.w	r2, r2, #1
 8000866:	9200      	str	r2, [sp, #0]
 8000868:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	69da      	ldr	r2, [r3, #28]
 800086c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000870:	61da      	str	r2, [r3, #28]
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800087c:	2200      	movs	r2, #0
 800087e:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8000882:	6853      	ldr	r3, [r2, #4]
 8000884:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000888:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	b002      	add	sp, #8
 8000890:	4770      	bx	lr

08000892 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000892:	4770      	bx	lr

08000894 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <HardFault_Handler>

08000896 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <MemManage_Handler>

08000898 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <BusFault_Handler>

0800089a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <UsageFault_Handler>

0800089c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089c:	4770      	bx	lr

0800089e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f87b 	bl	800099e <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bd08      	pop	{r3, pc}

080008aa <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008aa:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ac:	f241 0088 	movw	r0, #4232	@ 0x1088
 80008b0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80008b4:	f001 f960 	bl	8001b78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008b8:	bd08      	pop	{r3, pc}

080008ba <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ba:	4770      	bx	lr

080008bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008be:	e003      	b.n	80008c8 <LoopCopyDataInit>

080008c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008c6:	3104      	adds	r1, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008c8:	480a      	ldr	r0, [pc, #40]	@ (80008f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008d0:	d3f6      	bcc.n	80008c0 <CopyDataInit>
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008d4:	e002      	b.n	80008dc <LoopFillZerobss>

080008d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008d8:	f842 3b04 	str.w	r3, [r2], #4

080008dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008e0:	d3f9      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008e2:	f7ff ffea 	bl	80008ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e6:	f004 f8fd 	bl	8004ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ea:	f7ff ffa3 	bl	8000834 <main>
  bx lr
 80008ee:	4770      	bx	lr
  ldr r3, =_sidata
 80008f0:	08004c60 	.word	0x08004c60
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008f8:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80008fc:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000900:	20001374 	.word	0x20001374

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>

08000906 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000906:	4770      	bx	lr

08000908 <HAL_DeInit>:
{
 8000908:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800090a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000912:	f04f 32ff 	mov.w	r2, #4294967295
 8000916:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000918:	2400      	movs	r4, #0
 800091a:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 800091c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800091e:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 8000920:	f7ff fff1 	bl	8000906 <HAL_MspDeInit>
}
 8000924:	4620      	mov	r0, r4
 8000926:	bd10      	pop	{r4, pc}

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b510      	push	{r4, lr}
 800092a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092c:	f240 0304 	movw	r3, #4
 8000930:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093a:	fbb3 f3f2 	udiv	r3, r3, r2
 800093e:	f240 0200 	movw	r2, #0
 8000942:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000946:	6810      	ldr	r0, [r2, #0]
 8000948:	fbb0 f0f3 	udiv	r0, r0, r3
 800094c:	f000 f8cb 	bl	8000ae6 <HAL_SYSTICK_Config>
 8000950:	b980      	cbnz	r0, 8000974 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	2c0f      	cmp	r4, #15
 8000954:	d901      	bls.n	800095a <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000956:	2001      	movs	r0, #1
 8000958:	e00d      	b.n	8000976 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095a:	2200      	movs	r2, #0
 800095c:	4621      	mov	r1, r4
 800095e:	f04f 30ff 	mov.w	r0, #4294967295
 8000962:	f000 f89e 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000966:	f240 0308 	movw	r3, #8
 800096a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800096e:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000970:	2000      	movs	r0, #0
 8000972:	e000      	b.n	8000976 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8000974:	2001      	movs	r0, #1
}
 8000976:	bd10      	pop	{r4, pc}

08000978 <HAL_Init>:
{
 8000978:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800097e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	f042 0210 	orr.w	r2, r2, #16
 8000988:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098a:	2003      	movs	r0, #3
 800098c:	f000 f876 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ffc9 	bl	8000928 <HAL_InitTick>
  HAL_MspInit();
 8000996:	f7ff ff5a 	bl	800084e <HAL_MspInit>
}
 800099a:	2000      	movs	r0, #0
 800099c:	bd08      	pop	{r3, pc}

0800099e <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800099e:	f240 13a8 	movw	r3, #424	@ 0x1a8
 80009a2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	f240 0204 	movw	r2, #4
 80009ac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	440a      	add	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	4770      	bx	lr

080009b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b8:	f240 13a8 	movw	r3, #424	@ 0x1a8
 80009bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80009c0:	6818      	ldr	r0, [r3, #0]
}
 80009c2:	4770      	bx	lr

080009c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff fff6 	bl	80009b8 <HAL_GetTick>
 80009cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80009d2:	d005      	beq.n	80009e0 <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d4:	f240 0304 	movw	r3, #4
 80009d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e0:	f7ff ffea 	bl	80009b8 <HAL_GetTick>
 80009e4:	1b40      	subs	r0, r0, r5
 80009e6:	42a0      	cmp	r0, r4
 80009e8:	d3fa      	bcc.n	80009e0 <HAL_Delay+0x1c>
  {
  }
}
 80009ea:	bd38      	pop	{r3, r4, r5, pc}

080009ec <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80009ec:	2800      	cmp	r0, #0
 80009ee:	db0f      	blt.n	8000a10 <__NVIC_DisableIRQ+0x24>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f0:	f000 021f 	and.w	r2, r0, #31
 80009f4:	0940      	lsrs	r0, r0, #5
 80009f6:	2301      	movs	r3, #1
 80009f8:	4093      	lsls	r3, r2
 80009fa:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80009fe:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8000a02:	3020      	adds	r0, #32
 8000a04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a0c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000a10:	4770      	bx	lr

08000a12 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a12:	2800      	cmp	r0, #0
 8000a14:	db08      	blt.n	8000a28 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	0109      	lsls	r1, r1, #4
 8000a18:	b2c9      	uxtb	r1, r1
 8000a1a:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000a1e:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000a22:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000a26:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	f000 000f 	and.w	r0, r0, #15
 8000a2c:	0109      	lsls	r1, r1, #4
 8000a2e:	b2c9      	uxtb	r1, r1
 8000a30:	f64e 43fc 	movw	r3, #60668	@ 0xecfc
 8000a34:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000a38:	4403      	add	r3, r0
 8000a3a:	7619      	strb	r1, [r3, #24]
  }
}
 8000a3c:	4770      	bx	lr

08000a3e <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3e:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	f1c0 0c07 	rsb	ip, r0, #7
 8000a48:	f1bc 0f04 	cmp.w	ip, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	1d03      	adds	r3, r0, #4
 8000a54:	2b06      	cmp	r3, #6
 8000a56:	d90f      	bls.n	8000a78 <NVIC_EncodePriority+0x3a>
 8000a58:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5a:	f04f 3eff 	mov.w	lr, #4294967295
 8000a5e:	fa0e f00c 	lsl.w	r0, lr, ip
 8000a62:	ea21 0100 	bic.w	r1, r1, r0
 8000a66:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a6c:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000a70:	ea41 0002 	orr.w	r0, r1, r2
 8000a74:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e7ee      	b.n	8000a5a <NVIC_EncodePriority+0x1c>

08000a7c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8000a80:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8000a84:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a8a:	041b      	lsls	r3, r3, #16
 8000a8c:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a8e:	0200      	lsls	r0, r0, #8
 8000a90:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000a96:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000a9e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000aa0:	4770      	bx	lr

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b510      	push	{r4, lr}
 8000aa4:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa6:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8000aaa:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8000aae:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000ab4:	f7ff ffc3 	bl	8000a3e <NVIC_EncodePriority>
 8000ab8:	4601      	mov	r1, r0
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff ffa9 	bl	8000a12 <__NVIC_SetPriority>
}
 8000ac0:	bd10      	pop	{r4, pc}

08000ac2 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	2800      	cmp	r0, #0
 8000ac4:	db0a      	blt.n	8000adc <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	f000 021f 	and.w	r2, r0, #31
 8000aca:	0940      	lsrs	r0, r0, #5
 8000acc:	2301      	movs	r3, #1
 8000ace:	4093      	lsls	r3, r2
 8000ad0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000ad4:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8000ad8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000adc:	4770      	bx	lr

08000ade <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ade:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000ae0:	f7ff ff84 	bl	80009ec <__NVIC_DisableIRQ>
}
 8000ae4:	bd08      	pop	{r3, pc}

08000ae6 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae6:	3801      	subs	r0, #1
 8000ae8:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000aec:	d20e      	bcs.n	8000b0c <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000af2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8000af8:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8000afc:	21f0      	movs	r1, #240	@ 0xf0
 8000afe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b02:	2000      	movs	r0, #0
 8000b04:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	2207      	movs	r2, #7
 8000b08:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b0e:	4770      	bx	lr

08000b10 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000b10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b14:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	f013 0310 	ands.w	r3, r3, #16
 8000b1e:	d008      	beq.n	8000b32 <FLASH_SetErrorCode+0x22>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000b20:	f240 13b0 	movw	r3, #432	@ 0x1b0
 8000b24:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000b28:	69da      	ldr	r2, [r3, #28]
 8000b2a:	f042 0202 	orr.w	r2, r2, #2
 8000b2e:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000b30:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b36:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8000b3a:	68d2      	ldr	r2, [r2, #12]
 8000b3c:	f012 0f04 	tst.w	r2, #4
 8000b40:	d009      	beq.n	8000b56 <FLASH_SetErrorCode+0x46>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000b42:	f240 12b0 	movw	r2, #432	@ 0x1b0
 8000b46:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000b4a:	69d1      	ldr	r1, [r2, #28]
 8000b4c:	f041 0101 	orr.w	r1, r1, #1
 8000b50:	61d1      	str	r1, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000b52:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000b56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b5a:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8000b5e:	69d2      	ldr	r2, [r2, #28]
 8000b60:	f012 0f01 	tst.w	r2, #1
 8000b64:	d00f      	beq.n	8000b86 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000b66:	f240 12b0 	movw	r2, #432	@ 0x1b0
 8000b6a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000b6e:	69d1      	ldr	r1, [r2, #28]
 8000b70:	f041 0104 	orr.w	r1, r1, #4
 8000b74:	61d1      	str	r1, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000b76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b7a:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8000b7e:	69d1      	ldr	r1, [r2, #28]
 8000b80:	f021 0101 	bic.w	r1, r1, #1
 8000b84:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000b86:	f240 1201 	movw	r2, #257	@ 0x101
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d005      	beq.n	8000b9a <FLASH_SetErrorCode+0x8a>
 8000b8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b92:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8000b96:	60d3      	str	r3, [r2, #12]
}  
 8000b98:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000ba2:	69da      	ldr	r2, [r3, #28]
 8000ba4:	f022 0201 	bic.w	r2, r2, #1
 8000ba8:	61da      	str	r2, [r3, #28]
 8000baa:	4770      	bx	lr

08000bac <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000bba:	d013      	beq.n	8000be4 <HAL_FLASH_Unlock+0x38>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000bbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000bc4:	f240 1223 	movw	r2, #291	@ 0x123
 8000bc8:	f2c4 5267 	movt	r2, #17767	@ 0x4567
 8000bcc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000bce:	f648 12ab 	movw	r2, #35243	@ 0x89ab
 8000bd2:	f6cc 52ef 	movt	r2, #52719	@ 0xcdef
 8000bd6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000bde:	d103      	bne.n	8000be8 <HAL_FLASH_Unlock+0x3c>
  HAL_StatusTypeDef status = HAL_OK;
 8000be0:	2000      	movs	r0, #0
 8000be2:	4770      	bx	lr
 8000be4:	2000      	movs	r0, #0
 8000be6:	4770      	bx	lr
      status = HAL_ERROR;
 8000be8:	2001      	movs	r0, #1
}
 8000bea:	4770      	bx	lr

08000bec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000bf4:	691a      	ldr	r2, [r3, #16]
 8000bf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000bfa:	611a      	str	r2, [r3, #16]
}
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000c00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c04:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8000c0e:	d10f      	bne.n	8000c30 <HAL_FLASH_OB_Unlock+0x30>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c14:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000c18:	f240 1223 	movw	r2, #291	@ 0x123
 8000c1c:	f2c4 5267 	movt	r2, #17767	@ 0x4567
 8000c20:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000c22:	f648 12ab 	movw	r2, #35243	@ 0x89ab
 8000c26:	f6cc 52ef 	movt	r2, #52719	@ 0xcdef
 8000c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	4770      	bx	lr
    return HAL_ERROR;
 8000c30:	2001      	movs	r0, #1
}
 8000c32:	4770      	bx	lr

08000c34 <HAL_FLASH_OB_Lock>:
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c38:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000c3c:	691a      	ldr	r2, [r3, #16]
 8000c3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000c42:	611a      	str	r2, [r3, #16]
}
 8000c44:	2000      	movs	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <FLASH_WaitForLastOperation>:
{
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff feb4 	bl	80009b8 <HAL_GetTick>
 8000c50:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c56:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	f013 0f01 	tst.w	r3, #1
 8000c60:	d00a      	beq.n	8000c78 <FLASH_WaitForLastOperation+0x30>
    if (Timeout != HAL_MAX_DELAY)
 8000c62:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c66:	d0f4      	beq.n	8000c52 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c68:	b124      	cbz	r4, 8000c74 <FLASH_WaitForLastOperation+0x2c>
 8000c6a:	f7ff fea5 	bl	80009b8 <HAL_GetTick>
 8000c6e:	1b40      	subs	r0, r0, r5
 8000c70:	42a0      	cmp	r0, r4
 8000c72:	d9ee      	bls.n	8000c52 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000c74:	2003      	movs	r0, #3
 8000c76:	e02a      	b.n	8000cce <FLASH_WaitForLastOperation+0x86>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c7c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	f013 0f20 	tst.w	r3, #32
 8000c86:	d005      	beq.n	8000c94 <FLASH_WaitForLastOperation+0x4c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c8c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000c90:	2220      	movs	r2, #32
 8000c92:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000c94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c98:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	f013 0f10 	tst.w	r3, #16
 8000ca2:	d111      	bne.n	8000cc8 <FLASH_WaitForLastOperation+0x80>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000cac:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cae:	f013 0f01 	tst.w	r3, #1
 8000cb2:	d109      	bne.n	8000cc8 <FLASH_WaitForLastOperation+0x80>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000cbc:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000cbe:	f013 0f04 	tst.w	r3, #4
 8000cc2:	d101      	bne.n	8000cc8 <FLASH_WaitForLastOperation+0x80>
  return HAL_OK;
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	e002      	b.n	8000cce <FLASH_WaitForLastOperation+0x86>
    FLASH_SetErrorCode();
 8000cc8:	f7ff ff22 	bl	8000b10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ccc:	2001      	movs	r0, #1
}
 8000cce:	bd38      	pop	{r3, r4, r5, pc}

08000cd0 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cd0:	f240 13b0 	movw	r3, #432	@ 0x1b0
 8000cd4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000cdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	f042 0204 	orr.w	r2, r2, #4
 8000cea:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cf2:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000cf4:	4770      	bx	lr

08000cf6 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cf6:	f240 13b0 	movw	r3, #432	@ 0x1b0
 8000cfa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d06:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	f042 0202 	orr.w	r2, r2, #2
 8000d10:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000d12:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d1a:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000d1c:	4770      	bx	lr

08000d1e <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8000d1e:	f240 13b0 	movw	r3, #432	@ 0x1b0
 8000d22:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000d26:	7e1b      	ldrb	r3, [r3, #24]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d053      	beq.n	8000dd4 <HAL_FLASHEx_Erase+0xb6>
{
 8000d2c:	b570      	push	{r4, r5, r6, lr}
 8000d2e:	4605      	mov	r5, r0
 8000d30:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8000d32:	f240 13b0 	movw	r3, #432	@ 0x1b0
 8000d36:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000d3e:	6803      	ldr	r3, [r0, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d024      	beq.n	8000d8e <HAL_FLASHEx_Erase+0x70>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000d44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000d48:	f7ff ff7e 	bl	8000c48 <FLASH_WaitForLastOperation>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d138      	bne.n	8000dc2 <HAL_FLASHEx_Erase+0xa4>
        *PageError = 0xFFFFFFFFU;
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000d56:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d58:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000d5a:	68ea      	ldr	r2, [r5, #12]
 8000d5c:	68ab      	ldr	r3, [r5, #8]
 8000d5e:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8000d62:	42a3      	cmp	r3, r4
 8000d64:	d92e      	bls.n	8000dc4 <HAL_FLASHEx_Erase+0xa6>
          FLASH_PageErase(address);
 8000d66:	4620      	mov	r0, r4
 8000d68:	f7ff ffc5 	bl	8000cf6 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000d70:	f7ff ff6a 	bl	8000c48 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d78:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	f022 0202 	bic.w	r2, r2, #2
 8000d82:	611a      	str	r2, [r3, #16]
          if (status != HAL_OK)
 8000d84:	4601      	mov	r1, r0
 8000d86:	b9d0      	cbnz	r0, 8000dbe <HAL_FLASHEx_Erase+0xa0>
            address += FLASH_PAGE_SIZE)
 8000d88:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d8c:	e7e5      	b.n	8000d5a <HAL_FLASHEx_Erase+0x3c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000d8e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000d92:	f7ff ff59 	bl	8000c48 <FLASH_WaitForLastOperation>
 8000d96:	b108      	cbz	r0, 8000d9c <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d98:	2101      	movs	r1, #1
 8000d9a:	e013      	b.n	8000dc4 <HAL_FLASHEx_Erase+0xa6>
        FLASH_MassErase(FLASH_BANK_1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff ff97 	bl	8000cd0 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000da2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000da6:	f7ff ff4f 	bl	8000c48 <FLASH_WaitForLastOperation>
 8000daa:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	f022 0204 	bic.w	r2, r2, #4
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	e002      	b.n	8000dc4 <HAL_FLASHEx_Erase+0xa6>
            *PageError = address;
 8000dbe:	6034      	str	r4, [r6, #0]
            break;
 8000dc0:	e000      	b.n	8000dc4 <HAL_FLASHEx_Erase+0xa6>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000dc2:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8000dc4:	f240 13b0 	movw	r3, #432	@ 0x1b0
 8000dc8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000dcc:	2200      	movs	r2, #0
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000dd4:	2102      	movs	r1, #2
}
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000de2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de4:	e0cb      	b.n	8000f7e <HAL_GPIO_Init+0x1a2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000de6:	2500      	movs	r5, #0
 8000de8:	f2c1 0522 	movt	r5, #4130	@ 0x1022
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d019      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
 8000df0:	2500      	movs	r5, #0
 8000df2:	f2c1 0522 	movt	r5, #4130	@ 0x1022
 8000df6:	42ab      	cmp	r3, r5
 8000df8:	d90a      	bls.n	8000e10 <HAL_GPIO_Init+0x34>
 8000dfa:	2500      	movs	r5, #0
 8000dfc:	f2c1 0531 	movt	r5, #4145	@ 0x1031
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d00f      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
 8000e04:	2500      	movs	r5, #0
 8000e06:	f2c1 0532 	movt	r5, #4146	@ 0x1032
 8000e0a:	42ab      	cmp	r3, r5
 8000e0c:	d00a      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
 8000e0e:	e016      	b.n	8000e3e <HAL_GPIO_Init+0x62>
 8000e10:	2500      	movs	r5, #0
 8000e12:	f2c1 0512 	movt	r5, #4114	@ 0x1012
 8000e16:	42ab      	cmp	r3, r5
 8000e18:	d004      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	f2c1 0521 	movt	r5, #4129	@ 0x1021
 8000e20:	42ab      	cmp	r3, r5
 8000e22:	d107      	bne.n	8000e34 <HAL_GPIO_Init+0x58>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e24:	688b      	ldr	r3, [r1, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d065      	beq.n	8000ef6 <HAL_GPIO_Init+0x11a>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d05e      	beq.n	8000eec <HAL_GPIO_Init+0x110>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000e2e:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2408      	movs	r4, #8
 8000e32:	e004      	b.n	8000e3e <HAL_GPIO_Init+0x62>
      switch (GPIO_Init->Mode)
 8000e34:	2500      	movs	r5, #0
 8000e36:	f2c1 0511 	movt	r5, #4113	@ 0x1011
 8000e3a:	42ab      	cmp	r3, r5
 8000e3c:	d0f2      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e3e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8000e42:	d85a      	bhi.n	8000efa <HAL_GPIO_Init+0x11e>
 8000e44:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e46:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e4a:	6833      	ldr	r3, [r6, #0]
 8000e4c:	250f      	movs	r5, #15
 8000e4e:	4095      	lsls	r5, r2
 8000e50:	ea23 0305 	bic.w	r3, r3, r5
 8000e54:	fa04 f202 	lsl.w	r2, r4, r2
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e5c:	684b      	ldr	r3, [r1, #4]
 8000e5e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000e62:	f000 808a 	beq.w	8000f7a <HAL_GPIO_Init+0x19e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000e6e:	699a      	ldr	r2, [r3, #24]
 8000e70:	f042 0201 	orr.w	r2, r2, #1
 8000e74:	619a      	str	r2, [r3, #24]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000e80:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000e84:	2300      	movs	r3, #0
 8000e86:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000e8a:	1c95      	adds	r5, r2, #2
 8000e8c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e90:	f00c 0503 	and.w	r5, ip, #3
 8000e94:	00ad      	lsls	r5, r5, #2
 8000e96:	230f      	movs	r3, #15
 8000e98:	40ab      	lsls	r3, r5
 8000e9a:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ea2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000ea6:	4298      	cmp	r0, r3
 8000ea8:	d02e      	beq.n	8000f08 <HAL_GPIO_Init+0x12c>
 8000eaa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eae:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	f000 80a0 	beq.w	8000ff8 <HAL_GPIO_Init+0x21c>
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	f000 809b 	beq.w	8000ffc <HAL_GPIO_Init+0x220>
 8000ec6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eca:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000ece:	4298      	cmp	r0, r3
 8000ed0:	d018      	beq.n	8000f04 <HAL_GPIO_Init+0x128>
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	e019      	b.n	8000f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed6:	68cc      	ldr	r4, [r1, #12]
          break;
 8000ed8:	e7b1      	b.n	8000e3e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eda:	68cc      	ldr	r4, [r1, #12]
 8000edc:	3404      	adds	r4, #4
          break;
 8000ede:	e7ae      	b.n	8000e3e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ee0:	68cc      	ldr	r4, [r1, #12]
 8000ee2:	3408      	adds	r4, #8
          break;
 8000ee4:	e7ab      	b.n	8000e3e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee6:	68cc      	ldr	r4, [r1, #12]
 8000ee8:	340c      	adds	r4, #12
          break;
 8000eea:	e7a8      	b.n	8000e3e <HAL_GPIO_Init+0x62>
            GPIOx->BSRR = ioposition;
 8000eec:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eee:	2408      	movs	r4, #8
 8000ef0:	e7a5      	b.n	8000e3e <HAL_GPIO_Init+0x62>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef2:	2400      	movs	r4, #0
 8000ef4:	e7a3      	b.n	8000e3e <HAL_GPIO_Init+0x62>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ef6:	2404      	movs	r4, #4
 8000ef8:	e7a1      	b.n	8000e3e <HAL_GPIO_Init+0x62>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000efa:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000efc:	f1ac 0208 	sub.w	r2, ip, #8
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	e7a2      	b.n	8000e4a <HAL_GPIO_Init+0x6e>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f04:	2303      	movs	r3, #3
 8000f06:	e000      	b.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	40ab      	lsls	r3, r5
 8000f0c:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000f0e:	2500      	movs	r5, #0
 8000f10:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8000f14:	3202      	adds	r2, #2
 8000f16:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f1a:	684b      	ldr	r3, [r1, #4]
 8000f1c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000f20:	d06e      	beq.n	8001000 <HAL_GPIO_Init+0x224>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f26:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	ea42 020e 	orr.w	r2, r2, lr
 8000f30:	601a      	str	r2, [r3, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f32:	684b      	ldr	r3, [r1, #4]
 8000f34:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f38:	d06b      	beq.n	8001012 <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3e:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	ea42 020e 	orr.w	r2, r2, lr
 8000f48:	605a      	str	r2, [r3, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4a:	684b      	ldr	r3, [r1, #4]
 8000f4c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000f50:	d068      	beq.n	8001024 <HAL_GPIO_Init+0x248>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f56:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	ea42 020e 	orr.w	r2, r2, lr
 8000f60:	609a      	str	r2, [r3, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f62:	684b      	ldr	r3, [r1, #4]
 8000f64:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8000f68:	d065      	beq.n	8001036 <HAL_GPIO_Init+0x25a>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f6e:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	ea42 020e 	orr.w	r2, r2, lr
 8000f78:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000f7a:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	680b      	ldr	r3, [r1, #0]
 8000f80:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000f84:	d060      	beq.n	8001048 <HAL_GPIO_Init+0x26c>
    ioposition = (0x01uL << position);
 8000f86:	2201      	movs	r2, #1
 8000f88:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8c:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000f90:	ea32 0303 	bics.w	r3, r2, r3
 8000f94:	d1f1      	bne.n	8000f7a <HAL_GPIO_Init+0x19e>
      switch (GPIO_Init->Mode)
 8000f96:	684b      	ldr	r3, [r1, #4]
 8000f98:	2b12      	cmp	r3, #18
 8000f9a:	f63f af24 	bhi.w	8000de6 <HAL_GPIO_Init+0xa>
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	f63f af4d 	bhi.w	8000e3e <HAL_GPIO_Init+0x62>
 8000fa4:	a501      	add	r5, pc, #4	@ (adr r5, 8000fac <HAL_GPIO_Init+0x1d0>)
 8000fa6:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000e25 	.word	0x08000e25
 8000fb0:	08000ed7 	.word	0x08000ed7
 8000fb4:	08000ee1 	.word	0x08000ee1
 8000fb8:	08000ef3 	.word	0x08000ef3
 8000fbc:	08000e3f 	.word	0x08000e3f
 8000fc0:	08000e3f 	.word	0x08000e3f
 8000fc4:	08000e3f 	.word	0x08000e3f
 8000fc8:	08000e3f 	.word	0x08000e3f
 8000fcc:	08000e3f 	.word	0x08000e3f
 8000fd0:	08000e3f 	.word	0x08000e3f
 8000fd4:	08000e3f 	.word	0x08000e3f
 8000fd8:	08000e3f 	.word	0x08000e3f
 8000fdc:	08000e3f 	.word	0x08000e3f
 8000fe0:	08000e3f 	.word	0x08000e3f
 8000fe4:	08000e3f 	.word	0x08000e3f
 8000fe8:	08000e3f 	.word	0x08000e3f
 8000fec:	08000e3f 	.word	0x08000e3f
 8000ff0:	08000edb 	.word	0x08000edb
 8000ff4:	08000ee7 	.word	0x08000ee7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e786      	b.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e784      	b.n	8000f0a <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001004:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	ea22 020e 	bic.w	r2, r2, lr
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e78f      	b.n	8000f32 <HAL_GPIO_Init+0x156>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001016:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	ea22 020e 	bic.w	r2, r2, lr
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	e792      	b.n	8000f4a <HAL_GPIO_Init+0x16e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001028:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	ea22 020e 	bic.w	r2, r2, lr
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	e795      	b.n	8000f62 <HAL_GPIO_Init+0x186>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	ea22 020e 	bic.w	r2, r2, lr
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	e798      	b.n	8000f7a <HAL_GPIO_Init+0x19e>
  }
}
 8001048:	b002      	add	sp, #8
 800104a:	bd70      	pop	{r4, r5, r6, pc}

0800104c <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800104c:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800104e:	e07e      	b.n	800114e <HAL_GPIO_DeInit+0x102>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001050:	2503      	movs	r5, #3
 8001052:	e000      	b.n	8001056 <HAL_GPIO_DeInit+0xa>
 8001054:	2500      	movs	r5, #0
 8001056:	fa05 f404 	lsl.w	r4, r5, r4
 800105a:	4564      	cmp	r4, ip
 800105c:	d04f      	beq.n	80010fe <HAL_GPIO_DeInit+0xb2>
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800105e:	2bff      	cmp	r3, #255	@ 0xff
 8001060:	d86d      	bhi.n	800113e <HAL_GPIO_DeInit+0xf2>
 8001062:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001064:	0095      	lsls	r5, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001066:	f8de 4000 	ldr.w	r4, [lr]
 800106a:	f04f 0c0f 	mov.w	ip, #15
 800106e:	fa0c fc05 	lsl.w	ip, ip, r5
 8001072:	ea24 040c 	bic.w	r4, r4, ip
 8001076:	f04f 0c04 	mov.w	ip, #4
 800107a:	fa0c fc05 	lsl.w	ip, ip, r5
 800107e:	ea44 040c 	orr.w	r4, r4, ip
 8001082:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001086:	68c4      	ldr	r4, [r0, #12]
 8001088:	ea24 0303 	bic.w	r3, r4, r3
 800108c:	60c3      	str	r3, [r0, #12]
    }

    position++;
 800108e:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001090:	fa31 f302 	lsrs.w	r3, r1, r2
 8001094:	d059      	beq.n	800114a <HAL_GPIO_DeInit+0xfe>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001096:	2301      	movs	r3, #1
 8001098:	4093      	lsls	r3, r2
    if (iocurrent)
 800109a:	400b      	ands	r3, r1
 800109c:	d0f7      	beq.n	800108e <HAL_GPIO_DeInit+0x42>
      tmp = AFIO->EXTICR[position >> 2u];
 800109e:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 80010a2:	2500      	movs	r5, #0
 80010a4:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80010a8:	f10e 0402 	add.w	r4, lr, #2
 80010ac:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80010b0:	f002 0403 	and.w	r4, r2, #3
 80010b4:	00a4      	lsls	r4, r4, #2
 80010b6:	f04f 0c0f 	mov.w	ip, #15
 80010ba:	fa0c f604 	lsl.w	r6, ip, r4
 80010be:	ea06 0c05 	and.w	ip, r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80010c2:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80010c6:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80010ca:	42a8      	cmp	r0, r5
 80010cc:	d0c2      	beq.n	8001054 <HAL_GPIO_DeInit+0x8>
 80010ce:	f44f 6540 	mov.w	r5, #3072	@ 0xc00
 80010d2:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80010d6:	42a8      	cmp	r0, r5
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_DeInit+0xaa>
 80010da:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80010de:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80010e2:	42a8      	cmp	r0, r5
 80010e4:	d009      	beq.n	80010fa <HAL_GPIO_DeInit+0xae>
 80010e6:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
 80010ea:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80010ee:	42a8      	cmp	r0, r5
 80010f0:	d0ae      	beq.n	8001050 <HAL_GPIO_DeInit+0x4>
 80010f2:	2504      	movs	r5, #4
 80010f4:	e7af      	b.n	8001056 <HAL_GPIO_DeInit+0xa>
 80010f6:	2501      	movs	r5, #1
 80010f8:	e7ad      	b.n	8001056 <HAL_GPIO_DeInit+0xa>
 80010fa:	2502      	movs	r5, #2
 80010fc:	e7ab      	b.n	8001056 <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80010fe:	2500      	movs	r5, #0
 8001100:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8001104:	f10e 0402 	add.w	r4, lr, #2
 8001108:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
 800110c:	ea27 0606 	bic.w	r6, r7, r6
 8001110:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001114:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8001118:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 800111c:	6825      	ldr	r5, [r4, #0]
 800111e:	ea25 0503 	bic.w	r5, r5, r3
 8001122:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001124:	6865      	ldr	r5, [r4, #4]
 8001126:	ea25 0503 	bic.w	r5, r5, r3
 800112a:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800112c:	68a5      	ldr	r5, [r4, #8]
 800112e:	ea25 0503 	bic.w	r5, r5, r3
 8001132:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001134:	68e5      	ldr	r5, [r4, #12]
 8001136:	ea25 0503 	bic.w	r5, r5, r3
 800113a:	60e5      	str	r5, [r4, #12]
 800113c:	e78f      	b.n	800105e <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800113e:	f100 0e04 	add.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001142:	f1a2 0508 	sub.w	r5, r2, #8
 8001146:	00ad      	lsls	r5, r5, #2
 8001148:	e78d      	b.n	8001066 <HAL_GPIO_DeInit+0x1a>
  }
}
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 800114c:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 800114e:	fa31 f302 	lsrs.w	r3, r1, r2
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_DeInit+0x114>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001154:	2301      	movs	r3, #1
 8001156:	4093      	lsls	r3, r2
    if (iocurrent)
 8001158:	400b      	ands	r3, r1
 800115a:	d0f7      	beq.n	800114c <HAL_GPIO_DeInit+0x100>
{
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	e79e      	b.n	800109e <HAL_GPIO_DeInit+0x52>
 8001160:	4770      	bx	lr

08001162 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001162:	6883      	ldr	r3, [r0, #8]
 8001164:	4219      	tst	r1, r3
 8001166:	d001      	beq.n	800116c <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001168:	2001      	movs	r0, #1
 800116a:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800116c:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800116e:	4770      	bx	lr

08001170 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001170:	b10a      	cbz	r2, 8001176 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	6101      	str	r1, [r0, #16]
 8001174:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001176:	0409      	lsls	r1, r1, #16
 8001178:	6101      	str	r1, [r0, #16]
  }
}
 800117a:	4770      	bx	lr

0800117c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800117c:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800117e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8001182:	d044      	beq.n	800120e <HAL_PCD_EP_DB_Receive+0x92>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001184:	6804      	ldr	r4, [r0, #0]
 8001186:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 800118a:	b29b      	uxth	r3, r3
 800118c:	f891 c000 	ldrb.w	ip, [r1]
 8001190:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8001194:	3302      	adds	r3, #2
 8001196:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800119a:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	@ 0x400
 800119e:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 80011a2:	698b      	ldr	r3, [r1, #24]
 80011a4:	42a3      	cmp	r3, r4
 80011a6:	d328      	bcc.n	80011fa <HAL_PCD_EP_DB_Receive+0x7e>
    {
      ep->xfer_len -= count;
 80011a8:	1b1b      	subs	r3, r3, r4
 80011aa:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80011ac:	698b      	ldr	r3, [r1, #24]
 80011ae:	b97b      	cbnz	r3, 80011d0 <HAL_PCD_EP_DB_Receive+0x54>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80011b0:	6805      	ldr	r5, [r0, #0]
 80011b2:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80011c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011cc:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011d0:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80011d4:	d00e      	beq.n	80011f4 <HAL_PCD_EP_DB_Receive+0x78>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80011d6:	6802      	ldr	r2, [r0, #0]
 80011d8:	780d      	ldrb	r5, [r1, #0]
 80011da:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80011e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80011f0:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 80011f4:	b924      	cbnz	r4, 8001200 <HAL_PCD_EP_DB_Receive+0x84>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 80011f6:	4620      	mov	r0, r4
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	618b      	str	r3, [r1, #24]
 80011fe:	e7d5      	b.n	80011ac <HAL_PCD_EP_DB_Receive+0x30>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001200:	4623      	mov	r3, r4
 8001202:	890a      	ldrh	r2, [r1, #8]
 8001204:	6949      	ldr	r1, [r1, #20]
 8001206:	6800      	ldr	r0, [r0, #0]
 8001208:	f002 fb37 	bl	800387a <USB_ReadPMA>
 800120c:	e7f3      	b.n	80011f6 <HAL_PCD_EP_DB_Receive+0x7a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800120e:	6804      	ldr	r4, [r0, #0]
 8001210:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8001214:	b29b      	uxth	r3, r3
 8001216:	f891 c000 	ldrb.w	ip, [r1]
 800121a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800121e:	3306      	adds	r3, #6
 8001220:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8001224:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	@ 0x400
 8001228:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 800122c:	698b      	ldr	r3, [r1, #24]
 800122e:	42a3      	cmp	r3, r4
 8001230:	d32f      	bcc.n	8001292 <HAL_PCD_EP_DB_Receive+0x116>
      ep->xfer_len -= count;
 8001232:	1b1b      	subs	r3, r3, r4
 8001234:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8001236:	698b      	ldr	r3, [r1, #24]
 8001238:	b97b      	cbnz	r3, 800125a <HAL_PCD_EP_DB_Receive+0xde>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800123a:	6805      	ldr	r5, [r0, #0]
 800123c:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8001240:	b29b      	uxth	r3, r3
 8001242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800124a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800124e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001256:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800125a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800125e:	d10f      	bne.n	8001280 <HAL_PCD_EP_DB_Receive+0x104>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001260:	6802      	ldr	r2, [r0, #0]
 8001262:	f891 c000 	ldrb.w	ip, [r1]
 8001266:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800126a:	b29b      	uxth	r3, r3
 800126c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001278:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800127c:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8001280:	2c00      	cmp	r4, #0
 8001282:	d0b8      	beq.n	80011f6 <HAL_PCD_EP_DB_Receive+0x7a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001284:	4623      	mov	r3, r4
 8001286:	894a      	ldrh	r2, [r1, #10]
 8001288:	6949      	ldr	r1, [r1, #20]
 800128a:	6800      	ldr	r0, [r0, #0]
 800128c:	f002 faf5 	bl	800387a <USB_ReadPMA>
 8001290:	e7b1      	b.n	80011f6 <HAL_PCD_EP_DB_Receive+0x7a>
      ep->xfer_len = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	618b      	str	r3, [r1, #24]
 8001296:	e7ce      	b.n	8001236 <HAL_PCD_EP_DB_Receive+0xba>

08001298 <HAL_PCD_Init>:
{
 8001298:	b570      	push	{r4, r5, r6, lr}
 800129a:	b086      	sub	sp, #24
  if (hpcd == NULL)
 800129c:	2800      	cmp	r0, #0
 800129e:	f000 8085 	beq.w	80013ac <HAL_PCD_Init+0x114>
 80012a2:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012a4:	f890 32a9 	ldrb.w	r3, [r0, #681]	@ 0x2a9
 80012a8:	b1eb      	cbz	r3, 80012e6 <HAL_PCD_Init+0x4e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80012aa:	2303      	movs	r3, #3
 80012ac:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80012b0:	6820      	ldr	r0, [r4, #0]
 80012b2:	f001 fbab 	bl	8002a0c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b6:	4625      	mov	r5, r4
 80012b8:	f855 6b10 	ldr.w	r6, [r5], #16
 80012bc:	46ec      	mov	ip, sp
 80012be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	f8cc 3000 	str.w	r3, [ip]
 80012ca:	1d23      	adds	r3, r4, #4
 80012cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ce:	4630      	mov	r0, r6
 80012d0:	f001 fb8c 	bl	80029ec <USB_CoreInit>
 80012d4:	4605      	mov	r5, r0
 80012d6:	b158      	cbz	r0, 80012f0 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012d8:	2302      	movs	r3, #2
 80012da:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
    return HAL_ERROR;
 80012de:	2501      	movs	r5, #1
}
 80012e0:	4628      	mov	r0, r5
 80012e2:	b006      	add	sp, #24
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80012e6:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
    HAL_PCD_MspInit(hpcd);
 80012ea:	f003 fab3 	bl	8004854 <HAL_PCD_MspInit>
 80012ee:	e7dc      	b.n	80012aa <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012f0:	2100      	movs	r1, #0
 80012f2:	6820      	ldr	r0, [r4, #0]
 80012f4:	f001 fb94 	bl	8002a20 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f8:	462b      	mov	r3, r5
 80012fa:	e01a      	b.n	8001332 <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001302:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001306:	2001      	movs	r0, #1
 8001308:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 800130a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800130e:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001312:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001316:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800131a:	86cb      	strh	r3, [r1, #54]	@ 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800131c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8001320:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8001324:	2000      	movs	r0, #0
 8001326:	f88c 0003 	strb.w	r0, [ip, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800132a:	6388      	str	r0, [r1, #56]	@ 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800132c:	63c8      	str	r0, [r1, #60]	@ 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800132e:	6408      	str	r0, [r1, #64]	@ 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001330:	b2d3      	uxtb	r3, r2
 8001332:	6861      	ldr	r1, [r4, #4]
 8001334:	428b      	cmp	r3, r1
 8001336:	d3e1      	bcc.n	80012fc <HAL_PCD_Init+0x64>
 8001338:	e016      	b.n	8001368 <HAL_PCD_Init+0xd0>
    hpcd->OUT_ep[i].is_in = 0U;
 800133a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800133e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    hpcd->OUT_ep[i].num = i;
 8001348:	f883 5168 	strb.w	r5, [r3, #360]	@ 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800134c:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001350:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001354:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001358:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800135c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001360:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001364:	3501      	adds	r5, #1
 8001366:	b2ed      	uxtb	r5, r5
 8001368:	42a9      	cmp	r1, r5
 800136a:	d8e6      	bhi.n	800133a <HAL_PCD_Init+0xa2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800136c:	4625      	mov	r5, r4
 800136e:	f855 6b10 	ldr.w	r6, [r5], #16
 8001372:	46ec      	mov	ip, sp
 8001374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001376:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800137a:	682b      	ldr	r3, [r5, #0]
 800137c:	f8cc 3000 	str.w	r3, [ip]
 8001380:	1d23      	adds	r3, r4, #4
 8001382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001384:	4630      	mov	r0, r6
 8001386:	f001 fb4d 	bl	8002a24 <USB_DevInit>
 800138a:	4605      	mov	r5, r0
 800138c:	b120      	cbz	r0, 8001398 <HAL_PCD_Init+0x100>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800138e:	2302      	movs	r3, #2
 8001390:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
    return HAL_ERROR;
 8001394:	2501      	movs	r5, #1
 8001396:	e7a3      	b.n	80012e0 <HAL_PCD_Init+0x48>
  hpcd->USB_Address = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800139e:	2301      	movs	r3, #1
 80013a0:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80013a4:	6820      	ldr	r0, [r4, #0]
 80013a6:	f001 fe7e 	bl	80030a6 <USB_DevDisconnect>
  return HAL_OK;
 80013aa:	e799      	b.n	80012e0 <HAL_PCD_Init+0x48>
    return HAL_ERROR;
 80013ac:	2501      	movs	r5, #1
 80013ae:	e797      	b.n	80012e0 <HAL_PCD_Init+0x48>

080013b0 <HAL_PCD_DeInit>:
{
 80013b0:	b538      	push	{r3, r4, r5, lr}
  if (hpcd == NULL)
 80013b2:	b190      	cbz	r0, 80013da <HAL_PCD_DeInit+0x2a>
 80013b4:	4604      	mov	r4, r0
  hpcd->State = HAL_PCD_STATE_BUSY;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f880 32a9 	strb.w	r3, [r0, #681]	@ 0x2a9
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80013bc:	6800      	ldr	r0, [r0, #0]
 80013be:	f001 fe5f 	bl	8003080 <USB_StopDevice>
 80013c2:	4605      	mov	r5, r0
 80013c4:	b110      	cbz	r0, 80013cc <HAL_PCD_DeInit+0x1c>
    return HAL_ERROR;
 80013c6:	2501      	movs	r5, #1
}
 80013c8:	4628      	mov	r0, r5
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
  HAL_PCD_MspDeInit(hpcd);
 80013cc:	4620      	mov	r0, r4
 80013ce:	f003 fa63 	bl	8004898 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
  return HAL_OK;
 80013d8:	e7f6      	b.n	80013c8 <HAL_PCD_DeInit+0x18>
    return HAL_ERROR;
 80013da:	2501      	movs	r5, #1
 80013dc:	e7f4      	b.n	80013c8 <HAL_PCD_DeInit+0x18>

080013de <HAL_PCD_Start>:
{
 80013de:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80013e0:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d011      	beq.n	800140c <HAL_PCD_Start+0x2e>
 80013e8:	4604      	mov	r4, r0
 80013ea:	2501      	movs	r5, #1
 80013ec:	f880 52a8 	strb.w	r5, [r0, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80013f0:	6800      	ldr	r0, [r0, #0]
 80013f2:	f001 fb02 	bl	80029fa <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013f6:	4629      	mov	r1, r5
 80013f8:	4620      	mov	r0, r4
 80013fa:	f003 fb6a 	bl	8004ad2 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 80013fe:	6820      	ldr	r0, [r4, #0]
 8001400:	f001 fe4f 	bl	80030a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001404:	2000      	movs	r0, #0
 8001406:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 800140a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800140c:	2002      	movs	r0, #2
 800140e:	e7fc      	b.n	800140a <HAL_PCD_Start+0x2c>

08001410 <HAL_PCD_Stop>:
  __HAL_LOCK(hpcd);
 8001410:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 8001414:	2b01      	cmp	r3, #1
 8001416:	d012      	beq.n	800143e <HAL_PCD_Stop+0x2e>
{
 8001418:	b510      	push	{r4, lr}
 800141a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800141c:	2301      	movs	r3, #1
 800141e:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8001422:	6800      	ldr	r0, [r0, #0]
 8001424:	f001 faf2 	bl	8002a0c <USB_DisableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8001428:	2100      	movs	r1, #0
 800142a:	4620      	mov	r0, r4
 800142c:	f003 fb51 	bl	8004ad2 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001430:	6820      	ldr	r0, [r4, #0]
 8001432:	f001 fe38 	bl	80030a6 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8001436:	2000      	movs	r0, #0
 8001438:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 800143c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800143e:	2002      	movs	r0, #2
}
 8001440:	4770      	bx	lr

08001442 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001442:	b570      	push	{r4, r5, r6, lr}
 8001444:	4605      	mov	r5, r0
 8001446:	460c      	mov	r4, r1
 8001448:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800144a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800144e:	f000 80ba 	beq.w	80015c6 <HAL_PCD_EP_DB_Transmit+0x184>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001452:	6802      	ldr	r2, [r0, #0]
 8001454:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8001458:	b29b      	uxth	r3, r3
 800145a:	7809      	ldrb	r1, [r1, #0]
 800145c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001460:	3302      	adds	r3, #2
 8001462:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001466:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 800146a:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 800146e:	69a3      	ldr	r3, [r4, #24]
 8001470:	4293      	cmp	r3, r2
 8001472:	d92b      	bls.n	80014cc <HAL_PCD_EP_DB_Transmit+0x8a>
    {
      ep->xfer_len -= TxByteNbre;
 8001474:	1a9b      	subs	r3, r3, r2
 8001476:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001478:	69a3      	ldr	r3, [r4, #24]
 800147a:	b353      	cbz	r3, 80014d2 <HAL_PCD_EP_DB_Transmit+0x90>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800147c:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8001480:	d00d      	beq.n	800149e <HAL_PCD_EP_DB_Transmit+0x5c>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001482:	6828      	ldr	r0, [r5, #0]
 8001484:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001488:	b29b      	uxth	r3, r3
 800148a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800148e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001492:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800149a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800149e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d02b      	beq.n	80014fe <HAL_PCD_EP_DB_Transmit+0xbc>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80014a6:	682a      	ldr	r2, [r5, #0]
 80014a8:	7821      	ldrb	r1, [r4, #0]
 80014aa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80014b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014b8:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80014bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 80014c8:	2000      	movs	r0, #0
 80014ca:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61a3      	str	r3, [r4, #24]
 80014d0:	e7d2      	b.n	8001478 <HAL_PCD_EP_DB_Transmit+0x36>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014d2:	4628      	mov	r0, r5
 80014d4:	f003 fa09 	bl	80048ea <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80014d8:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80014dc:	d0e3      	beq.n	80014a6 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80014de:	682a      	ldr	r2, [r5, #0]
 80014e0:	7821      	ldrb	r1, [r4, #0]
 80014e2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80014ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80014fc:	e7d3      	b.n	80014a6 <HAL_PCD_EP_DB_Transmit+0x64>
        ep->xfer_buff += TxByteNbre;
 80014fe:	6963      	ldr	r3, [r4, #20]
 8001500:	4413      	add	r3, r2
 8001502:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8001504:	69e3      	ldr	r3, [r4, #28]
 8001506:	4413      	add	r3, r2
 8001508:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800150a:	6a21      	ldr	r1, [r4, #32]
 800150c:	6923      	ldr	r3, [r4, #16]
 800150e:	4299      	cmp	r1, r3
 8001510:	d31f      	bcc.n	8001552 <HAL_PCD_EP_DB_Transmit+0x110>
          ep->xfer_len_db -= len;
 8001512:	1ac9      	subs	r1, r1, r3
 8001514:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001516:	7862      	ldrb	r2, [r4, #1]
 8001518:	2a00      	cmp	r2, #0
 800151a:	d13f      	bne.n	800159c <HAL_PCD_EP_DB_Transmit+0x15a>
 800151c:	682a      	ldr	r2, [r5, #0]
 800151e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001522:	b289      	uxth	r1, r1
 8001524:	440a      	add	r2, r1
 8001526:	7821      	ldrb	r1, [r4, #0]
 8001528:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800152c:	b9eb      	cbnz	r3, 800156a <HAL_PCD_EP_DB_Transmit+0x128>
 800152e:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8001532:	b289      	uxth	r1, r1
 8001534:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8001538:	b289      	uxth	r1, r1
 800153a:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800153e:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8001542:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001546:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800154a:	b289      	uxth	r1, r1
 800154c:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8001550:	e026      	b.n	80015a0 <HAL_PCD_EP_DB_Transmit+0x15e>
        else if (ep->xfer_len_db == 0U)
 8001552:	b921      	cbnz	r1, 800155e <HAL_PCD_EP_DB_Transmit+0x11c>
          ep->xfer_fill_db = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxByteNbre;
 800155a:	4613      	mov	r3, r2
 800155c:	e7db      	b.n	8001516 <HAL_PCD_EP_DB_Transmit+0xd4>
          ep->xfer_fill_db = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8001564:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8001566:	460b      	mov	r3, r1
 8001568:	e7d5      	b.n	8001516 <HAL_PCD_EP_DB_Transmit+0xd4>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800156a:	2b3e      	cmp	r3, #62	@ 0x3e
 800156c:	d809      	bhi.n	8001582 <HAL_PCD_EP_DB_Transmit+0x140>
 800156e:	0859      	lsrs	r1, r3, #1
 8001570:	f013 0f01 	tst.w	r3, #1
 8001574:	d000      	beq.n	8001578 <HAL_PCD_EP_DB_Transmit+0x136>
 8001576:	3101      	adds	r1, #1
 8001578:	0289      	lsls	r1, r1, #10
 800157a:	b289      	uxth	r1, r1
 800157c:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8001580:	e00e      	b.n	80015a0 <HAL_PCD_EP_DB_Transmit+0x15e>
 8001582:	0959      	lsrs	r1, r3, #5
 8001584:	f013 0f1f 	tst.w	r3, #31
 8001588:	d100      	bne.n	800158c <HAL_PCD_EP_DB_Transmit+0x14a>
 800158a:	3901      	subs	r1, #1
 800158c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8001590:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001594:	b289      	uxth	r1, r1
 8001596:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800159a:	e001      	b.n	80015a0 <HAL_PCD_EP_DB_Transmit+0x15e>
 800159c:	2a01      	cmp	r2, #1
 800159e:	d006      	beq.n	80015ae <HAL_PCD_EP_DB_Transmit+0x16c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	8922      	ldrh	r2, [r4, #8]
 80015a4:	6961      	ldr	r1, [r4, #20]
 80015a6:	6828      	ldr	r0, [r5, #0]
 80015a8:	f001 fd85 	bl	80030b6 <USB_WritePMA>
 80015ac:	e77b      	b.n	80014a6 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80015ae:	682a      	ldr	r2, [r5, #0]
 80015b0:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 80015b4:	b289      	uxth	r1, r1
 80015b6:	440a      	add	r2, r1
 80015b8:	7821      	ldrb	r1, [r4, #0]
 80015ba:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80015be:	b299      	uxth	r1, r3
 80015c0:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 80015c4:	e7ec      	b.n	80015a0 <HAL_PCD_EP_DB_Transmit+0x15e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80015c6:	6802      	ldr	r2, [r0, #0]
 80015c8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	7809      	ldrb	r1, [r1, #0]
 80015d0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80015d4:	3306      	adds	r3, #6
 80015d6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80015da:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 80015de:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 80015e2:	69a3      	ldr	r3, [r4, #24]
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d344      	bcc.n	8001672 <HAL_PCD_EP_DB_Transmit+0x230>
      ep->xfer_len -= TxByteNbre;
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 80015ec:	69a3      	ldr	r3, [r4, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d042      	beq.n	8001678 <HAL_PCD_EP_DB_Transmit+0x236>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80015f2:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80015f6:	d10d      	bne.n	8001614 <HAL_PCD_EP_DB_Transmit+0x1d2>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80015f8:	6828      	ldr	r0, [r5, #0]
 80015fa:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001608:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001614:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001618:	2b01      	cmp	r3, #1
 800161a:	f47f af44 	bne.w	80014a6 <HAL_PCD_EP_DB_Transmit+0x64>
        ep->xfer_buff += TxByteNbre;
 800161e:	6963      	ldr	r3, [r4, #20]
 8001620:	4413      	add	r3, r2
 8001622:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8001624:	69e3      	ldr	r3, [r4, #28]
 8001626:	4413      	add	r3, r2
 8001628:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800162a:	6a21      	ldr	r1, [r4, #32]
 800162c:	6923      	ldr	r3, [r4, #16]
 800162e:	4299      	cmp	r1, r3
 8001630:	d339      	bcc.n	80016a6 <HAL_PCD_EP_DB_Transmit+0x264>
          ep->xfer_len_db -= len;
 8001632:	1ac9      	subs	r1, r1, r3
 8001634:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001636:	682a      	ldr	r2, [r5, #0]
 8001638:	7861      	ldrb	r1, [r4, #1]
 800163a:	2900      	cmp	r1, #0
 800163c:	d158      	bne.n	80016f0 <HAL_PCD_EP_DB_Transmit+0x2ae>
 800163e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001642:	b289      	uxth	r1, r1
 8001644:	440a      	add	r2, r1
 8001646:	7821      	ldrb	r1, [r4, #0]
 8001648:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800164c:	bbbb      	cbnz	r3, 80016be <HAL_PCD_EP_DB_Transmit+0x27c>
 800164e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8001652:	b289      	uxth	r1, r1
 8001654:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8001658:	b289      	uxth	r1, r1
 800165a:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 800165e:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8001662:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001666:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800166a:	b289      	uxth	r1, r1
 800166c:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8001670:	e040      	b.n	80016f4 <HAL_PCD_EP_DB_Transmit+0x2b2>
      ep->xfer_len = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	61a3      	str	r3, [r4, #24]
 8001676:	e7b9      	b.n	80015ec <HAL_PCD_EP_DB_Transmit+0x1aa>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001678:	4628      	mov	r0, r5
 800167a:	f003 f936 	bl	80048ea <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800167e:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8001682:	f47f af10 	bne.w	80014a6 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001686:	682a      	ldr	r2, [r5, #0]
 8001688:	7821      	ldrb	r1, [r4, #0]
 800168a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800168e:	b29b      	uxth	r3, r3
 8001690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800169c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80016a4:	e6ff      	b.n	80014a6 <HAL_PCD_EP_DB_Transmit+0x64>
        else if (ep->xfer_len_db == 0U)
 80016a6:	b921      	cbnz	r1, 80016b2 <HAL_PCD_EP_DB_Transmit+0x270>
          ep->xfer_fill_db = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxByteNbre;
 80016ae:	4613      	mov	r3, r2
 80016b0:	e7c1      	b.n	8001636 <HAL_PCD_EP_DB_Transmit+0x1f4>
          ep->xfer_len_db = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80016b6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = ep->xfer_len_db;
 80016ba:	460b      	mov	r3, r1
 80016bc:	e7bb      	b.n	8001636 <HAL_PCD_EP_DB_Transmit+0x1f4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80016be:	2b3e      	cmp	r3, #62	@ 0x3e
 80016c0:	d809      	bhi.n	80016d6 <HAL_PCD_EP_DB_Transmit+0x294>
 80016c2:	0859      	lsrs	r1, r3, #1
 80016c4:	f013 0f01 	tst.w	r3, #1
 80016c8:	d000      	beq.n	80016cc <HAL_PCD_EP_DB_Transmit+0x28a>
 80016ca:	3101      	adds	r1, #1
 80016cc:	0289      	lsls	r1, r1, #10
 80016ce:	b289      	uxth	r1, r1
 80016d0:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 80016d4:	e00e      	b.n	80016f4 <HAL_PCD_EP_DB_Transmit+0x2b2>
 80016d6:	0959      	lsrs	r1, r3, #5
 80016d8:	f013 0f1f 	tst.w	r3, #31
 80016dc:	d100      	bne.n	80016e0 <HAL_PCD_EP_DB_Transmit+0x29e>
 80016de:	3901      	subs	r1, #1
 80016e0:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 80016e4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80016e8:	b289      	uxth	r1, r1
 80016ea:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 80016ee:	e001      	b.n	80016f4 <HAL_PCD_EP_DB_Transmit+0x2b2>
 80016f0:	2901      	cmp	r1, #1
 80016f2:	d006      	beq.n	8001702 <HAL_PCD_EP_DB_Transmit+0x2c0>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	8962      	ldrh	r2, [r4, #10]
 80016f8:	6961      	ldr	r1, [r4, #20]
 80016fa:	6828      	ldr	r0, [r5, #0]
 80016fc:	f001 fcdb 	bl	80030b6 <USB_WritePMA>
 8001700:	e6d1      	b.n	80014a6 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001702:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001706:	b289      	uxth	r1, r1
 8001708:	440a      	add	r2, r1
 800170a:	7821      	ldrb	r1, [r4, #0]
 800170c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001710:	b299      	uxth	r1, r3
 8001712:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8001716:	e7ed      	b.n	80016f4 <HAL_PCD_EP_DB_Transmit+0x2b2>

08001718 <PCD_EP_ISR_Handler>:
{
 8001718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800171c:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800171e:	6828      	ldr	r0, [r5, #0]
 8001720:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8001724:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8001728:	f000 820f 	beq.w	8001b4a <PCD_EP_ISR_Handler+0x432>
    wIstr = hpcd->Instance->ISTR;
 800172c:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 8001730:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8001732:	f014 040f 	ands.w	r4, r4, #15
 8001736:	f040 80d4 	bne.w	80018e2 <PCD_EP_ISR_Handler+0x1ca>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800173a:	f013 0f10 	tst.w	r3, #16
 800173e:	d05d      	beq.n	80017fc <PCD_EP_ISR_Handler+0xe4>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001740:	8803      	ldrh	r3, [r0, #0]
 8001742:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001744:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001748:	f040 808f 	bne.w	800186a <PCD_EP_ISR_Handler+0x152>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800174c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001750:	d0e5      	beq.n	800171e <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001752:	8803      	ldrh	r3, [r0, #0]
 8001754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001758:	051b      	lsls	r3, r3, #20
 800175a:	0d1b      	lsrs	r3, r3, #20
 800175c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001760:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001762:	6828      	ldr	r0, [r5, #0]
 8001764:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8001768:	b29b      	uxth	r3, r3
 800176a:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 800176e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001772:	3306      	adds	r3, #6
 8001774:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001778:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800177c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001780:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001784:	b18b      	cbz	r3, 80017aa <PCD_EP_ISR_Handler+0x92>
 8001786:	f8d5 117c 	ldr.w	r1, [r5, #380]	@ 0x17c
 800178a:	b171      	cbz	r1, 80017aa <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800178c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 8001790:	f002 f873 	bl	800387a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001794:	f8d5 317c 	ldr.w	r3, [r5, #380]	@ 0x17c
 8001798:	f8d5 2184 	ldr.w	r2, [r5, #388]	@ 0x184
 800179c:	4413      	add	r3, r2
 800179e:	f8c5 317c 	str.w	r3, [r5, #380]	@ 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017a2:	2100      	movs	r1, #0
 80017a4:	4628      	mov	r0, r5
 80017a6:	f003 f894 	bl	80048d2 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80017b0:	b292      	uxth	r2, r2
 80017b2:	4413      	add	r3, r2
 80017b4:	f8d5 2178 	ldr.w	r2, [r5, #376]	@ 0x178
 80017b8:	2a00      	cmp	r2, #0
 80017ba:	d179      	bne.n	80018b0 <PCD_EP_ISR_Handler+0x198>
 80017bc:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80017c0:	b292      	uxth	r2, r2
 80017c2:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80017c6:	b292      	uxth	r2, r2
 80017c8:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80017cc:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80017d0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80017d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80017d8:	b292      	uxth	r2, r2
 80017da:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017de:	682a      	ldr	r2, [r5, #0]
 80017e0:	8813      	ldrh	r3, [r2, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017ec:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80017f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f8:	8013      	strh	r3, [r2, #0]
 80017fa:	e790      	b.n	800171e <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017fc:	8803      	ldrh	r3, [r0, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800180c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001810:	b29b      	uxth	r3, r3
 8001812:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001814:	682a      	ldr	r2, [r5, #0]
 8001816:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 800181a:	b29b      	uxth	r3, r3
 800181c:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 8001820:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001824:	3302      	adds	r3, #2
 8001826:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800182a:	f8b2 3400 	ldrh.w	r3, [r2, #1024]	@ 0x400
 800182e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001832:	646b      	str	r3, [r5, #68]	@ 0x44
        ep->xfer_buff += ep->xfer_count;
 8001834:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8001836:	441a      	add	r2, r3
 8001838:	63ea      	str	r2, [r5, #60]	@ 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800183a:	2100      	movs	r1, #0
 800183c:	4628      	mov	r0, r5
 800183e:	f003 f854 	bl	80048ea <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001842:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	f43f af69 	beq.w	800171e <PCD_EP_ISR_Handler+0x6>
 800184c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	f47f af65 	bne.w	800171e <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001854:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8001858:	682a      	ldr	r2, [r5, #0]
 800185a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800185e:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
 8001868:	e759      	b.n	800171e <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800186a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800186e:	b29b      	uxth	r3, r3
 8001870:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 8001874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001878:	3306      	adds	r3, #6
 800187a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800187e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001886:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800188a:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 800188e:	f505 712c 	add.w	r1, r5, #688	@ 0x2b0
 8001892:	f001 fff2 	bl	800387a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001896:	682a      	ldr	r2, [r5, #0]
 8001898:	8813      	ldrh	r3, [r2, #0]
 800189a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800189e:	051b      	lsls	r3, r3, #20
 80018a0:	0d1b      	lsrs	r3, r3, #20
 80018a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80018a8:	4628      	mov	r0, r5
 80018aa:	f003 f80a 	bl	80048c2 <HAL_PCD_SetupStageCallback>
 80018ae:	e736      	b.n	800171e <PCD_EP_ISR_Handler+0x6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018b0:	2a3e      	cmp	r2, #62	@ 0x3e
 80018b2:	d809      	bhi.n	80018c8 <PCD_EP_ISR_Handler+0x1b0>
 80018b4:	0851      	lsrs	r1, r2, #1
 80018b6:	f012 0f01 	tst.w	r2, #1
 80018ba:	d000      	beq.n	80018be <PCD_EP_ISR_Handler+0x1a6>
 80018bc:	3101      	adds	r1, #1
 80018be:	0289      	lsls	r1, r1, #10
 80018c0:	b289      	uxth	r1, r1
 80018c2:	f8a3 140c 	strh.w	r1, [r3, #1036]	@ 0x40c
 80018c6:	e78a      	b.n	80017de <PCD_EP_ISR_Handler+0xc6>
 80018c8:	0951      	lsrs	r1, r2, #5
 80018ca:	f012 0f1f 	tst.w	r2, #31
 80018ce:	d100      	bne.n	80018d2 <PCD_EP_ISR_Handler+0x1ba>
 80018d0:	3901      	subs	r1, #1
 80018d2:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80018d6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80018da:	b292      	uxth	r2, r2
 80018dc:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80018e0:	e77d      	b.n	80017de <PCD_EP_ISR_Handler+0xc6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018e2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80018e6:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018e8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80018ec:	d148      	bne.n	8001980 <PCD_EP_ISR_Handler+0x268>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018ee:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80018f2:	f43f af14 	beq.w	800171e <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 80018f6:	1c62      	adds	r2, r4, #1
 80018f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80018fc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001900:	6828      	ldr	r0, [r5, #0]
 8001902:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001906:	b29b      	uxth	r3, r3
 8001908:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800190c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001918:	b29b      	uxth	r3, r3
 800191a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 800191e:	78cb      	ldrb	r3, [r1, #3]
 8001920:	2b02      	cmp	r3, #2
 8001922:	f000 80f1 	beq.w	8001b08 <PCD_EP_ISR_Handler+0x3f0>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001926:	6828      	ldr	r0, [r5, #0]
 8001928:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800192c:	b29b      	uxth	r3, r3
 800192e:	1c62      	adds	r2, r4, #1
 8001930:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001934:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 8001938:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800193c:	3302      	adds	r3, #2
 800193e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001942:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001946:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 800194a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800194e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001952:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001954:	429a      	cmp	r2, r3
 8001956:	f240 80e0 	bls.w	8001b1a <PCD_EP_ISR_Handler+0x402>
            ep->xfer_len -= TxByteNbre;
 800195a:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 800195e:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	643a      	str	r2, [r7, #64]	@ 0x40
          if (ep->xfer_len == 0U)
 8001966:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800196a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800196e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001970:	2a00      	cmp	r2, #0
 8001972:	f040 80d9 	bne.w	8001b28 <PCD_EP_ISR_Handler+0x410>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001976:	4631      	mov	r1, r6
 8001978:	4628      	mov	r0, r5
 800197a:	f002 ffb6 	bl	80048ea <HAL_PCD_DataInStageCallback>
 800197e:	e6ce      	b.n	800171e <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001980:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001988:	051b      	lsls	r3, r3, #20
 800198a:	0d1b      	lsrs	r3, r3, #20
 800198c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001990:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8001994:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001998:	00c9      	lsls	r1, r1, #3
 800199a:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 800199e:	186f      	adds	r7, r5, r1
        if (ep->doublebuffer == 0U)
 80019a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80019a4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80019a8:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d144      	bne.n	8001a3a <PCD_EP_ISR_Handler+0x322>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019b0:	6828      	ldr	r0, [r5, #0]
 80019b2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80019bc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80019c0:	f892 2168 	ldrb.w	r2, [r2, #360]	@ 0x168
 80019c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019c8:	3306      	adds	r3, #6
 80019ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80019ce:	f8b3 8400 	ldrh.w	r8, [r3, #1024]	@ 0x400
 80019d2:	f3c8 0809 	ubfx	r8, r8, #0, #10
          if (count != 0U)
 80019d6:	f1b8 0f00 	cmp.w	r8, #0
 80019da:	d122      	bne.n	8001a22 <PCD_EP_ISR_Handler+0x30a>
        ep->xfer_count += count;
 80019dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80019e0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80019e4:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 80019e8:	4442      	add	r2, r8
 80019ea:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        ep->xfer_buff += count;
 80019ee:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 80019f2:	4442      	add	r2, r8
 80019f4:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019f8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80019fc:	b13b      	cbz	r3, 8001a0e <PCD_EP_ISR_Handler+0x2f6>
 80019fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001a02:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001a06:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8001a0a:	4598      	cmp	r8, r3
 8001a0c:	d277      	bcs.n	8001afe <PCD_EP_ISR_Handler+0x3e6>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a0e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001a12:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001a16:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f002 ff59 	bl	80048d2 <HAL_PCD_DataOutStageCallback>
 8001a20:	e765      	b.n	80018ee <PCD_EP_ISR_Handler+0x1d6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a22:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001a26:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001a2a:	4643      	mov	r3, r8
 8001a2c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	@ 0x16e
 8001a30:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8001a34:	f001 ff21 	bl	800387a <USB_ReadPMA>
 8001a38:	e7d0      	b.n	80019dc <PCD_EP_ISR_Handler+0x2c4>
          if (ep->type == EP_TYPE_BULK)
 8001a3a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001a3e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001a42:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d036      	beq.n	8001ab8 <PCD_EP_ISR_Handler+0x3a0>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a4a:	6829      	ldr	r1, [r5, #0]
 8001a4c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001a50:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001a54:	f892 0168 	ldrb.w	r0, [r2, #360]	@ 0x168
 8001a58:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a6e:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a72:	6828      	ldr	r0, [r5, #0]
 8001a74:	f892 2168 	ldrb.w	r2, [r2, #360]	@ 0x168
 8001a78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a7c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8001a80:	d021      	beq.n	8001ac6 <PCD_EP_ISR_Handler+0x3ae>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a82:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a92:	f8b3 8400 	ldrh.w	r8, [r3, #1024]	@ 0x400
 8001a96:	f3c8 0809 	ubfx	r8, r8, #0, #10
              if (count != 0U)
 8001a9a:	f1b8 0f00 	cmp.w	r8, #0
 8001a9e:	d09d      	beq.n	80019dc <PCD_EP_ISR_Handler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001aa0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001aa4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	f8b1 2170 	ldrh.w	r2, [r1, #368]	@ 0x170
 8001aae:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8001ab2:	f001 fee2 	bl	800387a <USB_ReadPMA>
 8001ab6:	e791      	b.n	80019dc <PCD_EP_ISR_Handler+0x2c4>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ab8:	4632      	mov	r2, r6
 8001aba:	4639      	mov	r1, r7
 8001abc:	4628      	mov	r0, r5
 8001abe:	f7ff fb5d 	bl	800117c <HAL_PCD_EP_DB_Receive>
 8001ac2:	4680      	mov	r8, r0
 8001ac4:	e78a      	b.n	80019dc <PCD_EP_ISR_Handler+0x2c4>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ac6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001ad0:	3306      	adds	r3, #6
 8001ad2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001ad6:	f8b3 8400 	ldrh.w	r8, [r3, #1024]	@ 0x400
 8001ada:	f3c8 0809 	ubfx	r8, r8, #0, #10
              if (count != 0U)
 8001ade:	f1b8 0f00 	cmp.w	r8, #0
 8001ae2:	f43f af7b 	beq.w	80019dc <PCD_EP_ISR_Handler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ae6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001aea:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001aee:	4643      	mov	r3, r8
 8001af0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	@ 0x172
 8001af4:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8001af8:	f001 febf 	bl	800387a <USB_ReadPMA>
 8001afc:	e76e      	b.n	80019dc <PCD_EP_ISR_Handler+0x2c4>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001afe:	4639      	mov	r1, r7
 8001b00:	6828      	ldr	r0, [r5, #0]
 8001b02:	f001 faeb 	bl	80030dc <USB_EPStartXfer>
 8001b06:	e6f2      	b.n	80018ee <PCD_EP_ISR_Handler+0x1d6>
        if ((ep->type != EP_TYPE_BULK) ||
 8001b08:	f416 7f80 	tst.w	r6, #256	@ 0x100
 8001b0c:	f43f af0b 	beq.w	8001926 <PCD_EP_ISR_Handler+0x20e>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b10:	4632      	mov	r2, r6
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7ff fc95 	bl	8001442 <HAL_PCD_EP_DB_Transmit>
 8001b18:	e601      	b.n	800171e <PCD_EP_ISR_Handler+0x6>
            ep->xfer_len = 0U;
 8001b1a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001b1e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001b22:	2700      	movs	r7, #0
 8001b24:	6417      	str	r7, [r2, #64]	@ 0x40
 8001b26:	e71e      	b.n	8001966 <PCD_EP_ISR_Handler+0x24e>
            ep->xfer_buff += TxByteNbre;
 8001b28:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001b2c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001b30:	6bd6      	ldr	r6, [r2, #60]	@ 0x3c
 8001b32:	441e      	add	r6, r3
 8001b34:	63d6      	str	r6, [r2, #60]	@ 0x3c
            ep->xfer_count += TxByteNbre;
 8001b36:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b38:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001b3c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8001b40:	4413      	add	r3, r2
 8001b42:	6463      	str	r3, [r4, #68]	@ 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b44:	f001 faca 	bl	80030dc <USB_EPStartXfer>
 8001b48:	e5e9      	b.n	800171e <PCD_EP_ISR_Handler+0x6>
}
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b50 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001b50:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d00d      	beq.n	8001b74 <HAL_PCD_SetAddress+0x24>
{
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001b62:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b66:	6800      	ldr	r0, [r0, #0]
 8001b68:	f001 fa95 	bl	8003096 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8001b72:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001b74:	2002      	movs	r0, #2
}
 8001b76:	4770      	bx	lr

08001b78 <HAL_PCD_IRQHandler>:
{
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b7e:	6800      	ldr	r0, [r0, #0]
 8001b80:	f001 fa93 	bl	80030aa <USB_ReadInterrupts>
 8001b84:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8001b88:	d147      	bne.n	8001c1a <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b8a:	6820      	ldr	r0, [r4, #0]
 8001b8c:	f001 fa8d 	bl	80030aa <USB_ReadInterrupts>
 8001b90:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8001b94:	d145      	bne.n	8001c22 <HAL_PCD_IRQHandler+0xaa>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	f001 fa87 	bl	80030aa <USB_ReadInterrupts>
 8001b9c:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8001ba0:	d008      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	f001 fa78 	bl	80030aa <USB_ReadInterrupts>
 8001bba:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8001bbe:	d008      	beq.n	8001bd2 <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	f001 fa69 	bl	80030aa <USB_ReadInterrupts>
 8001bd8:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8001bdc:	d132      	bne.n	8001c44 <HAL_PCD_IRQHandler+0xcc>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bde:	6820      	ldr	r0, [r4, #0]
 8001be0:	f001 fa63 	bl	80030aa <USB_ReadInterrupts>
 8001be4:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8001be8:	d178      	bne.n	8001cdc <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001bea:	6820      	ldr	r0, [r4, #0]
 8001bec:	f001 fa5d 	bl	80030aa <USB_ReadInterrupts>
 8001bf0:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8001bf4:	f040 809d 	bne.w	8001d32 <HAL_PCD_IRQHandler+0x1ba>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001bf8:	6820      	ldr	r0, [r4, #0]
 8001bfa:	f001 fa56 	bl	80030aa <USB_ReadInterrupts>
 8001bfe:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8001c02:	d008      	beq.n	8001c16 <HAL_PCD_IRQHandler+0x9e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8001c16:	b004      	add	sp, #16
 8001c18:	bd10      	pop	{r4, pc}
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff fd7c 	bl	8001718 <PCD_EP_ISR_Handler>
 8001c20:	e7b3      	b.n	8001b8a <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001c34:	4620      	mov	r0, r4
 8001c36:	f002 fe69 	bl	800490c <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff ff87 	bl	8001b50 <HAL_PCD_SetAddress>
 8001c42:	e7a8      	b.n	8001b96 <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c44:	6822      	ldr	r2, [r4, #0]
 8001c46:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	f023 0304 	bic.w	r3, r3, #4
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	f023 0308 	bic.w	r3, r3, #8
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f002 fe72 	bl	8004952 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
 8001c80:	e7ad      	b.n	8001bde <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c88:	aa04      	add	r2, sp, #16
 8001c8a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001c8e:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d9f3      	bls.n	8001c82 <HAL_PCD_IRQHandler+0x10a>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c9a:	6822      	ldr	r2, [r4, #0]
 8001c9c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001cc2:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001cc6:	d0f9      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cc8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    for (i = 0U; i < 8U; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e00b      	b.n	8001cf4 <HAL_PCD_IRQHandler+0x17c>
    for (i = 0U; i < 8U; i++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e7da      	b.n	8001c96 <HAL_PCD_IRQHandler+0x11e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ce0:	6822      	ldr	r2, [r4, #0]
 8001ce2:	a904      	add	r1, sp, #16
 8001ce4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001ce8:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8001cec:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b07      	cmp	r3, #7
 8001cf6:	d9f3      	bls.n	8001ce0 <HAL_PCD_IRQHandler+0x168>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cf8:	6822      	ldr	r2, [r4, #0]
 8001cfa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d08:	6822      	ldr	r2, [r4, #0]
 8001d0a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f002 fe00 	bl	8004930 <HAL_PCD_SuspendCallback>
 8001d30:	e75b      	b.n	8001bea <HAL_PCD_IRQHandler+0x72>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001d44:	4620      	mov	r0, r4
 8001d46:	f002 fddb 	bl	8004900 <HAL_PCD_SOFCallback>
 8001d4a:	e755      	b.n	8001bf8 <HAL_PCD_IRQHandler+0x80>

08001d4c <HAL_PCD_EP_Open>:
{
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
 8001d50:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001d52:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001d56:	d12a      	bne.n	8001dae <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	f001 0007 	and.w	r0, r1, #7
 8001d5c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001d60:	00c9      	lsls	r1, r1, #3
 8001d62:	f501 7eb4 	add.w	lr, r1, #360	@ 0x168
 8001d66:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8001d6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d6e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001d72:	f04f 0e00 	mov.w	lr, #0
 8001d76:	f880 e169 	strb.w	lr, [r0, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7a:	f00c 0c07 	and.w	ip, ip, #7
 8001d7e:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8001d82:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8001d84:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001d86:	784a      	ldrb	r2, [r1, #1]
 8001d88:	b10a      	cbz	r2, 8001d8e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8001d8a:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d019      	beq.n	8001dc6 <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8001d92:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d018      	beq.n	8001dcc <HAL_PCD_EP_Open+0x80>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001da0:	6820      	ldr	r0, [r4, #0]
 8001da2:	f000 fe50 	bl	8002a46 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8001dac:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	f001 0007 	and.w	r0, r1, #7
 8001db2:	3001      	adds	r0, #1
 8001db4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001db8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8001dbc:	f04f 0e01 	mov.w	lr, #1
 8001dc0:	f881 e001 	strb.w	lr, [r1, #1]
 8001dc4:	e7d9      	b.n	8001d7a <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	710b      	strb	r3, [r1, #4]
 8001dca:	e7e2      	b.n	8001d92 <HAL_PCD_EP_Open+0x46>
  __HAL_LOCK(hpcd);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	e7ed      	b.n	8001dac <HAL_PCD_EP_Open+0x60>

08001dd0 <HAL_PCD_EP_Close>:
{
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001dd6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001dda:	d11f      	bne.n	8001e1c <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ddc:	f001 0207 	and.w	r2, r1, #7
 8001de0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001de4:	00c9      	lsls	r1, r1, #3
 8001de6:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8001dea:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001dec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001df0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001df4:	2000      	movs	r0, #0
 8001df6:	f882 0169 	strb.w	r0, [r2, #361]	@ 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001e00:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d013      	beq.n	8001e30 <HAL_PCD_EP_Close+0x60>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e0e:	6820      	ldr	r0, [r4, #0]
 8001e10:	f000 ffd5 	bl	8002dbe <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8001e1a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1c:	f001 0207 	and.w	r2, r1, #7
 8001e20:	3201      	adds	r2, #1
 8001e22:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001e26:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	7048      	strb	r0, [r1, #1]
 8001e2e:	e7e4      	b.n	8001dfa <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8001e30:	2002      	movs	r0, #2
 8001e32:	e7f2      	b.n	8001e1a <HAL_PCD_EP_Close+0x4a>

08001e34 <HAL_PCD_EP_Receive>:
{
 8001e34:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e36:	f001 0407 	and.w	r4, r1, #7
 8001e3a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001e3e:	00c9      	lsls	r1, r1, #3
 8001e40:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8001e44:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001e46:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8001e4a:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8001e4e:	f8cc 217c 	str.w	r2, [ip, #380]	@ 0x17c
  ep->xfer_len = len;
 8001e52:	f8cc 3180 	str.w	r3, [ip, #384]	@ 0x180
  ep->xfer_count = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8cc 3184 	str.w	r3, [ip, #388]	@ 0x184
  ep->is_in = 0U;
 8001e5c:	f88c 3169 	strb.w	r3, [ip, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e60:	f88c 4168 	strb.w	r4, [ip, #360]	@ 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e64:	b924      	cbnz	r4, 8001e70 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e66:	6800      	ldr	r0, [r0, #0]
 8001e68:	f001 f938 	bl	80030dc <USB_EPStartXfer>
}
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e70:	6800      	ldr	r0, [r0, #0]
 8001e72:	f001 f933 	bl	80030dc <USB_EPStartXfer>
 8001e76:	e7f9      	b.n	8001e6c <HAL_PCD_EP_Receive+0x38>

08001e78 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e78:	f001 0107 	and.w	r1, r1, #7
 8001e7c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001e80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8001e84:	f8d0 0184 	ldr.w	r0, [r0, #388]	@ 0x184
 8001e88:	4770      	bx	lr

08001e8a <HAL_PCD_EP_Transmit>:
{
 8001e8a:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e8c:	f001 0407 	and.w	r4, r1, #7
 8001e90:	f104 0c01 	add.w	ip, r4, #1
 8001e94:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8001e98:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8001e9c:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 8001ea0:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8001ea4:	f8ce 203c 	str.w	r2, [lr, #60]	@ 0x3c
  ep->xfer_len = len;
 8001ea8:	f8ce 3040 	str.w	r3, [lr, #64]	@ 0x40
  ep->xfer_fill_db = 1U;
 8001eac:	2201      	movs	r2, #1
 8001eae:	f88e 204c 	strb.w	r2, [lr, #76]	@ 0x4c
  ep->xfer_len_db = len;
 8001eb2:	f8ce 3048 	str.w	r3, [lr, #72]	@ 0x48
  ep->xfer_count = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8ce 3044 	str.w	r3, [lr, #68]	@ 0x44
  ep->is_in = 1U;
 8001ebc:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebe:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001ec2:	f800 403c 	strb.w	r4, [r0, ip, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ec6:	b924      	cbnz	r4, 8001ed2 <HAL_PCD_EP_Transmit+0x48>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ec8:	6800      	ldr	r0, [r0, #0]
 8001eca:	f001 f907 	bl	80030dc <USB_EPStartXfer>
}
 8001ece:	2000      	movs	r0, #0
 8001ed0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ed2:	6800      	ldr	r0, [r0, #0]
 8001ed4:	f001 f902 	bl	80030dc <USB_EPStartXfer>
 8001ed8:	e7f9      	b.n	8001ece <HAL_PCD_EP_Transmit+0x44>

08001eda <HAL_PCD_EP_SetStall>:
{
 8001eda:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001edc:	f001 0507 	and.w	r5, r1, #7
 8001ee0:	6842      	ldr	r2, [r0, #4]
 8001ee2:	4295      	cmp	r5, r2
 8001ee4:	d831      	bhi.n	8001f4a <HAL_PCD_EP_SetStall+0x70>
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001eea:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001eee:	d11e      	bne.n	8001f2e <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8001ef0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001ef4:	00c9      	lsls	r1, r1, #3
 8001ef6:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8001efa:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001efc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f00:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
  ep->is_stall = 1U;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0e:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001f10:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d01a      	beq.n	8001f4e <HAL_PCD_EP_SetStall+0x74>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f1e:	6820      	ldr	r0, [r4, #0]
 8001f20:	f001 f838 	bl	8002f94 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f24:	b15d      	cbz	r5, 8001f3e <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8001f2c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	1c6b      	adds	r3, r5, #1
 8001f30:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001f34:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	704a      	strb	r2, [r1, #1]
 8001f3c:	e7e5      	b.n	8001f0a <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f3e:	f504 712c 	add.w	r1, r4, #688	@ 0x2b0
 8001f42:	6820      	ldr	r0, [r4, #0]
 8001f44:	f001 f8b5 	bl	80030b2 <USB_EP0_OutStart>
 8001f48:	e7ed      	b.n	8001f26 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	e7ee      	b.n	8001f2c <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8001f4e:	2002      	movs	r0, #2
 8001f50:	e7ec      	b.n	8001f2c <HAL_PCD_EP_SetStall+0x52>

08001f52 <HAL_PCD_EP_ClrStall>:
{
 8001f52:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f54:	f001 010f 	and.w	r1, r1, #15
 8001f58:	6842      	ldr	r2, [r0, #4]
 8001f5a:	4291      	cmp	r1, r2
 8001f5c:	d830      	bhi.n	8001fc0 <HAL_PCD_EP_ClrStall+0x6e>
{
 8001f5e:	b510      	push	{r4, lr}
 8001f60:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001f62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f66:	d121      	bne.n	8001fac <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	f003 0207 	and.w	r2, r3, #7
 8001f6c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001f70:	00c9      	lsls	r1, r1, #3
 8001f72:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8001f76:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001f78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f7c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001f80:	2000      	movs	r0, #0
 8001f82:	f882 0169 	strb.w	r0, [r2, #361]	@ 0x169
  ep->is_stall = 0U;
 8001f86:	2200      	movs	r2, #0
 8001f88:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001f90:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d015      	beq.n	8001fc4 <HAL_PCD_EP_ClrStall+0x72>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	f001 f81d 	bl	8002fde <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8001faa:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	f003 0207 	and.w	r2, r3, #7
 8001fb0:	3201      	adds	r2, #1
 8001fb2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001fb6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001fba:	2001      	movs	r0, #1
 8001fbc:	7048      	strb	r0, [r1, #1]
 8001fbe:	e7e2      	b.n	8001f86 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8001fc0:	2001      	movs	r0, #1
}
 8001fc2:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	e7f0      	b.n	8001faa <HAL_PCD_EP_ClrStall+0x58>

08001fc8 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001fc8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	f001 0107 	and.w	r1, r1, #7
 8001fd2:	3101      	adds	r1, #1
 8001fd4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001fd8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001fdc:	b952      	cbnz	r2, 8001ff4 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001fde:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001fe0:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8001fe6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001fea:	00c9      	lsls	r1, r1, #3
 8001fec:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8001ff0:	4408      	add	r0, r1
 8001ff2:	e7f3      	b.n	8001fdc <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001ff8:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001ffa:	0c1b      	lsrs	r3, r3, #16
 8001ffc:	8143      	strh	r3, [r0, #10]
 8001ffe:	e7f0      	b.n	8001fe2 <HAL_PCDEx_PMAConfig+0x1a>

08002000 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002000:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002002:	f240 0300 	movw	r3, #0
 8002006:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8002010:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	0a5b      	lsrs	r3, r3, #9
 800201a:	fb00 f303 	mul.w	r3, r0, r3
 800201e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002020:	bf00      	nop
  }
  while (Delay --);
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	9201      	str	r2, [sp, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <RCC_Delay+0x20>
}
 800202c:	b002      	add	sp, #8
 800202e:	4770      	bx	lr

08002030 <HAL_RCC_DeInit>:
{
 8002030:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 8002032:	f7fe fcc1 	bl	80009b8 <HAL_GetTick>
 8002036:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800203c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f013 0f02 	tst.w	r3, #2
 8002056:	d107      	bne.n	8002068 <HAL_RCC_DeInit+0x38>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002058:	f7fe fcae 	bl	80009b8 <HAL_GetTick>
 800205c:	1b00      	subs	r0, r0, r4
 800205e:	2802      	cmp	r0, #2
 8002060:	d9f2      	bls.n	8002048 <HAL_RCC_DeInit+0x18>
      return HAL_TIMEOUT;
 8002062:	2403      	movs	r4, #3
}
 8002064:	4620      	mov	r0, r4
 8002066:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8002068:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800206c:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8002070:	682b      	ldr	r3, [r5, #0]
 8002072:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800207a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800207c:	f7fe fc9c 	bl	80009b8 <HAL_GetTick>
 8002080:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8002082:	2300      	movs	r3, #0
 8002084:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f013 0f0c 	tst.w	r3, #12
 8002094:	d008      	beq.n	80020a8 <HAL_RCC_DeInit+0x78>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002096:	f7fe fc8f 	bl	80009b8 <HAL_GetTick>
 800209a:	1b00      	subs	r0, r0, r4
 800209c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80020a0:	4298      	cmp	r0, r3
 80020a2:	d9f0      	bls.n	8002086 <HAL_RCC_DeInit+0x56>
      return HAL_TIMEOUT;
 80020a4:	2403      	movs	r4, #3
 80020a6:	e7dd      	b.n	8002064 <HAL_RCC_DeInit+0x34>
  SystemCoreClock = HSI_VALUE;
 80020a8:	f240 0300 	movw	r3, #0
 80020ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020b0:	f44f 5290 	mov.w	r2, #4608	@ 0x1200
 80020b4:	f2c0 027a 	movt	r2, #122	@ 0x7a
 80020b8:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020ba:	f240 0308 	movw	r3, #8
 80020be:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	f7fe fc30 	bl	8000928 <HAL_InitTick>
 80020c8:	4604      	mov	r4, r0
 80020ca:	b108      	cbz	r0, 80020d0 <HAL_RCC_DeInit+0xa0>
    return HAL_ERROR;
 80020cc:	2401      	movs	r4, #1
 80020ce:	e7c9      	b.n	8002064 <HAL_RCC_DeInit+0x34>
  tickstart = HAL_GetTick();
 80020d0:	f7fe fc72 	bl	80009b8 <HAL_GetTick>
 80020d4:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80020d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020da:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80020e4:	601a      	str	r2, [r3, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80020e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ea:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80020f4:	d006      	beq.n	8002104 <HAL_RCC_DeInit+0xd4>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7fe fc5f 	bl	80009b8 <HAL_GetTick>
 80020fa:	1b40      	subs	r0, r0, r5
 80020fc:	2802      	cmp	r0, #2
 80020fe:	d9f2      	bls.n	80020e6 <HAL_RCC_DeInit+0xb6>
      return HAL_TIMEOUT;
 8002100:	2403      	movs	r4, #3
 8002102:	e7af      	b.n	8002064 <HAL_RCC_DeInit+0x34>
  CLEAR_REG(RCC->CFGR);
 8002104:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8002108:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 800210c:	2300      	movs	r3, #0
 800210e:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8002110:	f7fe fc52 	bl	80009b8 <HAL_GetTick>
 8002114:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8002116:	6833      	ldr	r3, [r6, #0]
 8002118:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800211c:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800211e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002122:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800212c:	d006      	beq.n	800213c <HAL_RCC_DeInit+0x10c>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212e:	f7fe fc43 	bl	80009b8 <HAL_GetTick>
 8002132:	1b40      	subs	r0, r0, r5
 8002134:	2864      	cmp	r0, #100	@ 0x64
 8002136:	d9f2      	bls.n	800211e <HAL_RCC_DeInit+0xee>
      return HAL_TIMEOUT;
 8002138:	2403      	movs	r4, #3
 800213a:	e793      	b.n	8002064 <HAL_RCC_DeInit+0x34>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800213c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002140:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800214a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800214c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800214e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_REG(RCC->CIR);
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002158:	e784      	b.n	8002064 <HAL_RCC_DeInit+0x34>

0800215a <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800215a:	2800      	cmp	r0, #0
 800215c:	f000 8268 	beq.w	8002630 <HAL_RCC_OscConfig+0x4d6>
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	6803      	ldr	r3, [r0, #0]
 8002168:	f013 0f01 	tst.w	r3, #1
 800216c:	d038      	beq.n	80021e0 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800216e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002172:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b04      	cmp	r3, #4
 800217e:	d023      	beq.n	80021c8 <HAL_RCC_OscConfig+0x6e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002184:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d012      	beq.n	80021b8 <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	6863      	ldr	r3, [r4, #4]
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002198:	d054      	beq.n	8002244 <HAL_RCC_OscConfig+0xea>
 800219a:	2b00      	cmp	r3, #0
 800219c:	d16e      	bne.n	800227c <HAL_RCC_OscConfig+0x122>
 800219e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e04d      	b.n	8002254 <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021bc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80021c6:	d0e4      	beq.n	8002192 <HAL_RCC_OscConfig+0x38>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021cc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021d6:	d003      	beq.n	80021e0 <HAL_RCC_OscConfig+0x86>
 80021d8:	6863      	ldr	r3, [r4, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 822a 	beq.w	8002634 <HAL_RCC_OscConfig+0x4da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	f013 0f02 	tst.w	r3, #2
 80021e6:	f000 8097 	beq.w	8002318 <HAL_RCC_OscConfig+0x1be>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ee:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f013 0f0c 	tst.w	r3, #12
 80021f8:	d077      	beq.n	80022ea <HAL_RCC_OscConfig+0x190>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021fe:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d066      	beq.n	80022da <HAL_RCC_OscConfig+0x180>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220c:	6923      	ldr	r3, [r4, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80ad 	beq.w	800236e <HAL_RCC_OscConfig+0x214>
        __HAL_RCC_HSI_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800221e:	f7fe fbcb 	bl	80009b8 <HAL_GetTick>
 8002222:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002228:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f013 0f02 	tst.w	r3, #2
 8002232:	f040 8090 	bne.w	8002356 <HAL_RCC_OscConfig+0x1fc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002236:	f7fe fbbf 	bl	80009b8 <HAL_GetTick>
 800223a:	1b40      	subs	r0, r0, r5
 800223c:	2802      	cmp	r0, #2
 800223e:	d9f1      	bls.n	8002224 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002240:	2003      	movs	r0, #3
 8002242:	e1fc      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002248:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002252:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	6863      	ldr	r3, [r4, #4]
 8002256:	b373      	cbz	r3, 80022b6 <HAL_RCC_OscConfig+0x15c>
        tickstart = HAL_GetTick();
 8002258:	f7fe fbae 	bl	80009b8 <HAL_GetTick>
 800225c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002262:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800226c:	d1b8      	bne.n	80021e0 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226e:	f7fe fba3 	bl	80009b8 <HAL_GetTick>
 8002272:	1b40      	subs	r0, r0, r5
 8002274:	2864      	cmp	r0, #100	@ 0x64
 8002276:	d9f2      	bls.n	800225e <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8002278:	2003      	movs	r0, #3
 800227a:	e1e0      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002280:	d00c      	beq.n	800229c <HAL_RCC_OscConfig+0x142>
 8002282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002286:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e7db      	b.n	8002254 <HAL_RCC_OscConfig+0xfa>
 800229c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e7ce      	b.n	8002254 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 80022b6:	f7fe fb7f 	bl	80009b8 <HAL_GetTick>
 80022ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022c0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80022ca:	d089      	beq.n	80021e0 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fb74 	bl	80009b8 <HAL_GetTick>
 80022d0:	1b40      	subs	r0, r0, r5
 80022d2:	2864      	cmp	r0, #100	@ 0x64
 80022d4:	d9f2      	bls.n	80022bc <HAL_RCC_OscConfig+0x162>
            return HAL_TIMEOUT;
 80022d6:	2003      	movs	r0, #3
 80022d8:	e1b1      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022de:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80022e8:	d190      	bne.n	800220c <HAL_RCC_OscConfig+0xb2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ee:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f013 0f02 	tst.w	r3, #2
 80022f8:	d003      	beq.n	8002302 <HAL_RCC_OscConfig+0x1a8>
 80022fa:	6923      	ldr	r3, [r4, #16]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	f040 819b 	bne.w	8002638 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002306:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002310:	6961      	ldr	r1, [r4, #20]
 8002312:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002316:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	f013 0f08 	tst.w	r3, #8
 800231e:	d040      	beq.n	80023a2 <HAL_RCC_OscConfig+0x248>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002320:	69a3      	ldr	r3, [r4, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d072      	beq.n	800240c <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 800232c:	2201      	movs	r2, #1
 800232e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002332:	f7fe fb41 	bl	80009b8 <HAL_GetTick>
 8002336:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800233c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	f013 0f02 	tst.w	r3, #2
 8002346:	d129      	bne.n	800239c <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe fb36 	bl	80009b8 <HAL_GetTick>
 800234c:	1b40      	subs	r0, r0, r5
 800234e:	2802      	cmp	r0, #2
 8002350:	d9f2      	bls.n	8002338 <HAL_RCC_OscConfig+0x1de>
          return HAL_TIMEOUT;
 8002352:	2003      	movs	r0, #3
 8002354:	e173      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800235a:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800235e:	6813      	ldr	r3, [r2, #0]
 8002360:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002364:	6961      	ldr	r1, [r4, #20]
 8002366:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e7d4      	b.n	8002318 <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_HSI_DISABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002378:	f7fe fb1e 	bl	80009b8 <HAL_GetTick>
 800237c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002382:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f013 0f02 	tst.w	r3, #2
 800238c:	d0c4      	beq.n	8002318 <HAL_RCC_OscConfig+0x1be>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238e:	f7fe fb13 	bl	80009b8 <HAL_GetTick>
 8002392:	1b40      	subs	r0, r0, r5
 8002394:	2802      	cmp	r0, #2
 8002396:	d9f2      	bls.n	800237e <HAL_RCC_OscConfig+0x224>
            return HAL_TIMEOUT;
 8002398:	2003      	movs	r0, #3
 800239a:	e150      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
      RCC_Delay(1);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fe2f 	bl	8002000 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	f013 0f04 	tst.w	r3, #4
 80023a8:	f000 80b3 	beq.w	8002512 <HAL_RCC_OscConfig+0x3b8>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023b0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80023ba:	d13f      	bne.n	800243c <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80023ca:	61da      	str	r2, [r3, #28]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023d6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80023dc:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023e6:	d02b      	beq.n	8002440 <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	68e3      	ldr	r3, [r4, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d042      	beq.n	8002474 <HAL_RCC_OscConfig+0x31a>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d15e      	bne.n	80024b0 <HAL_RCC_OscConfig+0x356>
 80023f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	621a      	str	r2, [r3, #32]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	f022 0204 	bic.w	r2, r2, #4
 8002408:	621a      	str	r2, [r3, #32]
 800240a:	e03b      	b.n	8002484 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_LSI_DISABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8002412:	2200      	movs	r2, #0
 8002414:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002418:	f7fe face 	bl	80009b8 <HAL_GetTick>
 800241c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002422:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	f013 0f02 	tst.w	r3, #2
 800242c:	d0b9      	beq.n	80023a2 <HAL_RCC_OscConfig+0x248>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe fac3 	bl	80009b8 <HAL_GetTick>
 8002432:	1b40      	subs	r0, r0, r5
 8002434:	2802      	cmp	r0, #2
 8002436:	d9f2      	bls.n	800241e <HAL_RCC_OscConfig+0x2c4>
          return HAL_TIMEOUT;
 8002438:	2003      	movs	r0, #3
 800243a:	e100      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
    FlagStatus       pwrclkchanged = RESET;
 800243c:	2500      	movs	r5, #0
 800243e:	e7cb      	b.n	80023d8 <HAL_RCC_OscConfig+0x27e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002440:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002444:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800244e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002450:	f7fe fab2 	bl	80009b8 <HAL_GetTick>
 8002454:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800245a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002464:	d1c0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x28e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002466:	f7fe faa7 	bl	80009b8 <HAL_GetTick>
 800246a:	1b80      	subs	r0, r0, r6
 800246c:	2864      	cmp	r0, #100	@ 0x64
 800246e:	d9f2      	bls.n	8002456 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8002470:	2003      	movs	r0, #3
 8002472:	e0e4      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002478:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002484:	68e3      	ldr	r3, [r4, #12]
 8002486:	b37b      	cbz	r3, 80024e8 <HAL_RCC_OscConfig+0x38e>
      tickstart = HAL_GetTick();
 8002488:	f7fe fa96 	bl	80009b8 <HAL_GetTick>
 800248c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002492:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f013 0f02 	tst.w	r3, #2
 800249c:	d138      	bne.n	8002510 <HAL_RCC_OscConfig+0x3b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe fa8b 	bl	80009b8 <HAL_GetTick>
 80024a2:	1b80      	subs	r0, r0, r6
 80024a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80024a8:	4298      	cmp	r0, r3
 80024aa:	d9f0      	bls.n	800248e <HAL_RCC_OscConfig+0x334>
          return HAL_TIMEOUT;
 80024ac:	2003      	movs	r0, #3
 80024ae:	e0c6      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d00c      	beq.n	80024ce <HAL_RCC_OscConfig+0x374>
 80024b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80024bc:	6a1a      	ldr	r2, [r3, #32]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	621a      	str	r2, [r3, #32]
 80024c4:	6a1a      	ldr	r2, [r3, #32]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	621a      	str	r2, [r3, #32]
 80024cc:	e7da      	b.n	8002484 <HAL_RCC_OscConfig+0x32a>
 80024ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	f042 0204 	orr.w	r2, r2, #4
 80024dc:	621a      	str	r2, [r3, #32]
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	621a      	str	r2, [r3, #32]
 80024e6:	e7cd      	b.n	8002484 <HAL_RCC_OscConfig+0x32a>
      tickstart = HAL_GetTick();
 80024e8:	f7fe fa66 	bl	80009b8 <HAL_GetTick>
 80024ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024f2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f013 0f02 	tst.w	r3, #2
 80024fc:	d008      	beq.n	8002510 <HAL_RCC_OscConfig+0x3b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fa5b 	bl	80009b8 <HAL_GetTick>
 8002502:	1b80      	subs	r0, r0, r6
 8002504:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002508:	4298      	cmp	r0, r3
 800250a:	d9f0      	bls.n	80024ee <HAL_RCC_OscConfig+0x394>
          return HAL_TIMEOUT;
 800250c:	2003      	movs	r0, #3
 800250e:	e096      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
    if (pwrclkchanged == SET)
 8002510:	bb2d      	cbnz	r5, 800255e <HAL_RCC_OscConfig+0x404>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002512:	69e3      	ldr	r3, [r4, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8091 	beq.w	800263c <HAL_RCC_OscConfig+0x4e2>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800251e:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002522:	6852      	ldr	r2, [r2, #4]
 8002524:	f002 020c 	and.w	r2, r2, #12
 8002528:	2a08      	cmp	r2, #8
 800252a:	d06e      	beq.n	800260a <HAL_RCC_OscConfig+0x4b0>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	2b02      	cmp	r3, #2
 800252e:	d01f      	beq.n	8002570 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_DISABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8002536:	2200      	movs	r2, #0
 8002538:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800253a:	f7fe fa3d 	bl	80009b8 <HAL_GetTick>
 800253e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002544:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800254e:	d05a      	beq.n	8002606 <HAL_RCC_OscConfig+0x4ac>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fa32 	bl	80009b8 <HAL_GetTick>
 8002554:	1b00      	subs	r0, r0, r4
 8002556:	2802      	cmp	r0, #2
 8002558:	d9f2      	bls.n	8002540 <HAL_RCC_OscConfig+0x3e6>
            return HAL_TIMEOUT;
 800255a:	2003      	movs	r0, #3
 800255c:	e06f      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002562:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800256c:	61da      	str	r2, [r3, #28]
 800256e:	e7d0      	b.n	8002512 <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_PLL_DISABLE();
 8002570:	2300      	movs	r3, #0
 8002572:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8002576:	2200      	movs	r2, #0
 8002578:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800257a:	f7fe fa1d 	bl	80009b8 <HAL_GetTick>
 800257e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002584:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800258e:	d006      	beq.n	800259e <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fa12 	bl	80009b8 <HAL_GetTick>
 8002594:	1b40      	subs	r0, r0, r5
 8002596:	2802      	cmp	r0, #2
 8002598:	d9f2      	bls.n	8002580 <HAL_RCC_OscConfig+0x426>
            return HAL_TIMEOUT;
 800259a:	2003      	movs	r0, #3
 800259c:	e04f      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800259e:	6a23      	ldr	r3, [r4, #32]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a4:	d022      	beq.n	80025ec <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025aa:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80025ae:	6853      	ldr	r3, [r2, #4]
 80025b0:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80025b4:	6a21      	ldr	r1, [r4, #32]
 80025b6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80025b8:	4301      	orrs	r1, r0
 80025ba:	430b      	orrs	r3, r1
 80025bc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 80025c4:	2201      	movs	r2, #1
 80025c6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80025c8:	f7fe f9f6 	bl	80009b8 <HAL_GetTick>
 80025cc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_OscConfig+0x4a8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe f9eb 	bl	80009b8 <HAL_GetTick>
 80025e2:	1b00      	subs	r0, r0, r4
 80025e4:	2802      	cmp	r0, #2
 80025e6:	d9f2      	bls.n	80025ce <HAL_RCC_OscConfig+0x474>
            return HAL_TIMEOUT;
 80025e8:	2003      	movs	r0, #3
 80025ea:	e028      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025f0:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80025f4:	6853      	ldr	r3, [r2, #4]
 80025f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80025fa:	68a1      	ldr	r1, [r4, #8]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6053      	str	r3, [r2, #4]
 8002600:	e7d1      	b.n	80025a6 <HAL_RCC_OscConfig+0x44c>
  return HAL_OK;
 8002602:	2000      	movs	r0, #0
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
 8002606:	2000      	movs	r0, #0
 8002608:	e019      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260a:	2b01      	cmp	r3, #1
 800260c:	d019      	beq.n	8002642 <HAL_RCC_OscConfig+0x4e8>
        pll_config = RCC->CFGR;
 800260e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002612:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002616:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800261c:	6a22      	ldr	r2, [r4, #32]
 800261e:	4291      	cmp	r1, r2
 8002620:	d111      	bne.n	8002646 <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002622:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002626:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d10e      	bne.n	800264a <HAL_RCC_OscConfig+0x4f0>
  return HAL_OK;
 800262c:	2000      	movs	r0, #0
 800262e:	e006      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
    return HAL_ERROR;
 8002630:	2001      	movs	r0, #1
}
 8002632:	4770      	bx	lr
        return HAL_ERROR;
 8002634:	2001      	movs	r0, #1
 8002636:	e002      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
        return HAL_ERROR;
 8002638:	2001      	movs	r0, #1
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
  return HAL_OK;
 800263c:	2000      	movs	r0, #0
}
 800263e:	b002      	add	sp, #8
 8002640:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002642:	2001      	movs	r0, #1
 8002644:	e7fb      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
          return HAL_ERROR;
 8002646:	2001      	movs	r0, #1
 8002648:	e7f9      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>
 800264a:	2001      	movs	r0, #1
 800264c:	e7f7      	b.n	800263e <HAL_RCC_OscConfig+0x4e4>

0800264e <HAL_RCC_GetSysClockFreq>:
{
 800264e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002650:	f644 4308 	movw	r3, #19464	@ 0x4c08
 8002654:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8002658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800265a:	f10d 0c18 	add.w	ip, sp, #24
 800265e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002662:	f240 2301 	movw	r3, #513	@ 0x201
 8002666:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800266a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800266e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002672:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002674:	f003 020c 	and.w	r2, r3, #12
 8002678:	2a08      	cmp	r2, #8
 800267a:	d005      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800267c:	f44f 5090 	mov.w	r0, #4608	@ 0x1200
 8002680:	f2c0 007a 	movt	r0, #122	@ 0x7a
}
 8002684:	b006      	add	sp, #24
 8002686:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002688:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800268c:	3218      	adds	r2, #24
 800268e:	446a      	add	r2, sp
 8002690:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002694:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002698:	d013      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x74>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800269a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800269e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80026a8:	3318      	adds	r3, #24
 80026aa:	446b      	add	r3, sp
 80026ac:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026b0:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80026b4:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80026b8:	fb03 f000 	mul.w	r0, r3, r0
 80026bc:	fbb0 f0f2 	udiv	r0, r0, r2
 80026c0:	e7e0      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x36>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026c2:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80026c6:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80026ca:	fb03 f000 	mul.w	r0, r3, r0
 80026ce:	e7d9      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x36>

080026d0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80026d0:	2800      	cmp	r0, #0
 80026d2:	f000 80d7 	beq.w	8002884 <HAL_RCC_ClockConfig+0x1b4>
{
 80026d6:	b570      	push	{r4, r5, r6, lr}
 80026d8:	460d      	mov	r5, r1
 80026da:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026e0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	428b      	cmp	r3, r1
 80026ec:	d20e      	bcs.n	800270c <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f2:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80026f6:	6813      	ldr	r3, [r2, #0]
 80026f8:	f023 0307 	bic.w	r3, r3, #7
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002700:	6813      	ldr	r3, [r2, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	428b      	cmp	r3, r1
 8002708:	f040 80be 	bne.w	8002888 <HAL_RCC_ClockConfig+0x1b8>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	f013 0f02 	tst.w	r3, #2
 8002712:	d020      	beq.n	8002756 <HAL_RCC_ClockConfig+0x86>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	f013 0f04 	tst.w	r3, #4
 8002718:	d007      	beq.n	800272a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800271e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002728:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	f013 0f08 	tst.w	r3, #8
 8002730:	d007      	beq.n	8002742 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002736:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8002740:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002742:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002746:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800274a:	6853      	ldr	r3, [r2, #4]
 800274c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002750:	68a1      	ldr	r1, [r4, #8]
 8002752:	430b      	orrs	r3, r1
 8002754:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	f013 0f01 	tst.w	r3, #1
 800275c:	d041      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x112>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	6863      	ldr	r3, [r4, #4]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d02a      	beq.n	80027ba <HAL_RCC_ClockConfig+0xea>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002764:	2b02      	cmp	r3, #2
 8002766:	d032      	beq.n	80027ce <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800276c:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	f012 0f02 	tst.w	r2, #2
 8002776:	f000 8089 	beq.w	800288c <HAL_RCC_ClockConfig+0x1bc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800277e:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002782:	6851      	ldr	r1, [r2, #4]
 8002784:	f021 0103 	bic.w	r1, r1, #3
 8002788:	430b      	orrs	r3, r1
 800278a:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 800278c:	f7fe f914 	bl	80009b8 <HAL_GetTick>
 8002790:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002796:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	6862      	ldr	r2, [r4, #4]
 80027a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027a6:	d01c      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe f906 	bl	80009b8 <HAL_GetTick>
 80027ac:	1b80      	subs	r0, r0, r6
 80027ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027b2:	4298      	cmp	r0, r3
 80027b4:	d9ed      	bls.n	8002792 <HAL_RCC_ClockConfig+0xc2>
        return HAL_TIMEOUT;
 80027b6:	2003      	movs	r0, #3
 80027b8:	e063      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027be:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80027c8:	d1d7      	bne.n	800277a <HAL_RCC_ClockConfig+0xaa>
        return HAL_ERROR;
 80027ca:	2001      	movs	r0, #1
 80027cc:	e059      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027d2:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80027dc:	d1cd      	bne.n	800277a <HAL_RCC_ClockConfig+0xaa>
        return HAL_ERROR;
 80027de:	2001      	movs	r0, #1
 80027e0:	e04f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027e6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	42ab      	cmp	r3, r5
 80027f2:	d90d      	bls.n	8002810 <HAL_RCC_ClockConfig+0x140>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027f8:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80027fc:	6813      	ldr	r3, [r2, #0]
 80027fe:	f023 0307 	bic.w	r3, r3, #7
 8002802:	432b      	orrs	r3, r5
 8002804:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	42ab      	cmp	r3, r5
 800280e:	d13f      	bne.n	8002890 <HAL_RCC_ClockConfig+0x1c0>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	f013 0f04 	tst.w	r3, #4
 8002816:	d009      	beq.n	800282c <HAL_RCC_ClockConfig+0x15c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800281c:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002820:	6853      	ldr	r3, [r2, #4]
 8002822:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002826:	68e1      	ldr	r1, [r4, #12]
 8002828:	430b      	orrs	r3, r1
 800282a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	f013 0f08 	tst.w	r3, #8
 8002832:	d00a      	beq.n	800284a <HAL_RCC_ClockConfig+0x17a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002834:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002838:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800283c:	6853      	ldr	r3, [r2, #4]
 800283e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002842:	6921      	ldr	r1, [r4, #16]
 8002844:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002848:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f7ff ff00 	bl	800264e <HAL_RCC_GetSysClockFreq>
 800284e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002852:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800285c:	f644 32f8 	movw	r2, #19448	@ 0x4bf8
 8002860:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	40d8      	lsrs	r0, r3
 8002868:	f240 0300 	movw	r3, #0
 800286c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002870:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002872:	f240 0308 	movw	r3, #8
 8002876:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f7fe f854 	bl	8000928 <HAL_InitTick>
  return HAL_OK;
 8002880:	2000      	movs	r0, #0
}
 8002882:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002884:	2001      	movs	r0, #1
}
 8002886:	4770      	bx	lr
    return HAL_ERROR;
 8002888:	2001      	movs	r0, #1
 800288a:	e7fa      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 800288c:	2001      	movs	r0, #1
 800288e:	e7f8      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 8002890:	2001      	movs	r0, #1
 8002892:	e7f6      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b2>

08002894 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800289a:	6803      	ldr	r3, [r0, #0]
 800289c:	f013 0f01 	tst.w	r3, #1
 80028a0:	d04a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028a6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80028b0:	d160      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80028c0:	61da      	str	r2, [r3, #28]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028cc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80028d2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80028dc:	d04c      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80028e6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80028ec:	d018      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80028ee:	6862      	ldr	r2, [r4, #4]
 80028f0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d013      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028fc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002900:	6a19      	ldr	r1, [r3, #32]
 8002902:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002906:	2200      	movs	r2, #0
 8002908:	f2c4 2242 	movt	r2, #16962	@ 0x4242
 800290c:	2601      	movs	r6, #1
 800290e:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002912:	2600      	movs	r6, #0
 8002914:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002918:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800291a:	f011 0f01 	tst.w	r1, #1
 800291e:	d145      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x118>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002920:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002924:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002928:	6a13      	ldr	r3, [r2, #32]
 800292a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292e:	6861      	ldr	r1, [r4, #4]
 8002930:	430b      	orrs	r3, r1
 8002932:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002934:	2d00      	cmp	r5, #0
 8002936:	d14d      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	f013 0f02 	tst.w	r3, #2
 800293e:	d009      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002940:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002944:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002948:	6853      	ldr	r3, [r2, #4]
 800294a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800294e:	68a1      	ldr	r1, [r4, #8]
 8002950:	430b      	orrs	r3, r1
 8002952:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	f013 0f10 	tst.w	r3, #16
 800295a:	d044      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800295c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002960:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002964:	6853      	ldr	r3, [r2, #4]
 8002966:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800296a:	68e1      	ldr	r1, [r4, #12]
 800296c:	430b      	orrs	r3, r1
 800296e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002970:	2000      	movs	r0, #0
 8002972:	e039      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    FlagStatus       pwrclkchanged = RESET;
 8002974:	2500      	movs	r5, #0
 8002976:	e7aa      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x3a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002978:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800297c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002986:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002988:	f7fe f816 	bl	80009b8 <HAL_GetTick>
 800298c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002992:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800299c:	d19f      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7fe f80b 	bl	80009b8 <HAL_GetTick>
 80029a2:	1b80      	subs	r0, r0, r6
 80029a4:	2864      	cmp	r0, #100	@ 0x64
 80029a6:	d9f2      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          return HAL_TIMEOUT;
 80029a8:	2003      	movs	r0, #3
 80029aa:	e01d      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        tickstart = HAL_GetTick();
 80029ac:	f7fe f804 	bl	80009b8 <HAL_GetTick>
 80029b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029b6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f013 0f02 	tst.w	r3, #2
 80029c0:	d1ae      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fd fff9 	bl	80009b8 <HAL_GetTick>
 80029c6:	1b80      	subs	r0, r0, r6
 80029c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80029cc:	4298      	cmp	r0, r3
 80029ce:	d9f0      	bls.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
            return HAL_TIMEOUT;
 80029d0:	2003      	movs	r0, #3
 80029d2:	e009      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80029e2:	61da      	str	r2, [r3, #28]
 80029e4:	e7a8      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  return HAL_OK;
 80029e6:	2000      	movs	r0, #0
}
 80029e8:	b002      	add	sp, #8
 80029ea:	bd70      	pop	{r4, r5, r6, pc}

080029ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029ec:	b084      	sub	sp, #16
 80029ee:	a801      	add	r0, sp, #4
 80029f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80029f4:	2000      	movs	r0, #0
 80029f6:	b004      	add	sp, #16
 80029f8:	4770      	bx	lr

080029fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80029fa:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80029fc:	2000      	movs	r0, #0
 80029fe:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002a02:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
 8002a06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8002a0a:	4770      	bx	lr

08002a0c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a0c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8002a10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a14:	045b      	lsls	r3, r3, #17
 8002a16:	0c5b      	lsrs	r3, r3, #17
 8002a18:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	4770      	bx	lr

08002a20 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002a20:	2000      	movs	r0, #0
 8002a22:	4770      	bx	lr

08002a24 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a24:	b084      	sub	sp, #16
 8002a26:	4684      	mov	ip, r0
 8002a28:	a801      	add	r0, sp, #4
 8002a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f8ac 3040 	strh.w	r3, [ip, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a34:	2000      	movs	r0, #0
 8002a36:	f8ac 0040 	strh.w	r0, [ip, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a3a:	f8ac 0044 	strh.w	r0, [ip, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a3e:	f8ac 0050 	strh.w	r0, [ip, #80]	@ 0x50

  return HAL_OK;
}
 8002a42:	b004      	add	sp, #16
 8002a44:	4770      	bx	lr

08002a46 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a46:	b510      	push	{r4, lr}
 8002a48:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002a4a:	f891 c000 	ldrb.w	ip, [r1]
 8002a4e:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8002a52:	b292      	uxth	r2, r2
 8002a54:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 8002a58:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a5c:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8002a5e:	78c8      	ldrb	r0, [r1, #3]
 8002a60:	2803      	cmp	r0, #3
 8002a62:	d861      	bhi.n	8002b28 <USB_ActivateEndpoint+0xe2>
 8002a64:	e8df f000 	tbb	[pc, r0]
 8002a68:	58025c55 	.word	0x58025c55
 8002a6c:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002a6e:	f248 0e80 	movw	lr, #32896	@ 0x8080
 8002a72:	ea42 020e 	orr.w	r2, r2, lr
 8002a76:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002a7a:	f891 c000 	ldrb.w	ip, [r1]
 8002a7e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8002a82:	b292      	uxth	r2, r2
 8002a84:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002a88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a8c:	ea42 020c 	orr.w	r2, r2, ip
 8002a90:	ea42 020e 	orr.w	r2, r2, lr
 8002a94:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8002a98:	7b0a      	ldrb	r2, [r1, #12]
 8002a9a:	2a00      	cmp	r2, #0
 8002a9c:	f040 80c4 	bne.w	8002c28 <USB_ActivateEndpoint+0x1e2>
  {
    if (ep->is_in != 0U)
 8002aa0:	784a      	ldrb	r2, [r1, #1]
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d051      	beq.n	8002b4a <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002aa6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	441a      	add	r2, r3
 8002aae:	780c      	ldrb	r4, [r1, #0]
 8002ab0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002ab4:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002ab8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002abc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002ac0:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ac4:	780c      	ldrb	r4, [r1, #0]
 8002ac6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002aca:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002ace:	d00c      	beq.n	8002aea <USB_ActivateEndpoint+0xa4>
 8002ad0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ad4:	b292      	uxth	r2, r2
 8002ad6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002ada:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ae2:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8002ae6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002aea:	78ca      	ldrb	r2, [r1, #3]
 8002aec:	2a01      	cmp	r2, #1
 8002aee:	d01d      	beq.n	8002b2c <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002af0:	7809      	ldrb	r1, [r1, #0]
 8002af2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002af6:	b292      	uxth	r2, r2
 8002af8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002afc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b00:	f082 0220 	eor.w	r2, r2, #32
 8002b04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b0c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002b10:	e06a      	b.n	8002be8 <USB_ActivateEndpoint+0x1a2>
      wEpRegVal |= USB_EP_CONTROL;
 8002b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 8002b16:	e7aa      	b.n	8002a6e <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002b18:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002b1c:	2000      	movs	r0, #0
      break;
 8002b1e:	e7a6      	b.n	8002a6e <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8002b24:	2000      	movs	r0, #0
      break;
 8002b26:	e7a2      	b.n	8002a6e <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8002b28:	2001      	movs	r0, #1
 8002b2a:	e7a0      	b.n	8002a6e <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b2c:	7809      	ldrb	r1, [r1, #0]
 8002b2e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002b32:	b292      	uxth	r2, r2
 8002b34:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002b38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b44:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002b48:	e04e      	b.n	8002be8 <USB_ActivateEndpoint+0x1a2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b4a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	441a      	add	r2, r3
 8002b52:	780c      	ldrb	r4, [r1, #0]
 8002b54:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002b58:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002b5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002b60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002b64:	f8a2 c408 	strh.w	ip, [r2, #1032]	@ 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002b68:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	441a      	add	r2, r3
 8002b70:	780c      	ldrb	r4, [r1, #0]
 8002b72:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002b76:	690c      	ldr	r4, [r1, #16]
 8002b78:	bbbc      	cbnz	r4, 8002bea <USB_ActivateEndpoint+0x1a4>
 8002b7a:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	@ 0x40c
 8002b7e:	fa1f fc8c 	uxth.w	ip, ip
 8002b82:	f42c 4cf8 	bic.w	ip, ip, #31744	@ 0x7c00
 8002b86:	fa1f fc8c 	uxth.w	ip, ip
 8002b8a:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
 8002b8e:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	@ 0x40c
 8002b92:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8002b96:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8002b9a:	fa1f fc8c 	uxth.w	ip, ip
 8002b9e:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ba2:	780c      	ldrb	r4, [r1, #0]
 8002ba4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ba8:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8002bac:	d00c      	beq.n	8002bc8 <USB_ActivateEndpoint+0x182>
 8002bae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002bb8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002bbc:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002bc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bc4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bc8:	7809      	ldrb	r1, [r1, #0]
 8002bca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bd4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002bd8:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8002bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002be0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002be4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002be8:	bd10      	pop	{r4, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002bea:	2c3e      	cmp	r4, #62	@ 0x3e
 8002bec:	d80d      	bhi.n	8002c0a <USB_ActivateEndpoint+0x1c4>
 8002bee:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8002bf2:	f014 0f01 	tst.w	r4, #1
 8002bf6:	d001      	beq.n	8002bfc <USB_ActivateEndpoint+0x1b6>
 8002bf8:	f10c 0c01 	add.w	ip, ip, #1
 8002bfc:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8002c00:	fa1f fc8c 	uxth.w	ip, ip
 8002c04:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
 8002c08:	e7cb      	b.n	8002ba2 <USB_ActivateEndpoint+0x15c>
 8002c0a:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8002c0e:	f014 0f1f 	tst.w	r4, #31
 8002c12:	d101      	bne.n	8002c18 <USB_ActivateEndpoint+0x1d2>
 8002c14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002c18:	ea6f 64cc 	mvn.w	r4, ip, lsl #27
 8002c1c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002c20:	b2a4      	uxth	r4, r4
 8002c22:	f8a2 440c 	strh.w	r4, [r2, #1036]	@ 0x40c
 8002c26:	e7bc      	b.n	8002ba2 <USB_ActivateEndpoint+0x15c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002c28:	f891 c000 	ldrb.w	ip, [r1]
 8002c2c:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8002c30:	b292      	uxth	r2, r2
 8002c32:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002c36:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c3a:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8002c3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c42:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002c46:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002c4a:	b292      	uxth	r2, r2
 8002c4c:	441a      	add	r2, r3
 8002c4e:	f891 c000 	ldrb.w	ip, [r1]
 8002c52:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8002c56:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8002c5a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002c5e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002c62:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
 8002c66:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	441a      	add	r2, r3
 8002c6e:	f891 c000 	ldrb.w	ip, [r1]
 8002c72:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8002c76:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8002c7a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002c7e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002c82:	f8a2 c408 	strh.w	ip, [r2, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8002c86:	784a      	ldrb	r2, [r1, #1]
 8002c88:	2a00      	cmp	r2, #0
 8002c8a:	d141      	bne.n	8002d10 <USB_ActivateEndpoint+0x2ca>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c8c:	780c      	ldrb	r4, [r1, #0]
 8002c8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002c92:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8002c96:	d00c      	beq.n	8002cb2 <USB_ActivateEndpoint+0x26c>
 8002c98:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002ca2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ca6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002caa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cb2:	780c      	ldrb	r4, [r1, #0]
 8002cb4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002cb8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002cbc:	d00c      	beq.n	8002cd8 <USB_ActivateEndpoint+0x292>
 8002cbe:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002cc2:	b292      	uxth	r2, r2
 8002cc4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002cc8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ccc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cd0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8002cd4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cd8:	f891 c000 	ldrb.w	ip, [r1]
 8002cdc:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8002ce0:	b292      	uxth	r2, r2
 8002ce2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ce6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002cea:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8002cee:	f248 0480 	movw	r4, #32896	@ 0x8080
 8002cf2:	4322      	orrs	r2, r4
 8002cf4:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cf8:	7809      	ldrb	r1, [r1, #0]
 8002cfa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d08:	4322      	orrs	r2, r4
 8002d0a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002d0e:	e76b      	b.n	8002be8 <USB_ActivateEndpoint+0x1a2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d10:	780c      	ldrb	r4, [r1, #0]
 8002d12:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d16:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8002d1a:	d00c      	beq.n	8002d36 <USB_ActivateEndpoint+0x2f0>
 8002d1c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d20:	b292      	uxth	r2, r2
 8002d22:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002d26:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d2a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002d2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d32:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d36:	780c      	ldrb	r4, [r1, #0]
 8002d38:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d3c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002d40:	d00c      	beq.n	8002d5c <USB_ActivateEndpoint+0x316>
 8002d42:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d46:	b292      	uxth	r2, r2
 8002d48:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002d4c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d54:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8002d58:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002d5c:	78ca      	ldrb	r2, [r1, #3]
 8002d5e:	2a01      	cmp	r2, #1
 8002d60:	d01e      	beq.n	8002da0 <USB_ActivateEndpoint+0x35a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d62:	780c      	ldrb	r4, [r1, #0]
 8002d64:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d72:	f082 0220 	eor.w	r2, r2, #32
 8002d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d7e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d82:	7809      	ldrb	r1, [r1, #0]
 8002d84:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d9a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002d9e:	e723      	b.n	8002be8 <USB_ActivateEndpoint+0x1a2>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002da0:	780c      	ldrb	r4, [r1, #0]
 8002da2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002da6:	b292      	uxth	r2, r2
 8002da8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002dac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002db0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002db4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002db8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8002dbc:	e7e1      	b.n	8002d82 <USB_ActivateEndpoint+0x33c>

08002dbe <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002dbe:	7b0b      	ldrb	r3, [r1, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d146      	bne.n	8002e52 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8002dc4:	784b      	ldrb	r3, [r1, #1]
 8002dc6:	b313      	cbz	r3, 8002e0e <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dc8:	780a      	ldrb	r2, [r1, #0]
 8002dca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dce:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002dd2:	d00c      	beq.n	8002dee <USB_DeactivateEndpoint+0x30>
 8002dd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002de6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002dea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dee:	780a      	ldrb	r2, [r1, #0]
 8002df0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e0e:	780a      	ldrb	r2, [r1, #0]
 8002e10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e14:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002e18:	d00c      	beq.n	8002e34 <USB_DeactivateEndpoint+0x76>
 8002e1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e30:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e34:	780a      	ldrb	r2, [r1, #0]
 8002e36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002e50:	e7db      	b.n	8002e0a <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8002e52:	784b      	ldrb	r3, [r1, #1]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d14e      	bne.n	8002ef6 <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e58:	780a      	ldrb	r2, [r1, #0]
 8002e5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e5e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002e62:	d00c      	beq.n	8002e7e <USB_DeactivateEndpoint+0xc0>
 8002e64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e7e:	780a      	ldrb	r2, [r1, #0]
 8002e80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e84:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002e88:	d00c      	beq.n	8002ea4 <USB_DeactivateEndpoint+0xe6>
 8002e8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ea0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002ea4:	780a      	ldrb	r2, [r1, #0]
 8002ea6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ebc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ec0:	780a      	ldrb	r2, [r1, #0]
 8002ec2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed0:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8002ed4:	ea43 030c 	orr.w	r3, r3, ip
 8002ed8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002edc:	780a      	ldrb	r2, [r1, #0]
 8002ede:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eec:	ea43 030c 	orr.w	r3, r3, ip
 8002ef0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002ef4:	e789      	b.n	8002e0a <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ef6:	780a      	ldrb	r2, [r1, #0]
 8002ef8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002efc:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002f00:	d00c      	beq.n	8002f1c <USB_DeactivateEndpoint+0x15e>
 8002f02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f1c:	780a      	ldrb	r2, [r1, #0]
 8002f1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f22:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002f26:	d00c      	beq.n	8002f42 <USB_DeactivateEndpoint+0x184>
 8002f28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002f42:	780a      	ldrb	r2, [r1, #0]
 8002f44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f5e:	780a      	ldrb	r2, [r1, #0]
 8002f60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f6e:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8002f72:	ea43 030c 	orr.w	r3, r3, ip
 8002f76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f7a:	780a      	ldrb	r2, [r1, #0]
 8002f7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f8a:	ea43 030c 	orr.w	r3, r3, ip
 8002f8e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002f92:	e73a      	b.n	8002e0a <USB_DeactivateEndpoint+0x4c>

08002f94 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002f94:	784b      	ldrb	r3, [r1, #1]
 8002f96:	b18b      	cbz	r3, 8002fbc <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002f98:	780a      	ldrb	r2, [r1, #0]
 8002f9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fa8:	f083 0310 	eor.w	r3, r3, #16
 8002fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8002fb8:	2000      	movs	r0, #0
 8002fba:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002fbc:	780a      	ldrb	r2, [r1, #0]
 8002fbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fcc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002fd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fd8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002fdc:	e7ec      	b.n	8002fb8 <USB_EPSetStall+0x24>

08002fde <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002fde:	7b0b      	ldrb	r3, [r1, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d14b      	bne.n	800307c <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8002fe4:	784b      	ldrb	r3, [r1, #1]
 8002fe6:	b333      	cbz	r3, 8003036 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fe8:	780a      	ldrb	r2, [r1, #0]
 8002fea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fee:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002ff2:	d00c      	beq.n	800300e <USB_EPClearStall+0x30>
 8002ff4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003006:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800300a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800300e:	78cb      	ldrb	r3, [r1, #3]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d033      	beq.n	800307c <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003014:	780a      	ldrb	r2, [r1, #0]
 8003016:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800301a:	b29b      	uxth	r3, r3
 800301c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003024:	f083 0320 	eor.w	r3, r3, #32
 8003028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800302c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003030:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003034:	e022      	b.n	800307c <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003036:	780a      	ldrb	r2, [r1, #0]
 8003038:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800303c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003040:	d00c      	beq.n	800305c <USB_EPClearStall+0x7e>
 8003042:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003046:	b29b      	uxth	r3, r3
 8003048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800304c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003050:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003058:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800305c:	780a      	ldrb	r2, [r1, #0]
 800305e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003078:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800307c:	2000      	movs	r0, #0
 800307e:	4770      	bx	lr

08003080 <USB_StopDevice>:
  * @brief  USB_StopDevice Stop the usb device mode
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8003080:	4603      	mov	r3, r0
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003082:	2201      	movs	r2, #1
 8003084:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 8003088:	2000      	movs	r0, #0
 800308a:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 800308e:	2203      	movs	r2, #3
 8003090:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8003094:	4770      	bx	lr

08003096 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003096:	b911      	cbnz	r1, 800309e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 800309e:	2000      	movs	r0, #0
 80030a0:	4770      	bx	lr

080030a2 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80030a2:	2000      	movs	r0, #0
 80030a4:	4770      	bx	lr

080030a6 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80030a6:	2000      	movs	r0, #0
 80030a8:	4770      	bx	lr

080030aa <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80030aa:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 80030ae:	b280      	uxth	r0, r0
 80030b0:	4770      	bx	lr

080030b2 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80030b2:	2000      	movs	r0, #0
 80030b4:	4770      	bx	lr

080030b6 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80030b6:	3301      	adds	r3, #1
 80030b8:	085b      	lsrs	r3, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80030ba:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80030be:	f500 6080 	add.w	r0, r0, #1024	@ 0x400

  for (i = n; i != 0U; i--)
 80030c2:	e008      	b.n	80030d6 <USB_WritePMA+0x20>
  {
    temp1 = *pBuf;
 80030c4:	780a      	ldrb	r2, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80030c6:	f891 c001 	ldrb.w	ip, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 80030ca:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80030ce:	f820 2b04 	strh.w	r2, [r0], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80030d2:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80030d4:	3b01      	subs	r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f4      	bne.n	80030c4 <USB_WritePMA+0xe>
  }
}
 80030da:	4770      	bx	lr

080030dc <USB_EPStartXfer>:
{
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	4605      	mov	r5, r0
 80030e0:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80030e2:	784a      	ldrb	r2, [r1, #1]
 80030e4:	2a01      	cmp	r2, #1
 80030e6:	d037      	beq.n	8003158 <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 80030e8:	7b0b      	ldrb	r3, [r1, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 82a0 	bne.w	8003630 <USB_EPStartXfer+0x554>
      if (ep->xfer_len > ep->maxpacket)
 80030f0:	698b      	ldr	r3, [r1, #24]
 80030f2:	690a      	ldr	r2, [r1, #16]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f240 827e 	bls.w	80035f6 <USB_EPStartXfer+0x51a>
        ep->xfer_len -= len;
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80030fe:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8003102:	b29b      	uxth	r3, r3
 8003104:	442b      	add	r3, r5
 8003106:	7821      	ldrb	r1, [r4, #0]
 8003108:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800310c:	2a00      	cmp	r2, #0
 800310e:	f040 8276 	bne.w	80035fe <USB_EPStartXfer+0x522>
 8003112:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003116:	b292      	uxth	r2, r2
 8003118:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800311c:	b292      	uxth	r2, r2
 800311e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003122:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003126:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800312a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800312e:	b292      	uxth	r2, r2
 8003130:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003134:	7822      	ldrb	r2, [r4, #0]
 8003136:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003144:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003150:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003154:	2000      	movs	r0, #0
}
 8003156:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8003158:	698e      	ldr	r6, [r1, #24]
 800315a:	6909      	ldr	r1, [r1, #16]
 800315c:	428e      	cmp	r6, r1
 800315e:	d900      	bls.n	8003162 <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 8003160:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8003162:	7b23      	ldrb	r3, [r4, #12]
 8003164:	b33b      	cbz	r3, 80031b6 <USB_EPStartXfer+0xda>
      if (ep->type == EP_TYPE_BULK)
 8003166:	78e3      	ldrb	r3, [r4, #3]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d046      	beq.n	80031fa <USB_EPStartXfer+0x11e>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800316c:	7821      	ldrb	r1, [r4, #0]
 800316e:	f835 3021 	ldrh.w	r3, [r5, r1, lsl #2]
 8003172:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003176:	f000 81ee 	beq.w	8003556 <USB_EPStartXfer+0x47a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800317a:	2a00      	cmp	r2, #0
 800317c:	f040 81ca 	bne.w	8003514 <USB_EPStartXfer+0x438>
 8003180:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8003184:	b29b      	uxth	r3, r3
 8003186:	442b      	add	r3, r5
 8003188:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800318c:	2e00      	cmp	r6, #0
 800318e:	f040 81a8 	bne.w	80034e2 <USB_EPStartXfer+0x406>
 8003192:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003196:	b292      	uxth	r2, r2
 8003198:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800319c:	b292      	uxth	r2, r2
 800319e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80031a2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80031a6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80031aa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80031ae:	b292      	uxth	r2, r2
 80031b0:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80031b4:	e1b7      	b.n	8003526 <USB_EPStartXfer+0x44a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80031b6:	b2b6      	uxth	r6, r6
 80031b8:	4633      	mov	r3, r6
 80031ba:	88e2      	ldrh	r2, [r4, #6]
 80031bc:	6961      	ldr	r1, [r4, #20]
 80031be:	4628      	mov	r0, r5
 80031c0:	f7ff ff79 	bl	80030b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80031c4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	442b      	add	r3, r5
 80031cc:	7822      	ldrb	r2, [r4, #0]
 80031ce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80031d2:	f8a3 6404 	strh.w	r6, [r3, #1028]	@ 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80031d6:	7822      	ldrb	r2, [r4, #0]
 80031d8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e6:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80031ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80031f6:	2000      	movs	r0, #0
 80031f8:	e7ad      	b.n	8003156 <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 80031fa:	6a23      	ldr	r3, [r4, #32]
 80031fc:	4299      	cmp	r1, r3
 80031fe:	f080 8152 	bcs.w	80034a6 <USB_EPStartXfer+0x3ca>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003202:	7822      	ldrb	r2, [r4, #0]
 8003204:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800320e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003212:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800321a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 800321e:	6a23      	ldr	r3, [r4, #32]
 8003220:	1b9b      	subs	r3, r3, r6
 8003222:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003224:	7823      	ldrb	r3, [r4, #0]
 8003226:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800322a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800322e:	f000 809d 	beq.w	800336c <USB_EPStartXfer+0x290>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003232:	7862      	ldrb	r2, [r4, #1]
 8003234:	bb8a      	cbnz	r2, 800329a <USB_EPStartXfer+0x1be>
 8003236:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 800323a:	b292      	uxth	r2, r2
 800323c:	442a      	add	r2, r5
 800323e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003242:	b98e      	cbnz	r6, 8003268 <USB_EPStartXfer+0x18c>
 8003244:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003248:	b292      	uxth	r2, r2
 800324a:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800324e:	b292      	uxth	r2, r2
 8003250:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003254:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003258:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800325c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003260:	b292      	uxth	r2, r2
 8003262:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003266:	e01a      	b.n	800329e <USB_EPStartXfer+0x1c2>
 8003268:	2e3e      	cmp	r6, #62	@ 0x3e
 800326a:	d809      	bhi.n	8003280 <USB_EPStartXfer+0x1a4>
 800326c:	0872      	lsrs	r2, r6, #1
 800326e:	f016 0f01 	tst.w	r6, #1
 8003272:	d000      	beq.n	8003276 <USB_EPStartXfer+0x19a>
 8003274:	3201      	adds	r2, #1
 8003276:	0292      	lsls	r2, r2, #10
 8003278:	b292      	uxth	r2, r2
 800327a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800327e:	e00e      	b.n	800329e <USB_EPStartXfer+0x1c2>
 8003280:	0972      	lsrs	r2, r6, #5
 8003282:	f016 0f1f 	tst.w	r6, #31
 8003286:	d100      	bne.n	800328a <USB_EPStartXfer+0x1ae>
 8003288:	3a01      	subs	r2, #1
 800328a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800328e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003292:	b292      	uxth	r2, r2
 8003294:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003298:	e001      	b.n	800329e <USB_EPStartXfer+0x1c2>
 800329a:	2a01      	cmp	r2, #1
 800329c:	d02b      	beq.n	80032f6 <USB_EPStartXfer+0x21a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800329e:	b2b3      	uxth	r3, r6
 80032a0:	8962      	ldrh	r2, [r4, #10]
 80032a2:	6961      	ldr	r1, [r4, #20]
 80032a4:	4628      	mov	r0, r5
 80032a6:	f7ff ff06 	bl	80030b6 <USB_WritePMA>
            ep->xfer_buff += len;
 80032aa:	6963      	ldr	r3, [r4, #20]
 80032ac:	4433      	add	r3, r6
 80032ae:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80032b0:	6a23      	ldr	r3, [r4, #32]
 80032b2:	6922      	ldr	r2, [r4, #16]
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d928      	bls.n	800330a <USB_EPStartXfer+0x22e>
              ep->xfer_len_db -= len;
 80032b8:	1b9b      	subs	r3, r3, r6
 80032ba:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80032bc:	7863      	ldrb	r3, [r4, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d140      	bne.n	8003344 <USB_EPStartXfer+0x268>
 80032c2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	442b      	add	r3, r5
 80032ca:	7822      	ldrb	r2, [r4, #0]
 80032cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80032d0:	b9fe      	cbnz	r6, 8003312 <USB_EPStartXfer+0x236>
 80032d2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80032d6:	b292      	uxth	r2, r2
 80032d8:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80032dc:	b292      	uxth	r2, r2
 80032de:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80032e2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80032e6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80032ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80032ee:	b292      	uxth	r2, r2
 80032f0:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80032f4:	e028      	b.n	8003348 <USB_EPStartXfer+0x26c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032f6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80032fa:	b292      	uxth	r2, r2
 80032fc:	442a      	add	r2, r5
 80032fe:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003302:	b2b2      	uxth	r2, r6
 8003304:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003308:	e7c9      	b.n	800329e <USB_EPStartXfer+0x1c2>
              ep->xfer_len_db = 0U;
 800330a:	2200      	movs	r2, #0
 800330c:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 800330e:	461e      	mov	r6, r3
 8003310:	e7d4      	b.n	80032bc <USB_EPStartXfer+0x1e0>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003312:	2e3e      	cmp	r6, #62	@ 0x3e
 8003314:	d809      	bhi.n	800332a <USB_EPStartXfer+0x24e>
 8003316:	0872      	lsrs	r2, r6, #1
 8003318:	f016 0f01 	tst.w	r6, #1
 800331c:	d000      	beq.n	8003320 <USB_EPStartXfer+0x244>
 800331e:	3201      	adds	r2, #1
 8003320:	0292      	lsls	r2, r2, #10
 8003322:	b292      	uxth	r2, r2
 8003324:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003328:	e00e      	b.n	8003348 <USB_EPStartXfer+0x26c>
 800332a:	0972      	lsrs	r2, r6, #5
 800332c:	f016 0f1f 	tst.w	r6, #31
 8003330:	d100      	bne.n	8003334 <USB_EPStartXfer+0x258>
 8003332:	3a01      	subs	r2, #1
 8003334:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003338:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800333c:	b292      	uxth	r2, r2
 800333e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003342:	e001      	b.n	8003348 <USB_EPStartXfer+0x26c>
 8003344:	2b01      	cmp	r3, #1
 8003346:	d006      	beq.n	8003356 <USB_EPStartXfer+0x27a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003348:	b2b3      	uxth	r3, r6
 800334a:	8922      	ldrh	r2, [r4, #8]
 800334c:	6961      	ldr	r1, [r4, #20]
 800334e:	4628      	mov	r0, r5
 8003350:	f7ff feb1 	bl	80030b6 <USB_WritePMA>
 8003354:	e73f      	b.n	80031d6 <USB_EPStartXfer+0xfa>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003356:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800335a:	b29b      	uxth	r3, r3
 800335c:	442b      	add	r3, r5
 800335e:	7822      	ldrb	r2, [r4, #0]
 8003360:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003364:	b2b2      	uxth	r2, r6
 8003366:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800336a:	e7ed      	b.n	8003348 <USB_EPStartXfer+0x26c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800336c:	7862      	ldrb	r2, [r4, #1]
 800336e:	bb8a      	cbnz	r2, 80033d4 <USB_EPStartXfer+0x2f8>
 8003370:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8003374:	b292      	uxth	r2, r2
 8003376:	442a      	add	r2, r5
 8003378:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800337c:	b98e      	cbnz	r6, 80033a2 <USB_EPStartXfer+0x2c6>
 800337e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8003382:	b292      	uxth	r2, r2
 8003384:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8003388:	b292      	uxth	r2, r2
 800338a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800338e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8003392:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003396:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800339a:	b292      	uxth	r2, r2
 800339c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80033a0:	e01a      	b.n	80033d8 <USB_EPStartXfer+0x2fc>
 80033a2:	2e3e      	cmp	r6, #62	@ 0x3e
 80033a4:	d809      	bhi.n	80033ba <USB_EPStartXfer+0x2de>
 80033a6:	0872      	lsrs	r2, r6, #1
 80033a8:	f016 0f01 	tst.w	r6, #1
 80033ac:	d000      	beq.n	80033b0 <USB_EPStartXfer+0x2d4>
 80033ae:	3201      	adds	r2, #1
 80033b0:	0292      	lsls	r2, r2, #10
 80033b2:	b292      	uxth	r2, r2
 80033b4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80033b8:	e00e      	b.n	80033d8 <USB_EPStartXfer+0x2fc>
 80033ba:	0972      	lsrs	r2, r6, #5
 80033bc:	f016 0f1f 	tst.w	r6, #31
 80033c0:	d100      	bne.n	80033c4 <USB_EPStartXfer+0x2e8>
 80033c2:	3a01      	subs	r2, #1
 80033c4:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80033c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80033cc:	b292      	uxth	r2, r2
 80033ce:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80033d2:	e001      	b.n	80033d8 <USB_EPStartXfer+0x2fc>
 80033d4:	2a01      	cmp	r2, #1
 80033d6:	d02b      	beq.n	8003430 <USB_EPStartXfer+0x354>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033d8:	b2b3      	uxth	r3, r6
 80033da:	8922      	ldrh	r2, [r4, #8]
 80033dc:	6961      	ldr	r1, [r4, #20]
 80033de:	4628      	mov	r0, r5
 80033e0:	f7ff fe69 	bl	80030b6 <USB_WritePMA>
            ep->xfer_buff += len;
 80033e4:	6963      	ldr	r3, [r4, #20]
 80033e6:	4433      	add	r3, r6
 80033e8:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80033ea:	6a23      	ldr	r3, [r4, #32]
 80033ec:	6922      	ldr	r2, [r4, #16]
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d928      	bls.n	8003444 <USB_EPStartXfer+0x368>
              ep->xfer_len_db -= len;
 80033f2:	1b9b      	subs	r3, r3, r6
 80033f4:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033f6:	7863      	ldrb	r3, [r4, #1]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d140      	bne.n	800347e <USB_EPStartXfer+0x3a2>
 80033fc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8003400:	b29b      	uxth	r3, r3
 8003402:	442b      	add	r3, r5
 8003404:	7822      	ldrb	r2, [r4, #0]
 8003406:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800340a:	b9fe      	cbnz	r6, 800344c <USB_EPStartXfer+0x370>
 800340c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003410:	b292      	uxth	r2, r2
 8003412:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8003416:	b292      	uxth	r2, r2
 8003418:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800341c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003420:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003424:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003428:	b292      	uxth	r2, r2
 800342a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800342e:	e028      	b.n	8003482 <USB_EPStartXfer+0x3a6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003430:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8003434:	b292      	uxth	r2, r2
 8003436:	442a      	add	r2, r5
 8003438:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800343c:	b2b2      	uxth	r2, r6
 800343e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003442:	e7c9      	b.n	80033d8 <USB_EPStartXfer+0x2fc>
              ep->xfer_len_db = 0U;
 8003444:	2200      	movs	r2, #0
 8003446:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8003448:	461e      	mov	r6, r3
 800344a:	e7d4      	b.n	80033f6 <USB_EPStartXfer+0x31a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800344c:	2e3e      	cmp	r6, #62	@ 0x3e
 800344e:	d809      	bhi.n	8003464 <USB_EPStartXfer+0x388>
 8003450:	0872      	lsrs	r2, r6, #1
 8003452:	f016 0f01 	tst.w	r6, #1
 8003456:	d000      	beq.n	800345a <USB_EPStartXfer+0x37e>
 8003458:	3201      	adds	r2, #1
 800345a:	0292      	lsls	r2, r2, #10
 800345c:	b292      	uxth	r2, r2
 800345e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003462:	e00e      	b.n	8003482 <USB_EPStartXfer+0x3a6>
 8003464:	0972      	lsrs	r2, r6, #5
 8003466:	f016 0f1f 	tst.w	r6, #31
 800346a:	d100      	bne.n	800346e <USB_EPStartXfer+0x392>
 800346c:	3a01      	subs	r2, #1
 800346e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003472:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003476:	b292      	uxth	r2, r2
 8003478:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800347c:	e001      	b.n	8003482 <USB_EPStartXfer+0x3a6>
 800347e:	2b01      	cmp	r3, #1
 8003480:	d006      	beq.n	8003490 <USB_EPStartXfer+0x3b4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003482:	b2b3      	uxth	r3, r6
 8003484:	8962      	ldrh	r2, [r4, #10]
 8003486:	6961      	ldr	r1, [r4, #20]
 8003488:	4628      	mov	r0, r5
 800348a:	f7ff fe14 	bl	80030b6 <USB_WritePMA>
 800348e:	e6a2      	b.n	80031d6 <USB_EPStartXfer+0xfa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003490:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8003494:	b29b      	uxth	r3, r3
 8003496:	442b      	add	r3, r5
 8003498:	7822      	ldrb	r2, [r4, #0]
 800349a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800349e:	b2b2      	uxth	r2, r6
 80034a0:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80034a4:	e7ed      	b.n	8003482 <USB_EPStartXfer+0x3a6>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80034a6:	7821      	ldrb	r1, [r4, #0]
 80034a8:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80034ac:	b292      	uxth	r2, r2
 80034ae:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80034b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80034b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034be:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80034c2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80034c6:	b292      	uxth	r2, r2
 80034c8:	442a      	add	r2, r5
 80034ca:	7821      	ldrb	r1, [r4, #0]
 80034cc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f8a2 3404 	strh.w	r3, [r2, #1028]	@ 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034d6:	8922      	ldrh	r2, [r4, #8]
 80034d8:	6961      	ldr	r1, [r4, #20]
 80034da:	4628      	mov	r0, r5
 80034dc:	f7ff fdeb 	bl	80030b6 <USB_WritePMA>
 80034e0:	e679      	b.n	80031d6 <USB_EPStartXfer+0xfa>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034e2:	2e3e      	cmp	r6, #62	@ 0x3e
 80034e4:	d809      	bhi.n	80034fa <USB_EPStartXfer+0x41e>
 80034e6:	0872      	lsrs	r2, r6, #1
 80034e8:	f016 0f01 	tst.w	r6, #1
 80034ec:	d000      	beq.n	80034f0 <USB_EPStartXfer+0x414>
 80034ee:	3201      	adds	r2, #1
 80034f0:	0292      	lsls	r2, r2, #10
 80034f2:	b292      	uxth	r2, r2
 80034f4:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80034f8:	e015      	b.n	8003526 <USB_EPStartXfer+0x44a>
 80034fa:	0972      	lsrs	r2, r6, #5
 80034fc:	f016 0f1f 	tst.w	r6, #31
 8003500:	d100      	bne.n	8003504 <USB_EPStartXfer+0x428>
 8003502:	3a01      	subs	r2, #1
 8003504:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003508:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800350c:	b292      	uxth	r2, r2
 800350e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003512:	e008      	b.n	8003526 <USB_EPStartXfer+0x44a>
 8003514:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8003518:	b29b      	uxth	r3, r3
 800351a:	442b      	add	r3, r5
 800351c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003520:	b2b2      	uxth	r2, r6
 8003522:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
          pmabuffer = ep->pmaaddr1;
 8003526:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003528:	b2b3      	uxth	r3, r6
 800352a:	6961      	ldr	r1, [r4, #20]
 800352c:	4628      	mov	r0, r5
 800352e:	f7ff fdc2 	bl	80030b6 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003532:	7863      	ldrb	r3, [r4, #1]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d14c      	bne.n	80035d2 <USB_EPStartXfer+0x4f6>
 8003538:	7822      	ldrb	r2, [r4, #0]
 800353a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800354c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003550:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003554:	e63f      	b.n	80031d6 <USB_EPStartXfer+0xfa>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003556:	bb8a      	cbnz	r2, 80035bc <USB_EPStartXfer+0x4e0>
 8003558:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800355c:	b29b      	uxth	r3, r3
 800355e:	442b      	add	r3, r5
 8003560:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003564:	b98e      	cbnz	r6, 800358a <USB_EPStartXfer+0x4ae>
 8003566:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800356a:	b292      	uxth	r2, r2
 800356c:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8003570:	b292      	uxth	r2, r2
 8003572:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003576:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800357a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800357e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003582:	b292      	uxth	r2, r2
 8003584:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003588:	e021      	b.n	80035ce <USB_EPStartXfer+0x4f2>
 800358a:	2e3e      	cmp	r6, #62	@ 0x3e
 800358c:	d809      	bhi.n	80035a2 <USB_EPStartXfer+0x4c6>
 800358e:	0872      	lsrs	r2, r6, #1
 8003590:	f016 0f01 	tst.w	r6, #1
 8003594:	d000      	beq.n	8003598 <USB_EPStartXfer+0x4bc>
 8003596:	3201      	adds	r2, #1
 8003598:	0292      	lsls	r2, r2, #10
 800359a:	b292      	uxth	r2, r2
 800359c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80035a0:	e015      	b.n	80035ce <USB_EPStartXfer+0x4f2>
 80035a2:	0972      	lsrs	r2, r6, #5
 80035a4:	f016 0f1f 	tst.w	r6, #31
 80035a8:	d100      	bne.n	80035ac <USB_EPStartXfer+0x4d0>
 80035aa:	3a01      	subs	r2, #1
 80035ac:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80035b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80035b4:	b292      	uxth	r2, r2
 80035b6:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80035ba:	e008      	b.n	80035ce <USB_EPStartXfer+0x4f2>
 80035bc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	442b      	add	r3, r5
 80035c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80035c8:	b2b2      	uxth	r2, r6
 80035ca:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
          pmabuffer = ep->pmaaddr0;
 80035ce:	8922      	ldrh	r2, [r4, #8]
 80035d0:	e7aa      	b.n	8003528 <USB_EPStartXfer+0x44c>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	f47f adff 	bne.w	80031d6 <USB_EPStartXfer+0xfa>
 80035d8:	7822      	ldrb	r2, [r4, #0]
 80035da:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035f0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80035f4:	e5ef      	b.n	80031d6 <USB_EPStartXfer+0xfa>
        ep->xfer_len = 0U;
 80035f6:	2200      	movs	r2, #0
 80035f8:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 80035fa:	461a      	mov	r2, r3
 80035fc:	e57f      	b.n	80030fe <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035fe:	2a3e      	cmp	r2, #62	@ 0x3e
 8003600:	d809      	bhi.n	8003616 <USB_EPStartXfer+0x53a>
 8003602:	0851      	lsrs	r1, r2, #1
 8003604:	f012 0f01 	tst.w	r2, #1
 8003608:	d000      	beq.n	800360c <USB_EPStartXfer+0x530>
 800360a:	3101      	adds	r1, #1
 800360c:	0289      	lsls	r1, r1, #10
 800360e:	b289      	uxth	r1, r1
 8003610:	f8a3 140c 	strh.w	r1, [r3, #1036]	@ 0x40c
 8003614:	e58e      	b.n	8003134 <USB_EPStartXfer+0x58>
 8003616:	0951      	lsrs	r1, r2, #5
 8003618:	f012 0f1f 	tst.w	r2, #31
 800361c:	d100      	bne.n	8003620 <USB_EPStartXfer+0x544>
 800361e:	3901      	subs	r1, #1
 8003620:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003624:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003628:	b289      	uxth	r1, r1
 800362a:	f8a3 140c 	strh.w	r1, [r3, #1036]	@ 0x40c
 800362e:	e581      	b.n	8003134 <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 8003630:	78cb      	ldrb	r3, [r1, #3]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d045      	beq.n	80036c2 <USB_EPStartXfer+0x5e6>
      else if (ep->type == EP_TYPE_ISOC)
 8003636:	2b01      	cmp	r3, #1
 8003638:	f040 811d 	bne.w	8003876 <USB_EPStartXfer+0x79a>
        if (ep->xfer_len > ep->maxpacket)
 800363c:	6989      	ldr	r1, [r1, #24]
 800363e:	6923      	ldr	r3, [r4, #16]
 8003640:	4299      	cmp	r1, r3
 8003642:	f240 80d4 	bls.w	80037ee <USB_EPStartXfer+0x712>
          ep->xfer_len -= len;
 8003646:	1ac9      	subs	r1, r1, r3
 8003648:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800364a:	b9d2      	cbnz	r2, 8003682 <USB_EPStartXfer+0x5a6>
 800364c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8003650:	b292      	uxth	r2, r2
 8003652:	442a      	add	r2, r5
 8003654:	7821      	ldrb	r1, [r4, #0]
 8003656:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 80cb 	bne.w	80037f6 <USB_EPStartXfer+0x71a>
 8003660:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8003664:	b289      	uxth	r1, r1
 8003666:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800366a:	b289      	uxth	r1, r1
 800366c:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8003670:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8003674:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003678:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800367c:	b289      	uxth	r1, r1
 800367e:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8003682:	7862      	ldrb	r2, [r4, #1]
 8003684:	2a00      	cmp	r2, #0
 8003686:	f040 80e8 	bne.w	800385a <USB_EPStartXfer+0x77e>
 800368a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 800368e:	b292      	uxth	r2, r2
 8003690:	442a      	add	r2, r5
 8003692:	7821      	ldrb	r1, [r4, #0]
 8003694:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 80c5 	bne.w	8003828 <USB_EPStartXfer+0x74c>
 800369e:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 80036ae:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 80036b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 80036c0:	e538      	b.n	8003134 <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80036c2:	b9ca      	cbnz	r2, 80036f8 <USB_EPStartXfer+0x61c>
 80036c4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	4403      	add	r3, r0
 80036cc:	780a      	ldrb	r2, [r1, #0]
 80036ce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80036d2:	690a      	ldr	r2, [r1, #16]
 80036d4:	bb72      	cbnz	r2, 8003734 <USB_EPStartXfer+0x658>
 80036d6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80036da:	b292      	uxth	r2, r2
 80036dc:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80036e0:	b292      	uxth	r2, r2
 80036e2:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80036e6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80036ea:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80036ee:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80036f2:	b292      	uxth	r2, r2
 80036f4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80036f8:	7863      	ldrb	r3, [r4, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d14c      	bne.n	8003798 <USB_EPStartXfer+0x6bc>
 80036fe:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8003702:	b29b      	uxth	r3, r3
 8003704:	442b      	add	r3, r5
 8003706:	7822      	ldrb	r2, [r4, #0]
 8003708:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800370c:	6922      	ldr	r2, [r4, #16]
 800370e:	bb52      	cbnz	r2, 8003766 <USB_EPStartXfer+0x68a>
 8003710:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003714:	b292      	uxth	r2, r2
 8003716:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800371a:	b292      	uxth	r2, r2
 800371c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003720:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8003724:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003728:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800372c:	b292      	uxth	r2, r2
 800372e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003732:	e033      	b.n	800379c <USB_EPStartXfer+0x6c0>
 8003734:	2a3e      	cmp	r2, #62	@ 0x3e
 8003736:	d809      	bhi.n	800374c <USB_EPStartXfer+0x670>
 8003738:	0851      	lsrs	r1, r2, #1
 800373a:	f012 0f01 	tst.w	r2, #1
 800373e:	d000      	beq.n	8003742 <USB_EPStartXfer+0x666>
 8003740:	3101      	adds	r1, #1
 8003742:	028a      	lsls	r2, r1, #10
 8003744:	b292      	uxth	r2, r2
 8003746:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800374a:	e7d5      	b.n	80036f8 <USB_EPStartXfer+0x61c>
 800374c:	0951      	lsrs	r1, r2, #5
 800374e:	f012 0f1f 	tst.w	r2, #31
 8003752:	d100      	bne.n	8003756 <USB_EPStartXfer+0x67a>
 8003754:	3901      	subs	r1, #1
 8003756:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 800375a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800375e:	b292      	uxth	r2, r2
 8003760:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003764:	e7c8      	b.n	80036f8 <USB_EPStartXfer+0x61c>
 8003766:	2a3e      	cmp	r2, #62	@ 0x3e
 8003768:	d809      	bhi.n	800377e <USB_EPStartXfer+0x6a2>
 800376a:	0851      	lsrs	r1, r2, #1
 800376c:	f012 0f01 	tst.w	r2, #1
 8003770:	d000      	beq.n	8003774 <USB_EPStartXfer+0x698>
 8003772:	3101      	adds	r1, #1
 8003774:	028a      	lsls	r2, r1, #10
 8003776:	b292      	uxth	r2, r2
 8003778:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800377c:	e00e      	b.n	800379c <USB_EPStartXfer+0x6c0>
 800377e:	0951      	lsrs	r1, r2, #5
 8003780:	f012 0f1f 	tst.w	r2, #31
 8003784:	d100      	bne.n	8003788 <USB_EPStartXfer+0x6ac>
 8003786:	3901      	subs	r1, #1
 8003788:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 800378c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003790:	b292      	uxth	r2, r2
 8003792:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8003796:	e001      	b.n	800379c <USB_EPStartXfer+0x6c0>
 8003798:	2b01      	cmp	r3, #1
 800379a:	d01d      	beq.n	80037d8 <USB_EPStartXfer+0x6fc>
        if (ep->xfer_count != 0U)
 800379c:	69e3      	ldr	r3, [r4, #28]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f43f acc8 	beq.w	8003134 <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80037a4:	7822      	ldrb	r2, [r4, #0]
 80037a6:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80037aa:	f244 0340 	movw	r3, #16448	@ 0x4040
 80037ae:	ea03 0001 	and.w	r0, r3, r1
 80037b2:	438b      	bics	r3, r1
 80037b4:	d002      	beq.n	80037bc <USB_EPStartXfer+0x6e0>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	f47f acbc 	bne.w	8003134 <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80037bc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037d2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80037d6:	e4ad      	b.n	8003134 <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80037d8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80037dc:	b29b      	uxth	r3, r3
 80037de:	442b      	add	r3, r5
 80037e0:	7822      	ldrb	r2, [r4, #0]
 80037e2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80037e6:	8a22      	ldrh	r2, [r4, #16]
 80037e8:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80037ec:	e7d6      	b.n	800379c <USB_EPStartXfer+0x6c0>
          ep->xfer_len = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 80037f2:	460b      	mov	r3, r1
 80037f4:	e729      	b.n	800364a <USB_EPStartXfer+0x56e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80037f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80037f8:	d809      	bhi.n	800380e <USB_EPStartXfer+0x732>
 80037fa:	0859      	lsrs	r1, r3, #1
 80037fc:	f013 0f01 	tst.w	r3, #1
 8003800:	d000      	beq.n	8003804 <USB_EPStartXfer+0x728>
 8003802:	3101      	adds	r1, #1
 8003804:	0289      	lsls	r1, r1, #10
 8003806:	b289      	uxth	r1, r1
 8003808:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800380c:	e739      	b.n	8003682 <USB_EPStartXfer+0x5a6>
 800380e:	0959      	lsrs	r1, r3, #5
 8003810:	f013 0f1f 	tst.w	r3, #31
 8003814:	d100      	bne.n	8003818 <USB_EPStartXfer+0x73c>
 8003816:	3901      	subs	r1, #1
 8003818:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800381c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003820:	b289      	uxth	r1, r1
 8003822:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8003826:	e72c      	b.n	8003682 <USB_EPStartXfer+0x5a6>
 8003828:	2b3e      	cmp	r3, #62	@ 0x3e
 800382a:	d809      	bhi.n	8003840 <USB_EPStartXfer+0x764>
 800382c:	0859      	lsrs	r1, r3, #1
 800382e:	f013 0f01 	tst.w	r3, #1
 8003832:	d000      	beq.n	8003836 <USB_EPStartXfer+0x75a>
 8003834:	3101      	adds	r1, #1
 8003836:	028b      	lsls	r3, r1, #10
 8003838:	b29b      	uxth	r3, r3
 800383a:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 800383e:	e479      	b.n	8003134 <USB_EPStartXfer+0x58>
 8003840:	0959      	lsrs	r1, r3, #5
 8003842:	f013 0f1f 	tst.w	r3, #31
 8003846:	d100      	bne.n	800384a <USB_EPStartXfer+0x76e>
 8003848:	3901      	subs	r1, #1
 800384a:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800384e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003852:	b29b      	uxth	r3, r3
 8003854:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8003858:	e46c      	b.n	8003134 <USB_EPStartXfer+0x58>
 800385a:	2a01      	cmp	r2, #1
 800385c:	f47f ac6a 	bne.w	8003134 <USB_EPStartXfer+0x58>
 8003860:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8003864:	b292      	uxth	r2, r2
 8003866:	442a      	add	r2, r5
 8003868:	7821      	ldrb	r1, [r4, #0]
 800386a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800386e:	b29b      	uxth	r3, r3
 8003870:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8003874:	e45e      	b.n	8003134 <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 8003876:	2001      	movs	r0, #1
 8003878:	e46d      	b.n	8003156 <USB_EPStartXfer+0x7a>

0800387a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800387a:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 800387c:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800387e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003882:	f500 6080 	add.w	r0, r0, #1024	@ 0x400

  for (i = n; i != 0U; i--)
 8003886:	e007      	b.n	8003898 <USB_ReadPMA+0x1e>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003888:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800388c:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800388e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003892:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8003894:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8003896:	3c01      	subs	r4, #1
 8003898:	2c00      	cmp	r4, #0
 800389a:	d1f5      	bne.n	8003888 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800389c:	f013 0f01 	tst.w	r3, #1
 80038a0:	d001      	beq.n	80038a6 <USB_ReadPMA+0x2c>
  {
    temp = *pdwVal;
 80038a2:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80038a4:	700b      	strb	r3, [r1, #0]
  }
}
 80038a6:	bc10      	pop	{r4}
 80038a8:	4770      	bx	lr

080038aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80038aa:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80038ac:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80038b0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80038b4:	b15b      	cbz	r3, 80038ce <USBD_CDC_EP0_RxReady+0x24>
 80038b6:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80038ba:	28ff      	cmp	r0, #255	@ 0xff
 80038bc:	d007      	beq.n	80038ce <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80038c4:	4621      	mov	r1, r4
 80038c6:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80038c8:	23ff      	movs	r3, #255	@ 0xff
 80038ca:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 80038ce:	2000      	movs	r0, #0
 80038d0:	bd10      	pop	{r4, pc}

080038d2 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80038d2:	2343      	movs	r3, #67	@ 0x43
 80038d4:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80038d6:	f240 0050 	movw	r0, #80	@ 0x50
 80038da:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80038de:	4770      	bx	lr

080038e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80038e0:	2343      	movs	r3, #67	@ 0x43
 80038e2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80038e4:	f240 0094 	movw	r0, #148	@ 0x94
 80038e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80038ec:	4770      	bx	lr

080038ee <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80038ee:	2343      	movs	r3, #67	@ 0x43
 80038f0:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80038f2:	f240 000c 	movw	r0, #12
 80038f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80038fa:	4770      	bx	lr

080038fc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80038fc:	230a      	movs	r3, #10
 80038fe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003900:	f240 1010 	movw	r0, #272	@ 0x110
 8003904:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003908:	4770      	bx	lr

0800390a <USBD_CDC_DataOut>:
{
 800390a:	b538      	push	{r3, r4, r5, lr}
 800390c:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800390e:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003912:	f001 f8d2 	bl	8004aba <USBD_LL_GetRxDataSize>
 8003916:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 800391a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800391e:	b14b      	cbz	r3, 8003934 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003920:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800392a:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800392e:	4798      	blx	r3
    return USBD_OK;
 8003930:	2000      	movs	r0, #0
}
 8003932:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003934:	2002      	movs	r0, #2
 8003936:	e7fc      	b.n	8003932 <USBD_CDC_DataOut+0x28>

08003938 <USBD_CDC_DataIn>:
{
 8003938:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800393a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800393e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0
  if (pdev->pClassData != NULL)
 8003942:	b1f2      	cbz	r2, 8003982 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003944:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003948:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	b14b      	cbz	r3, 8003964 <USBD_CDC_DataIn+0x2c>
 8003950:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8003954:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8003958:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 800395a:	fbb3 fcf4 	udiv	ip, r3, r4
 800395e:	fb04 331c 	mls	r3, r4, ip, r3
 8003962:	b123      	cbz	r3, 800396e <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    return USBD_OK;
 800396a:	2000      	movs	r0, #0
}
 800396c:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800396e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003972:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800397a:	4613      	mov	r3, r2
 800397c:	f001 f88d 	bl	8004a9a <USBD_LL_Transmit>
 8003980:	e7f3      	b.n	800396a <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003982:	2002      	movs	r0, #2
 8003984:	e7f2      	b.n	800396c <USBD_CDC_DataIn+0x34>

08003986 <USBD_CDC_Setup>:
{
 8003986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003988:	b083      	sub	sp, #12
 800398a:	4606      	mov	r6, r0
 800398c:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800398e:	f8d0 72b8 	ldr.w	r7, [r0, #696]	@ 0x2b8
  uint8_t ifalt = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8003998:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800399c:	780b      	ldrb	r3, [r1, #0]
 800399e:	f013 0560 	ands.w	r5, r3, #96	@ 0x60
 80039a2:	d027      	beq.n	80039f4 <USBD_CDC_Setup+0x6e>
 80039a4:	2d20      	cmp	r5, #32
 80039a6:	d153      	bne.n	8003a50 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 80039a8:	88ca      	ldrh	r2, [r1, #6]
 80039aa:	b1da      	cbz	r2, 80039e4 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 80039ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039b0:	d00c      	beq.n	80039cc <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80039b2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4639      	mov	r1, r7
 80039ba:	7860      	ldrb	r0, [r4, #1]
 80039bc:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80039be:	88e2      	ldrh	r2, [r4, #6]
 80039c0:	4639      	mov	r1, r7
 80039c2:	4630      	mov	r0, r6
 80039c4:	f000 fdb0 	bl	8004528 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80039c8:	2500      	movs	r5, #0
 80039ca:	e044      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 80039cc:	784b      	ldrb	r3, [r1, #1]
 80039ce:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80039d2:	798b      	ldrb	r3, [r1, #6]
 80039d4:	f887 3201 	strb.w	r3, [r7, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80039d8:	88ca      	ldrh	r2, [r1, #6]
 80039da:	4639      	mov	r1, r7
 80039dc:	f000 fdb9 	bl	8004552 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80039e0:	2500      	movs	r5, #0
 80039e2:	e038      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80039e4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	7848      	ldrb	r0, [r1, #1]
 80039ee:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80039f0:	2500      	movs	r5, #0
 80039f2:	e030      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 80039f4:	784f      	ldrb	r7, [r1, #1]
 80039f6:	2f0a      	cmp	r7, #10
 80039f8:	d014      	beq.n	8003a24 <USBD_CDC_Setup+0x9e>
 80039fa:	2f0b      	cmp	r7, #11
 80039fc:	d020      	beq.n	8003a40 <USBD_CDC_Setup+0xba>
 80039fe:	b11f      	cbz	r7, 8003a08 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8003a00:	f000 fa80 	bl	8003f04 <USBD_CtlError>
          ret = USBD_FAIL;
 8003a04:	2502      	movs	r5, #2
          break;
 8003a06:	e026      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003a08:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d003      	beq.n	8003a18 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8003a10:	f000 fa78 	bl	8003f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8003a14:	2502      	movs	r5, #2
 8003a16:	e01e      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003a18:	2202      	movs	r2, #2
 8003a1a:	a901      	add	r1, sp, #4
 8003a1c:	f000 fd84 	bl	8004528 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003a20:	463d      	mov	r5, r7
 8003a22:	e018      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003a24:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d003      	beq.n	8003a34 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8003a2c:	f000 fa6a 	bl	8003f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8003a30:	2502      	movs	r5, #2
 8003a32:	e010      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003a34:	2201      	movs	r2, #1
 8003a36:	f10d 0107 	add.w	r1, sp, #7
 8003a3a:	f000 fd75 	bl	8004528 <USBD_CtlSendData>
 8003a3e:	e00a      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003a40:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d006      	beq.n	8003a56 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8003a48:	f000 fa5c 	bl	8003f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8003a4c:	2502      	movs	r5, #2
 8003a4e:	e002      	b.n	8003a56 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8003a50:	f000 fa58 	bl	8003f04 <USBD_CtlError>
      ret = USBD_FAIL;
 8003a54:	2502      	movs	r5, #2
}
 8003a56:	4628      	mov	r0, r5
 8003a58:	b003      	add	sp, #12
 8003a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a5c <USBD_CDC_DeInit>:
{
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003a60:	2181      	movs	r1, #129	@ 0x81
 8003a62:	f000 ffe3 	bl	8004a2c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003a66:	2500      	movs	r5, #0
 8003a68:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f000 ffdd 	bl	8004a2c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003a72:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003a76:	2182      	movs	r1, #130	@ 0x82
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f000 ffd7 	bl	8004a2c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003a7e:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8003a80:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003a84:	b14b      	cbz	r3, 8003a9a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003a86:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003a8e:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8003a92:	f001 f81d 	bl	8004ad0 <USBD_static_free>
    pdev->pClassData = NULL;
 8003a96:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	bd38      	pop	{r3, r4, r5, pc}

08003a9e <USBD_CDC_Init>:
{
 8003a9e:	b570      	push	{r4, r5, r6, lr}
 8003aa0:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003aa2:	7c03      	ldrb	r3, [r0, #16]
 8003aa4:	bbab      	cbnz	r3, 8003b12 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003aa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003aaa:	2202      	movs	r2, #2
 8003aac:	2181      	movs	r1, #129	@ 0x81
 8003aae:	f000 ffb2 	bl	8004a16 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003ab2:	2501      	movs	r5, #1
 8003ab4:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003ab6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003aba:	2202      	movs	r2, #2
 8003abc:	4629      	mov	r1, r5
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f000 ffa9 	bl	8004a16 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003ac4:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003ac8:	2308      	movs	r3, #8
 8003aca:	2203      	movs	r2, #3
 8003acc:	2182      	movs	r1, #130	@ 0x82
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 ffa1 	bl	8004a16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	6423      	str	r3, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003ad8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8003adc:	f000 fff3 	bl	8004ac6 <USBD_static_malloc>
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8003ae6:	b368      	cbz	r0, 8003b44 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003ae8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
    hcdc->RxState = 0U;
 8003af6:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003afa:	7c26      	ldrb	r6, [r4, #16]
 8003afc:	b9ce      	cbnz	r6, 8003b32 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003afe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b02:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8003b06:	2101      	movs	r1, #1
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f000 ffce 	bl	8004aaa <USBD_LL_PrepareReceive>
}
 8003b0e:	4630      	mov	r0, r6
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003b12:	2340      	movs	r3, #64	@ 0x40
 8003b14:	2202      	movs	r2, #2
 8003b16:	2181      	movs	r1, #129	@ 0x81
 8003b18:	f000 ff7d 	bl	8004a16 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b1c:	2501      	movs	r5, #1
 8003b1e:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b20:	2340      	movs	r3, #64	@ 0x40
 8003b22:	2202      	movs	r2, #2
 8003b24:	4629      	mov	r1, r5
 8003b26:	4620      	mov	r0, r4
 8003b28:	f000 ff75 	bl	8004a16 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003b2c:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
 8003b30:	e7ca      	b.n	8003ac8 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003b32:	2340      	movs	r3, #64	@ 0x40
 8003b34:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f000 ffb5 	bl	8004aaa <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003b40:	2600      	movs	r6, #0
 8003b42:	e7e4      	b.n	8003b0e <USBD_CDC_Init+0x70>
    ret = 1U;
 8003b44:	2601      	movs	r6, #1
 8003b46:	e7e2      	b.n	8003b0e <USBD_CDC_Init+0x70>

08003b48 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003b48:	b119      	cbz	r1, 8003b52 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003b4a:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8003b4e:	2000      	movs	r0, #0
 8003b50:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003b52:	2002      	movs	r0, #2
  }

  return ret;
}
 8003b54:	4770      	bx	lr

08003b56 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b56:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
 8003b5a:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8003b5e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
}
 8003b62:	2000      	movs	r0, #0
 8003b64:	4770      	bx	lr

08003b66 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b66:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->RxBuffer = pbuff;
 8003b6a:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return USBD_OK;
}
 8003b6e:	2000      	movs	r0, #0
 8003b70:	4770      	bx	lr

08003b72 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b72:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  if (pdev->pClassData != NULL)
 8003b76:	b19a      	cbz	r2, 8003ba0 <USBD_CDC_TransmitPacket+0x2e>
{
 8003b78:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8003b7a:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8003b7e:	b10b      	cbz	r3, 8003b84 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8003b80:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003b82:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003b8a:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8003b8e:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8003b96:	2181      	movs	r1, #129	@ 0x81
 8003b98:	f000 ff7f 	bl	8004a9a <USBD_LL_Transmit>
      return USBD_OK;
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e7f0      	b.n	8003b82 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8003ba0:	2002      	movs	r0, #2
}
 8003ba2:	4770      	bx	lr

08003ba4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ba4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003ba8:	b192      	cbz	r2, 8003bd0 <USBD_CDC_ReceivePacket+0x2c>
{
 8003baa:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003bac:	7c03      	ldrb	r3, [r0, #16]
 8003bae:	b943      	cbnz	r3, 8003bc2 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003bb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bb4:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8003bb8:	2101      	movs	r1, #1
 8003bba:	f000 ff76 	bl	8004aaa <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003bbe:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003bc0:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8003bc2:	2340      	movs	r3, #64	@ 0x40
 8003bc4:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8003bc8:	2101      	movs	r1, #1
 8003bca:	f000 ff6e 	bl	8004aaa <USBD_LL_PrepareReceive>
 8003bce:	e7f6      	b.n	8003bbe <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8003bd0:	2002      	movs	r0, #2
}
 8003bd2:	4770      	bx	lr

08003bd4 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003bd4:	b198      	cbz	r0, 8003bfe <USBD_Init+0x2a>
{
 8003bd6:	b508      	push	{r3, lr}
 8003bd8:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003bda:	f8d0 02b4 	ldr.w	r0, [r0, #692]	@ 0x2b4
 8003bde:	b110      	cbz	r0, 8003be6 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003be0:	2000      	movs	r0, #0
 8003be2:	f8c3 02b4 	str.w	r0, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003be6:	b109      	cbz	r1, 8003bec <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003be8:	f8c3 12b0 	str.w	r1, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003bec:	2101      	movs	r1, #1
 8003bee:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8003bf2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 feb2 	bl	800495e <USBD_LL_Init>

  return USBD_OK;
 8003bfa:	2000      	movs	r0, #0
}
 8003bfc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003bfe:	2002      	movs	r0, #2
}
 8003c00:	4770      	bx	lr

08003c02 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8003c02:	b510      	push	{r4, lr}
 8003c04:	4604      	mov	r4, r0
  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003c0c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	7901      	ldrb	r1, [r0, #4]
 8003c14:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 fef5 	bl	8004a06 <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f000 fee2 	bl	80049e6 <USBD_LL_DeInit>

  return USBD_OK;
}
 8003c22:	2000      	movs	r0, #0
 8003c24:	bd10      	pop	{r4, pc}

08003c26 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003c26:	b119      	cbz	r1, 8003c30 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003c28:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003c30:	2002      	movs	r0, #2
  }

  return status;
}
 8003c32:	4770      	bx	lr

08003c34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003c34:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003c36:	f000 fede 	bl	80049f6 <USBD_LL_Start>

  return USBD_OK;
}
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	bd08      	pop	{r3, pc}

08003c3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003c3e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003c40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003c44:	b12b      	cbz	r3, 8003c52 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4798      	blx	r3
 8003c4a:	b900      	cbnz	r0, 8003c4e <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003c4c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003c4e:	2002      	movs	r0, #2
 8003c50:	e7fc      	b.n	8003c4c <USBD_SetClassConfig+0xe>
 8003c52:	2002      	movs	r0, #2
 8003c54:	e7fa      	b.n	8003c4c <USBD_SetClassConfig+0xe>

08003c56 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003c56:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003c58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4798      	blx	r3

  return USBD_OK;
}
 8003c60:	2000      	movs	r0, #0
 8003c62:	bd08      	pop	{r3, pc}

08003c64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003c68:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	f000 f935 	bl	8003edc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003c78:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8003c7c:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003c80:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
 8003c84:	f001 031f 	and.w	r3, r1, #31
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d00e      	beq.n	8003caa <USBD_LL_SetupStage+0x46>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d011      	beq.n	8003cb4 <USBD_LL_SetupStage+0x50>
 8003c90:	b12b      	cbz	r3, 8003c9e <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003c92:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8003c96:	4620      	mov	r0, r4
 8003c98:	f000 fed0 	bl	8004a3c <USBD_LL_StallEP>
      break;
 8003c9c:	e003      	b.n	8003ca6 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 facf 	bl	8004244 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003caa:	4629      	mov	r1, r5
 8003cac:	4620      	mov	r0, r4
 8003cae:	f000 fafd 	bl	80042ac <USBD_StdItfReq>
      break;
 8003cb2:	e7f8      	b.n	8003ca6 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f000 fb28 	bl	800430c <USBD_StdEPReq>
      break;
 8003cbc:	e7f3      	b.n	8003ca6 <USBD_LL_SetupStage+0x42>

08003cbe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003cbe:	b538      	push	{r3, r4, r5, lr}
 8003cc0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	bb91      	cbnz	r1, 8003d2c <USBD_LL_DataOutStage+0x6e>
 8003cc6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003cc8:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8003ccc:	2a03      	cmp	r2, #3
 8003cce:	d003      	beq.n	8003cd8 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003cd0:	2a05      	cmp	r2, #5
 8003cd2:	d024      	beq.n	8003d1e <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	e033      	b.n	8003d40 <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 8003cd8:	f8d0 1160 	ldr.w	r1, [r0, #352]	@ 0x160
 8003cdc:	f8d0 2164 	ldr.w	r2, [r0, #356]	@ 0x164
 8003ce0:	4291      	cmp	r1, r2
 8003ce2:	d90d      	bls.n	8003d00 <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 8003ce4:	1a89      	subs	r1, r1, r2
 8003ce6:	f8c0 1160 	str.w	r1, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003cea:	428a      	cmp	r2, r1
 8003cec:	d906      	bls.n	8003cfc <USBD_LL_DataOutStage+0x3e>
 8003cee:	b28a      	uxth	r2, r1
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 fc3c 	bl	8004570 <USBD_CtlContinueRx>
  return USBD_OK;
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	e021      	b.n	8003d40 <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	e7f7      	b.n	8003cf0 <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003d00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	b11b      	cbz	r3, 8003d10 <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d08:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003d0c:	2a03      	cmp	r2, #3
 8003d0e:	d004      	beq.n	8003d1a <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 fc35 	bl	8004580 <USBD_CtlSendStatus>
  return USBD_OK;
 8003d16:	4628      	mov	r0, r5
 8003d18:	e012      	b.n	8003d40 <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 8003d1a:	4798      	blx	r3
 8003d1c:	e7f8      	b.n	8003d10 <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003d24:	f000 fe8a 	bl	8004a3c <USBD_LL_StallEP>
  return USBD_OK;
 8003d28:	4628      	mov	r0, r5
 8003d2a:	e009      	b.n	8003d40 <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003d2c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	b133      	cbz	r3, 8003d42 <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d34:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003d38:	2a03      	cmp	r2, #3
 8003d3a:	d104      	bne.n	8003d46 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8003d3c:	4798      	blx	r3
  return USBD_OK;
 8003d3e:	2000      	movs	r0, #0
}
 8003d40:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003d42:	2002      	movs	r0, #2
 8003d44:	e7fc      	b.n	8003d40 <USBD_LL_DataOutStage+0x82>
 8003d46:	2002      	movs	r0, #2
 8003d48:	e7fa      	b.n	8003d40 <USBD_LL_DataOutStage+0x82>

08003d4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003d4a:	b538      	push	{r3, r4, r5, lr}
 8003d4c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003d4e:	460d      	mov	r5, r1
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d153      	bne.n	8003dfc <USBD_LL_DataInStage+0xb2>
 8003d54:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003d56:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8003d5a:	2a02      	cmp	r2, #2
 8003d5c:	d00c      	beq.n	8003d78 <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d5e:	2a04      	cmp	r2, #4
 8003d60:	d000      	beq.n	8003d64 <USBD_LL_DataInStage+0x1a>
 8003d62:	b91a      	cbnz	r2, 8003d6c <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003d64:	2180      	movs	r1, #128	@ 0x80
 8003d66:	4620      	mov	r0, r4
 8003d68:	f000 fe68 	bl	8004a3c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003d6c:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d03e      	beq.n	8003df2 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003d74:	4628      	mov	r0, r5
}
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003d78:	6a02      	ldr	r2, [r0, #32]
 8003d7a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8003d7c:	428a      	cmp	r2, r1
 8003d7e:	d81b      	bhi.n	8003db8 <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003d80:	69c2      	ldr	r2, [r0, #28]
 8003d82:	fbb2 f3f1 	udiv	r3, r2, r1
 8003d86:	fb01 2313 	mls	r3, r1, r3, r2
 8003d8a:	b92b      	cbnz	r3, 8003d98 <USBD_LL_DataInStage+0x4e>
 8003d8c:	4291      	cmp	r1, r2
 8003d8e:	d803      	bhi.n	8003d98 <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 8003d90:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d31c      	bcc.n	8003dd2 <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d98:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	b11b      	cbz	r3, 8003da8 <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003da0:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003da4:	2a03      	cmp	r2, #3
 8003da6:	d021      	beq.n	8003dec <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 8003da8:	2180      	movs	r1, #128	@ 0x80
 8003daa:	4620      	mov	r0, r4
 8003dac:	f000 fe46 	bl	8004a3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003db0:	4620      	mov	r0, r4
 8003db2:	f000 fbf0 	bl	8004596 <USBD_CtlReceiveStatus>
 8003db6:	e7d9      	b.n	8003d6c <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 8003db8:	1a52      	subs	r2, r2, r1
 8003dba:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003dbc:	b292      	uxth	r2, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f000 fbbf 	bl	8004542 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f000 fe6d 	bl	8004aaa <USBD_LL_PrepareReceive>
 8003dd0:	e7cc      	b.n	8003d6c <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	f000 fbb4 	bl	8004542 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003de0:	460b      	mov	r3, r1
 8003de2:	460a      	mov	r2, r1
 8003de4:	4620      	mov	r0, r4
 8003de6:	f000 fe60 	bl	8004aaa <USBD_LL_PrepareReceive>
 8003dea:	e7bf      	b.n	8003d6c <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 8003dec:	4620      	mov	r0, r4
 8003dee:	4798      	blx	r3
 8003df0:	e7da      	b.n	8003da8 <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8003df8:	4628      	mov	r0, r5
 8003dfa:	e7bc      	b.n	8003d76 <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003dfc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	b133      	cbz	r3, 8003e12 <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003e04:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003e08:	2a03      	cmp	r2, #3
 8003e0a:	d104      	bne.n	8003e16 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 8003e0c:	4798      	blx	r3
  return USBD_OK;
 8003e0e:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003e10:	e7b1      	b.n	8003d76 <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 8003e12:	2002      	movs	r0, #2
 8003e14:	e7af      	b.n	8003d76 <USBD_LL_DataInStage+0x2c>
 8003e16:	2002      	movs	r0, #2
 8003e18:	e7ad      	b.n	8003d76 <USBD_LL_DataInStage+0x2c>

08003e1a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003e1a:	b570      	push	{r4, r5, r6, lr}
 8003e1c:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e1e:	2340      	movs	r3, #64	@ 0x40
 8003e20:	2200      	movs	r2, #0
 8003e22:	4611      	mov	r1, r2
 8003e24:	f000 fdf7 	bl	8004a16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003e28:	2501      	movs	r5, #1
 8003e2a:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e2e:	2640      	movs	r6, #64	@ 0x40
 8003e30:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e34:	4633      	mov	r3, r6
 8003e36:	2200      	movs	r2, #0
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f000 fdeb 	bl	8004a16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003e40:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e42:	6266      	str	r6, [r4, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e44:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8003e4e:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003e50:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4

  if (pdev->pClassData)
 8003e54:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8003e58:	b12b      	cbz	r3, 8003e66 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003e5a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2100      	movs	r1, #0
 8003e62:	4620      	mov	r0, r4
 8003e64:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003e66:	2000      	movs	r0, #0
 8003e68:	bd70      	pop	{r4, r5, r6, pc}

08003e6a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003e6a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	4770      	bx	lr

08003e70 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003e70:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e74:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003e78:	2304      	movs	r3, #4
 8003e7a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8003e7e:	2000      	movs	r0, #0
 8003e80:	4770      	bx	lr

08003e82 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003e82:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d001      	beq.n	8003e8e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003e8e:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8003e92:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8003e96:	e7f8      	b.n	8003e8a <USBD_LL_Resume+0x8>

08003e98 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003e98:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e9a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d001      	beq.n	8003ea6 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8003ea6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f8      	beq.n	8003ea2 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8003eb0:	4798      	blx	r3
 8003eb2:	e7f6      	b.n	8003ea2 <USBD_LL_SOF+0xa>

08003eb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003eb4:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8003eb6:	2000      	movs	r0, #0

  while (*buf != '\0')
 8003eb8:	e002      	b.n	8003ec0 <USBD_GetLen+0xc>
  {
    len++;
 8003eba:	3001      	adds	r0, #1
 8003ebc:	b2c0      	uxtb	r0, r0
    buf++;
 8003ebe:	3301      	adds	r3, #1
  while (*buf != '\0')
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	d1f9      	bne.n	8003eba <USBD_GetLen+0x6>
  }

  return len;
}
 8003ec6:	4770      	bx	lr

08003ec8 <USBD_SetFeature>:
{
 8003ec8:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003eca:	884b      	ldrh	r3, [r1, #2]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d000      	beq.n	8003ed2 <USBD_SetFeature+0xa>
}
 8003ed0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8003ed2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8003ed6:	f000 fb53 	bl	8004580 <USBD_CtlSendStatus>
}
 8003eda:	e7f9      	b.n	8003ed0 <USBD_SetFeature+0x8>

08003edc <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003edc:	780b      	ldrb	r3, [r1, #0]
 8003ede:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003ee0:	784b      	ldrb	r3, [r1, #1]
 8003ee2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003ee4:	788b      	ldrb	r3, [r1, #2]
 8003ee6:	78ca      	ldrb	r2, [r1, #3]
 8003ee8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003eec:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003eee:	790b      	ldrb	r3, [r1, #4]
 8003ef0:	794a      	ldrb	r2, [r1, #5]
 8003ef2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ef6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003ef8:	798b      	ldrb	r3, [r1, #6]
 8003efa:	79ca      	ldrb	r2, [r1, #7]
 8003efc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f00:	80c3      	strh	r3, [r0, #6]
}
 8003f02:	4770      	bx	lr

08003f04 <USBD_CtlError>:
{
 8003f04:	b510      	push	{r4, lr}
 8003f06:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003f08:	2180      	movs	r1, #128	@ 0x80
 8003f0a:	f000 fd97 	bl	8004a3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4620      	mov	r0, r4
 8003f12:	f000 fd93 	bl	8004a3c <USBD_LL_StallEP>
}
 8003f16:	bd10      	pop	{r4, pc}

08003f18 <USBD_GetDescriptor>:
{
 8003f18:	b530      	push	{r4, r5, lr}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003f26:	884a      	ldrh	r2, [r1, #2]
 8003f28:	0a13      	lsrs	r3, r2, #8
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	2b06      	cmp	r3, #6
 8003f2e:	f200 80a4 	bhi.w	800407a <USBD_GetDescriptor+0x162>
 8003f32:	e8df f003 	tbb	[pc, r3]
 8003f36:	1804      	.short	0x1804
 8003f38:	86a2a22c 	.word	0x86a2a22c
 8003f3c:	93          	.byte	0x93
 8003f3d:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003f3e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f10d 0106 	add.w	r1, sp, #6
 8003f48:	7c00      	ldrb	r0, [r0, #16]
 8003f4a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003f4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003f50:	b11a      	cbz	r2, 8003f5a <USBD_GetDescriptor+0x42>
 8003f52:	88e3      	ldrh	r3, [r4, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 8094 	bne.w	8004082 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8003f5a:	88e3      	ldrh	r3, [r4, #6]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 809a 	beq.w	8004096 <USBD_GetDescriptor+0x17e>
}
 8003f62:	b003      	add	sp, #12
 8003f64:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f66:	7c03      	ldrb	r3, [r0, #16]
 8003f68:	b943      	cbnz	r3, 8003f7c <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003f6a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	f10d 0006 	add.w	r0, sp, #6
 8003f74:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003f76:	2302      	movs	r3, #2
 8003f78:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003f7a:	e7e7      	b.n	8003f4c <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003f7c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	f10d 0006 	add.w	r0, sp, #6
 8003f86:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003f8c:	e7de      	b.n	8003f4c <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	2a05      	cmp	r2, #5
 8003f92:	d852      	bhi.n	800403a <USBD_GetDescriptor+0x122>
 8003f94:	e8df f002 	tbb	[pc, r2]
 8003f98:	2a1d1003 	.word	0x2a1d1003
 8003f9c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003f9e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	b123      	cbz	r3, 8003fb0 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003fa6:	f10d 0106 	add.w	r1, sp, #6
 8003faa:	7c00      	ldrb	r0, [r0, #16]
 8003fac:	4798      	blx	r3
  if (err != 0U)
 8003fae:	e7cd      	b.n	8003f4c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	f7ff ffa7 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 8003fb6:	e7d4      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003fb8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	b123      	cbz	r3, 8003fca <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003fc0:	f10d 0106 	add.w	r1, sp, #6
 8003fc4:	7c00      	ldrb	r0, [r0, #16]
 8003fc6:	4798      	blx	r3
  if (err != 0U)
 8003fc8:	e7c0      	b.n	8003f4c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003fca:	4621      	mov	r1, r4
 8003fcc:	f7ff ff9a 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 8003fd0:	e7c7      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003fd2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	b123      	cbz	r3, 8003fe4 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003fda:	f10d 0106 	add.w	r1, sp, #6
 8003fde:	7c00      	ldrb	r0, [r0, #16]
 8003fe0:	4798      	blx	r3
  if (err != 0U)
 8003fe2:	e7b3      	b.n	8003f4c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	f7ff ff8d 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 8003fea:	e7ba      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003fec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	b123      	cbz	r3, 8003ffe <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003ff4:	f10d 0106 	add.w	r1, sp, #6
 8003ff8:	7c00      	ldrb	r0, [r0, #16]
 8003ffa:	4798      	blx	r3
  if (err != 0U)
 8003ffc:	e7a6      	b.n	8003f4c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003ffe:	4621      	mov	r1, r4
 8004000:	f7ff ff80 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 8004004:	e7ad      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004006:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	b123      	cbz	r3, 8004018 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800400e:	f10d 0106 	add.w	r1, sp, #6
 8004012:	7c00      	ldrb	r0, [r0, #16]
 8004014:	4798      	blx	r3
  if (err != 0U)
 8004016:	e799      	b.n	8003f4c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004018:	4621      	mov	r1, r4
 800401a:	f7ff ff73 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 800401e:	e7a0      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004020:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	b123      	cbz	r3, 8004032 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004028:	f10d 0106 	add.w	r1, sp, #6
 800402c:	7c00      	ldrb	r0, [r0, #16]
 800402e:	4798      	blx	r3
  if (err != 0U)
 8004030:	e78c      	b.n	8003f4c <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004032:	4621      	mov	r1, r4
 8004034:	f7ff ff66 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 8004038:	e793      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 800403a:	4621      	mov	r1, r4
 800403c:	f7ff ff62 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 8004040:	e78f      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004042:	7c03      	ldrb	r3, [r0, #16]
 8004044:	b933      	cbnz	r3, 8004054 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004046:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800404a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404c:	f10d 0006 	add.w	r0, sp, #6
 8004050:	4798      	blx	r3
  if (err != 0U)
 8004052:	e77b      	b.n	8003f4c <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004054:	4621      	mov	r1, r4
 8004056:	f7ff ff55 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 800405a:	e782      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800405c:	7c03      	ldrb	r3, [r0, #16]
 800405e:	b943      	cbnz	r3, 8004072 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004060:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	f10d 0006 	add.w	r0, sp, #6
 800406a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800406c:	2307      	movs	r3, #7
 800406e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004070:	e76c      	b.n	8003f4c <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004072:	4621      	mov	r1, r4
 8004074:	f7ff ff46 	bl	8003f04 <USBD_CtlError>
  if (err != 0U)
 8004078:	e773      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 800407a:	4621      	mov	r1, r4
 800407c:	f7ff ff42 	bl	8003f04 <USBD_CtlError>
    return;
 8004080:	e76f      	b.n	8003f62 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8004082:	429a      	cmp	r2, r3
 8004084:	bf28      	it	cs
 8004086:	461a      	movcs	r2, r3
 8004088:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800408c:	4601      	mov	r1, r0
 800408e:	4628      	mov	r0, r5
 8004090:	f000 fa4a 	bl	8004528 <USBD_CtlSendData>
 8004094:	e761      	b.n	8003f5a <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8004096:	4628      	mov	r0, r5
 8004098:	f000 fa72 	bl	8004580 <USBD_CtlSendStatus>
 800409c:	e761      	b.n	8003f62 <USBD_GetDescriptor+0x4a>

0800409e <USBD_SetAddress>:
{
 800409e:	b538      	push	{r3, r4, r5, lr}
 80040a0:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80040a2:	888b      	ldrh	r3, [r1, #4]
 80040a4:	b9f3      	cbnz	r3, 80040e4 <USBD_SetAddress+0x46>
 80040a6:	88cb      	ldrh	r3, [r1, #6]
 80040a8:	b9e3      	cbnz	r3, 80040e4 <USBD_SetAddress+0x46>
 80040aa:	884b      	ldrh	r3, [r1, #2]
 80040ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80040ae:	d819      	bhi.n	80040e4 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80040b0:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040b4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d00c      	beq.n	80040d6 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80040bc:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80040c0:	4629      	mov	r1, r5
 80040c2:	f000 fce2 	bl	8004a8a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80040c6:	4620      	mov	r0, r4
 80040c8:	f000 fa5a 	bl	8004580 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80040cc:	b135      	cbz	r5, 80040dc <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80040ce:	2302      	movs	r3, #2
 80040d0:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80040d4:	e009      	b.n	80040ea <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80040d6:	f7ff ff15 	bl	8003f04 <USBD_CtlError>
 80040da:	e006      	b.n	80040ea <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80040dc:	2301      	movs	r3, #1
 80040de:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80040e2:	e002      	b.n	80040ea <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff ff0d 	bl	8003f04 <USBD_CtlError>
}
 80040ea:	bd38      	pop	{r3, r4, r5, pc}

080040ec <USBD_SetConfig>:
{
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4604      	mov	r4, r0
 80040f0:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80040f2:	7889      	ldrb	r1, [r1, #2]
 80040f4:	f240 13d0 	movw	r3, #464	@ 0x1d0
 80040f8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80040fc:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80040fe:	2901      	cmp	r1, #1
 8004100:	d811      	bhi.n	8004126 <USBD_SetConfig+0x3a>
    switch (pdev->dev_state)
 8004102:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004106:	2b02      	cmp	r3, #2
 8004108:	d011      	beq.n	800412e <USBD_SetConfig+0x42>
 800410a:	2b03      	cmp	r3, #3
 800410c:	d024      	beq.n	8004158 <USBD_SetConfig+0x6c>
        USBD_CtlError(pdev, req);
 800410e:	4629      	mov	r1, r5
 8004110:	f7ff fef8 	bl	8003f04 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004114:	f240 13d0 	movw	r3, #464	@ 0x1d0
 8004118:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800411c:	7819      	ldrb	r1, [r3, #0]
 800411e:	4620      	mov	r0, r4
 8004120:	f7ff fd99 	bl	8003c56 <USBD_ClrClassConfig>
        break;
 8004124:	e002      	b.n	800412c <USBD_SetConfig+0x40>
    USBD_CtlError(pdev, req);
 8004126:	4629      	mov	r1, r5
 8004128:	f7ff feec 	bl	8003f04 <USBD_CtlError>
}
 800412c:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 800412e:	b181      	cbz	r1, 8004152 <USBD_SetConfig+0x66>
          pdev->dev_config = cfgidx;
 8004130:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004132:	2303      	movs	r3, #3
 8004134:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004138:	f7ff fd81 	bl	8003c3e <USBD_SetClassConfig>
 800413c:	2802      	cmp	r0, #2
 800413e:	d003      	beq.n	8004148 <USBD_SetConfig+0x5c>
          USBD_CtlSendStatus(pdev);
 8004140:	4620      	mov	r0, r4
 8004142:	f000 fa1d 	bl	8004580 <USBD_CtlSendStatus>
 8004146:	e7f1      	b.n	800412c <USBD_SetConfig+0x40>
            USBD_CtlError(pdev, req);
 8004148:	4629      	mov	r1, r5
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff feda 	bl	8003f04 <USBD_CtlError>
            return;
 8004150:	e7ec      	b.n	800412c <USBD_SetConfig+0x40>
          USBD_CtlSendStatus(pdev);
 8004152:	f000 fa15 	bl	8004580 <USBD_CtlSendStatus>
 8004156:	e7e9      	b.n	800412c <USBD_SetConfig+0x40>
        if (cfgidx == 0U)
 8004158:	b1a1      	cbz	r1, 8004184 <USBD_SetConfig+0x98>
        else if (cfgidx != pdev->dev_config)
 800415a:	6843      	ldr	r3, [r0, #4]
 800415c:	4299      	cmp	r1, r3
 800415e:	d020      	beq.n	80041a2 <USBD_SetConfig+0xb6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004160:	b2d9      	uxtb	r1, r3
 8004162:	f7ff fd78 	bl	8003c56 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004166:	f240 13d0 	movw	r3, #464	@ 0x1d0
 800416a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800416e:	7819      	ldrb	r1, [r3, #0]
 8004170:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004172:	4620      	mov	r0, r4
 8004174:	f7ff fd63 	bl	8003c3e <USBD_SetClassConfig>
 8004178:	2802      	cmp	r0, #2
 800417a:	d00d      	beq.n	8004198 <USBD_SetConfig+0xac>
          USBD_CtlSendStatus(pdev);
 800417c:	4620      	mov	r0, r4
 800417e:	f000 f9ff 	bl	8004580 <USBD_CtlSendStatus>
 8004182:	e7d3      	b.n	800412c <USBD_SetConfig+0x40>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004184:	2302      	movs	r3, #2
 8004186:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800418a:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800418c:	f7ff fd63 	bl	8003c56 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004190:	4620      	mov	r0, r4
 8004192:	f000 f9f5 	bl	8004580 <USBD_CtlSendStatus>
 8004196:	e7c9      	b.n	800412c <USBD_SetConfig+0x40>
            USBD_CtlError(pdev, req);
 8004198:	4629      	mov	r1, r5
 800419a:	4620      	mov	r0, r4
 800419c:	f7ff feb2 	bl	8003f04 <USBD_CtlError>
            return;
 80041a0:	e7c4      	b.n	800412c <USBD_SetConfig+0x40>
          USBD_CtlSendStatus(pdev);
 80041a2:	f000 f9ed 	bl	8004580 <USBD_CtlSendStatus>
 80041a6:	e7c1      	b.n	800412c <USBD_SetConfig+0x40>

080041a8 <USBD_GetConfig>:
{
 80041a8:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80041aa:	88cb      	ldrh	r3, [r1, #6]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10a      	bne.n	80041c6 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 80041b0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d909      	bls.n	80041cc <USBD_GetConfig+0x24>
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d109      	bne.n	80041d0 <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80041bc:	2201      	movs	r2, #1
 80041be:	1d01      	adds	r1, r0, #4
 80041c0:	f000 f9b2 	bl	8004528 <USBD_CtlSendData>
        break;
 80041c4:	e001      	b.n	80041ca <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 80041c6:	f7ff fe9d 	bl	8003f04 <USBD_CtlError>
}
 80041ca:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	b913      	cbnz	r3, 80041d6 <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 80041d0:	f7ff fe98 	bl	8003f04 <USBD_CtlError>
}
 80041d4:	e7f9      	b.n	80041ca <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 80041d6:	4601      	mov	r1, r0
 80041d8:	2300      	movs	r3, #0
 80041da:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80041de:	2201      	movs	r2, #1
 80041e0:	f000 f9a2 	bl	8004528 <USBD_CtlSendData>
        break;
 80041e4:	e7f1      	b.n	80041ca <USBD_GetConfig+0x22>

080041e6 <USBD_GetStatus>:
{
 80041e6:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80041e8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80041ec:	3b01      	subs	r3, #1
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d812      	bhi.n	8004218 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80041f2:	88cb      	ldrh	r3, [r1, #6]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d10c      	bne.n	8004212 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80041f8:	2301      	movs	r3, #1
 80041fa:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80041fc:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8004200:	b10b      	cbz	r3, 8004206 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004202:	2303      	movs	r3, #3
 8004204:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004206:	2202      	movs	r2, #2
 8004208:	f100 010c 	add.w	r1, r0, #12
 800420c:	f000 f98c 	bl	8004528 <USBD_CtlSendData>
}
 8004210:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004212:	f7ff fe77 	bl	8003f04 <USBD_CtlError>
        break;
 8004216:	e7fb      	b.n	8004210 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004218:	f7ff fe74 	bl	8003f04 <USBD_CtlError>
}
 800421c:	e7f8      	b.n	8004210 <USBD_GetStatus+0x2a>

0800421e <USBD_ClrFeature>:
{
 800421e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004220:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004224:	3b01      	subs	r3, #1
 8004226:	2b02      	cmp	r3, #2
 8004228:	d809      	bhi.n	800423e <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800422a:	884b      	ldrh	r3, [r1, #2]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d000      	beq.n	8004232 <USBD_ClrFeature+0x14>
}
 8004230:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8004238:	f000 f9a2 	bl	8004580 <USBD_CtlSendStatus>
 800423c:	e7f8      	b.n	8004230 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800423e:	f7ff fe61 	bl	8003f04 <USBD_CtlError>
}
 8004242:	e7f5      	b.n	8004230 <USBD_ClrFeature+0x12>

08004244 <USBD_StdDevReq>:
{
 8004244:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004246:	780b      	ldrb	r3, [r1, #0]
 8004248:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800424c:	2b20      	cmp	r3, #32
 800424e:	d005      	beq.n	800425c <USBD_StdDevReq+0x18>
 8004250:	2b40      	cmp	r3, #64	@ 0x40
 8004252:	d003      	beq.n	800425c <USBD_StdDevReq+0x18>
 8004254:	b143      	cbz	r3, 8004268 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8004256:	f7ff fe55 	bl	8003f04 <USBD_CtlError>
      break;
 800425a:	e003      	b.n	8004264 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 800425c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	4798      	blx	r3
}
 8004264:	2000      	movs	r0, #0
 8004266:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8004268:	784b      	ldrb	r3, [r1, #1]
 800426a:	2b09      	cmp	r3, #9
 800426c:	d81b      	bhi.n	80042a6 <USBD_StdDevReq+0x62>
 800426e:	e8df f003 	tbb	[pc, r3]
 8004272:	1711      	.short	0x1711
 8004274:	081a141a 	.word	0x081a141a
 8004278:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 800427c:	f7ff fe4c 	bl	8003f18 <USBD_GetDescriptor>
          break;
 8004280:	e7f0      	b.n	8004264 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8004282:	f7ff ff0c 	bl	800409e <USBD_SetAddress>
          break;
 8004286:	e7ed      	b.n	8004264 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8004288:	f7ff ff30 	bl	80040ec <USBD_SetConfig>
          break;
 800428c:	e7ea      	b.n	8004264 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 800428e:	f7ff ff8b 	bl	80041a8 <USBD_GetConfig>
          break;
 8004292:	e7e7      	b.n	8004264 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8004294:	f7ff ffa7 	bl	80041e6 <USBD_GetStatus>
          break;
 8004298:	e7e4      	b.n	8004264 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 800429a:	f7ff fe15 	bl	8003ec8 <USBD_SetFeature>
          break;
 800429e:	e7e1      	b.n	8004264 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 80042a0:	f7ff ffbd 	bl	800421e <USBD_ClrFeature>
          break;
 80042a4:	e7de      	b.n	8004264 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 80042a6:	f7ff fe2d 	bl	8003f04 <USBD_CtlError>
          break;
 80042aa:	e7db      	b.n	8004264 <USBD_StdDevReq+0x20>

080042ac <USBD_StdItfReq>:
{
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4605      	mov	r5, r0
 80042b0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042b2:	780b      	ldrb	r3, [r1, #0]
 80042b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d006      	beq.n	80042ca <USBD_StdItfReq+0x1e>
 80042bc:	2b40      	cmp	r3, #64	@ 0x40
 80042be:	d004      	beq.n	80042ca <USBD_StdItfReq+0x1e>
 80042c0:	b11b      	cbz	r3, 80042ca <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80042c2:	f7ff fe1f 	bl	8003f04 <USBD_CtlError>
}
 80042c6:	2000      	movs	r0, #0
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80042ca:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80042ce:	3b01      	subs	r3, #1
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d816      	bhi.n	8004302 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80042d4:	7923      	ldrb	r3, [r4, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d80e      	bhi.n	80042f8 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80042da:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	4621      	mov	r1, r4
 80042e2:	4628      	mov	r0, r5
 80042e4:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80042e6:	88e3      	ldrh	r3, [r4, #6]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ec      	bne.n	80042c6 <USBD_StdItfReq+0x1a>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d1ea      	bne.n	80042c6 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 80042f0:	4628      	mov	r0, r5
 80042f2:	f000 f945 	bl	8004580 <USBD_CtlSendStatus>
 80042f6:	e7e6      	b.n	80042c6 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 80042f8:	4621      	mov	r1, r4
 80042fa:	4628      	mov	r0, r5
 80042fc:	f7ff fe02 	bl	8003f04 <USBD_CtlError>
 8004300:	e7e1      	b.n	80042c6 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8004302:	4621      	mov	r1, r4
 8004304:	4628      	mov	r0, r5
 8004306:	f7ff fdfd 	bl	8003f04 <USBD_CtlError>
          break;
 800430a:	e7dc      	b.n	80042c6 <USBD_StdItfReq+0x1a>

0800430c <USBD_StdEPReq>:
{
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8004310:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004312:	780c      	ldrb	r4, [r1, #0]
 8004314:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8004318:	2c20      	cmp	r4, #32
 800431a:	d007      	beq.n	800432c <USBD_StdEPReq+0x20>
 800431c:	b2da      	uxtb	r2, r3
 800431e:	2c40      	cmp	r4, #64	@ 0x40
 8004320:	d004      	beq.n	800432c <USBD_StdEPReq+0x20>
 8004322:	b15c      	cbz	r4, 800433c <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8004324:	f7ff fdee 	bl	8003f04 <USBD_CtlError>
  return ret;
 8004328:	2400      	movs	r4, #0
      break;
 800432a:	e005      	b.n	8004338 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 800432c:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4628      	mov	r0, r5
 8004334:	4798      	blx	r3
  return ret;
 8004336:	2400      	movs	r4, #0
}
 8004338:	4620      	mov	r0, r4
 800433a:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 800433c:	2c20      	cmp	r4, #32
 800433e:	d009      	beq.n	8004354 <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 8004340:	784e      	ldrb	r6, [r1, #1]
 8004342:	2e01      	cmp	r6, #1
 8004344:	d033      	beq.n	80043ae <USBD_StdEPReq+0xa2>
 8004346:	2e03      	cmp	r6, #3
 8004348:	d00a      	beq.n	8004360 <USBD_StdEPReq+0x54>
 800434a:	2e00      	cmp	r6, #0
 800434c:	d055      	beq.n	80043fa <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 800434e:	f7ff fdd9 	bl	8003f04 <USBD_CtlError>
          break;
 8004352:	e7f1      	b.n	8004338 <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004354:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	4798      	blx	r3
 800435c:	4604      	mov	r4, r0
        return ret;
 800435e:	e7eb      	b.n	8004338 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8004360:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004364:	2b02      	cmp	r3, #2
 8004366:	d004      	beq.n	8004372 <USBD_StdEPReq+0x66>
 8004368:	2b03      	cmp	r3, #3
 800436a:	d011      	beq.n	8004390 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 800436c:	f7ff fdca 	bl	8003f04 <USBD_CtlError>
              break;
 8004370:	e7e2      	b.n	8004338 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004372:	b10a      	cbz	r2, 8004378 <USBD_StdEPReq+0x6c>
 8004374:	2a80      	cmp	r2, #128	@ 0x80
 8004376:	d103      	bne.n	8004380 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 8004378:	4628      	mov	r0, r5
 800437a:	f7ff fdc3 	bl	8003f04 <USBD_CtlError>
 800437e:	e7db      	b.n	8004338 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8004380:	4611      	mov	r1, r2
 8004382:	f000 fb5b 	bl	8004a3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004386:	2180      	movs	r1, #128	@ 0x80
 8004388:	4628      	mov	r0, r5
 800438a:	f000 fb57 	bl	8004a3c <USBD_LL_StallEP>
 800438e:	e7d3      	b.n	8004338 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004390:	884b      	ldrh	r3, [r1, #2]
 8004392:	b923      	cbnz	r3, 800439e <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 8004394:	b11a      	cbz	r2, 800439e <USBD_StdEPReq+0x92>
 8004396:	2a80      	cmp	r2, #128	@ 0x80
 8004398:	d001      	beq.n	800439e <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800439a:	88cb      	ldrh	r3, [r1, #6]
 800439c:	b11b      	cbz	r3, 80043a6 <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 f8ee 	bl	8004580 <USBD_CtlSendStatus>
              break;
 80043a4:	e7c8      	b.n	8004338 <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 80043a6:	4611      	mov	r1, r2
 80043a8:	f000 fb48 	bl	8004a3c <USBD_LL_StallEP>
 80043ac:	e7f7      	b.n	800439e <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 80043ae:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d004      	beq.n	80043c0 <USBD_StdEPReq+0xb4>
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d011      	beq.n	80043de <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 80043ba:	f7ff fda3 	bl	8003f04 <USBD_CtlError>
              break;
 80043be:	e7bb      	b.n	8004338 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80043c0:	b10a      	cbz	r2, 80043c6 <USBD_StdEPReq+0xba>
 80043c2:	2a80      	cmp	r2, #128	@ 0x80
 80043c4:	d103      	bne.n	80043ce <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 80043c6:	4628      	mov	r0, r5
 80043c8:	f7ff fd9c 	bl	8003f04 <USBD_CtlError>
 80043cc:	e7b4      	b.n	8004338 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 80043ce:	4611      	mov	r1, r2
 80043d0:	f000 fb34 	bl	8004a3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80043d4:	2180      	movs	r1, #128	@ 0x80
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 fb30 	bl	8004a3c <USBD_LL_StallEP>
 80043dc:	e7ac      	b.n	8004338 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043de:	884b      	ldrh	r3, [r1, #2]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1a9      	bne.n	8004338 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80043e4:	f012 0f7f 	tst.w	r2, #127	@ 0x7f
 80043e8:	d103      	bne.n	80043f2 <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 f8c8 	bl	8004580 <USBD_CtlSendStatus>
 80043f0:	e7a2      	b.n	8004338 <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80043f2:	4611      	mov	r1, r2
 80043f4:	f000 fb2a 	bl	8004a4c <USBD_LL_ClearStallEP>
 80043f8:	e7f7      	b.n	80043ea <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 80043fa:	f890 029c 	ldrb.w	r0, [r0, #668]	@ 0x29c
 80043fe:	2802      	cmp	r0, #2
 8004400:	d006      	beq.n	8004410 <USBD_StdEPReq+0x104>
 8004402:	2803      	cmp	r0, #3
 8004404:	d029      	beq.n	800445a <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 8004406:	4628      	mov	r0, r5
 8004408:	f7ff fd7c 	bl	8003f04 <USBD_CtlError>
  return ret;
 800440c:	4634      	mov	r4, r6
              break;
 800440e:	e793      	b.n	8004338 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004410:	b10a      	cbz	r2, 8004416 <USBD_StdEPReq+0x10a>
 8004412:	2a80      	cmp	r2, #128	@ 0x80
 8004414:	d113      	bne.n	800443e <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004416:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800441a:	d115      	bne.n	8004448 <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800441c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004420:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004424:	0091      	lsls	r1, r2, #2
 8004426:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800442a:	4429      	add	r1, r5
 800442c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800442e:	2300      	movs	r3, #0
 8004430:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004432:	2202      	movs	r2, #2
 8004434:	4628      	mov	r0, r5
 8004436:	f000 f877 	bl	8004528 <USBD_CtlSendData>
  return ret;
 800443a:	4634      	mov	r4, r6
              break;
 800443c:	e77c      	b.n	8004338 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 800443e:	4628      	mov	r0, r5
 8004440:	f7ff fd60 	bl	8003f04 <USBD_CtlError>
  return ret;
 8004444:	4634      	mov	r4, r6
                break;
 8004446:	e777      	b.n	8004338 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004448:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800444c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004450:	0091      	lsls	r1, r2, #2
 8004452:	3110      	adds	r1, #16
 8004454:	4429      	add	r1, r5
 8004456:	3104      	adds	r1, #4
 8004458:	e7e9      	b.n	800442e <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 800445a:	b25b      	sxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	db1f      	blt.n	80044a0 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004460:	f002 000f 	and.w	r0, r2, #15
 8004464:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004468:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800446c:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004470:	b320      	cbz	r0, 80044bc <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004472:	2b00      	cmp	r3, #0
 8004474:	db27      	blt.n	80044c6 <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004476:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800447a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800447e:	009c      	lsls	r4, r3, #2
 8004480:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8004484:	442c      	add	r4, r5
 8004486:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004488:	b10a      	cbz	r2, 800448e <USBD_StdEPReq+0x182>
 800448a:	2a80      	cmp	r2, #128	@ 0x80
 800448c:	d124      	bne.n	80044d8 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 800448e:	2300      	movs	r3, #0
 8004490:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004492:	2202      	movs	r2, #2
 8004494:	4621      	mov	r1, r4
 8004496:	4628      	mov	r0, r5
 8004498:	f000 f846 	bl	8004528 <USBD_CtlSendData>
  return ret;
 800449c:	4634      	mov	r4, r6
              break;
 800449e:	e74b      	b.n	8004338 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80044a0:	f002 000f 	and.w	r0, r2, #15
 80044a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044a8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80044ac:	6980      	ldr	r0, [r0, #24]
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d1df      	bne.n	8004472 <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7ff fd26 	bl	8003f04 <USBD_CtlError>
  return ret;
 80044b8:	4634      	mov	r4, r6
                  break;
 80044ba:	e73d      	b.n	8004338 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 80044bc:	4628      	mov	r0, r5
 80044be:	f7ff fd21 	bl	8003f04 <USBD_CtlError>
  return ret;
 80044c2:	4634      	mov	r4, r6
                  break;
 80044c4:	e738      	b.n	8004338 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80044c6:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 80044ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044ce:	009c      	lsls	r4, r3, #2
 80044d0:	3410      	adds	r4, #16
 80044d2:	442c      	add	r4, r5
 80044d4:	3404      	adds	r4, #4
 80044d6:	e7d7      	b.n	8004488 <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80044d8:	4611      	mov	r1, r2
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fabe 	bl	8004a5c <USBD_LL_IsStallEP>
 80044e0:	b110      	cbz	r0, 80044e8 <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 80044e2:	2301      	movs	r3, #1
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	e7d4      	b.n	8004492 <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	e7d1      	b.n	8004492 <USBD_StdEPReq+0x186>

080044ee <USBD_GetString>:
  if (desc != NULL)
 80044ee:	b1d0      	cbz	r0, 8004526 <USBD_GetString+0x38>
{
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	460d      	mov	r5, r1
 80044f4:	4616      	mov	r6, r2
 80044f6:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80044f8:	f7ff fcdc 	bl	8003eb4 <USBD_GetLen>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004504:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004506:	2303      	movs	r3, #3
 8004508:	706b      	strb	r3, [r5, #1]
 800450a:	2302      	movs	r3, #2
    while (*desc != '\0')
 800450c:	e007      	b.n	800451e <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 800450e:	3401      	adds	r4, #1
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8004516:	3302      	adds	r3, #2
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2100      	movs	r1, #0
 800451c:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 800451e:	7820      	ldrb	r0, [r4, #0]
 8004520:	2800      	cmp	r0, #0
 8004522:	d1f4      	bne.n	800450e <USBD_GetString+0x20>
}
 8004524:	bd70      	pop	{r4, r5, r6, pc}
 8004526:	4770      	bx	lr

08004528 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004528:	b508      	push	{r3, lr}
 800452a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800452c:	2202      	movs	r2, #2
 800452e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8004532:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8004534:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004536:	460a      	mov	r2, r1
 8004538:	2100      	movs	r1, #0
 800453a:	f000 faae 	bl	8004a9a <USBD_LL_Transmit>

  return USBD_OK;
}
 800453e:	2000      	movs	r0, #0
 8004540:	bd08      	pop	{r3, pc}

08004542 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004542:	b508      	push	{r3, lr}
 8004544:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004546:	460a      	mov	r2, r1
 8004548:	2100      	movs	r1, #0
 800454a:	f000 faa6 	bl	8004a9a <USBD_LL_Transmit>

  return USBD_OK;
}
 800454e:	2000      	movs	r0, #0
 8004550:	bd08      	pop	{r3, pc}

08004552 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004552:	b508      	push	{r3, lr}
 8004554:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004556:	2203      	movs	r2, #3
 8004558:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800455c:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004560:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004564:	460a      	mov	r2, r1
 8004566:	2100      	movs	r1, #0
 8004568:	f000 fa9f 	bl	8004aaa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800456c:	2000      	movs	r0, #0
 800456e:	bd08      	pop	{r3, pc}

08004570 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004570:	b508      	push	{r3, lr}
 8004572:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004574:	460a      	mov	r2, r1
 8004576:	2100      	movs	r1, #0
 8004578:	f000 fa97 	bl	8004aaa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800457c:	2000      	movs	r0, #0
 800457e:	bd08      	pop	{r3, pc}

08004580 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004580:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004582:	2304      	movs	r3, #4
 8004584:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004588:	2300      	movs	r3, #0
 800458a:	461a      	mov	r2, r3
 800458c:	4619      	mov	r1, r3
 800458e:	f000 fa84 	bl	8004a9a <USBD_LL_Transmit>

  return USBD_OK;
}
 8004592:	2000      	movs	r0, #0
 8004594:	bd08      	pop	{r3, pc}

08004596 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004596:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004598:	2305      	movs	r3, #5
 800459a:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800459e:	2300      	movs	r3, #0
 80045a0:	461a      	mov	r2, r3
 80045a2:	4619      	mov	r1, r3
 80045a4:	f000 fa81 	bl	8004aaa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80045a8:	2000      	movs	r0, #0
 80045aa:	bd08      	pop	{r3, pc}

080045ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80045ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80045ae:	2200      	movs	r2, #0
 80045b0:	f240 1160 	movw	r1, #352	@ 0x160
 80045b4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80045b8:	f240 10d4 	movw	r0, #468	@ 0x1d4
 80045bc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80045c0:	f7ff fb08 	bl	8003bd4 <USBD_Init>
 80045c4:	b9e8      	cbnz	r0, 8004602 <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80045c6:	f240 01d8 	movw	r1, #216	@ 0xd8
 80045ca:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80045ce:	f240 10d4 	movw	r0, #468	@ 0x1d4
 80045d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80045d6:	f7ff fb26 	bl	8003c26 <USBD_RegisterClass>
 80045da:	b9a8      	cbnz	r0, 8004608 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80045dc:	f240 111c 	movw	r1, #284	@ 0x11c
 80045e0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80045e4:	f240 10d4 	movw	r0, #468	@ 0x1d4
 80045e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80045ec:	f7ff faac 	bl	8003b48 <USBD_CDC_RegisterInterface>
 80045f0:	b968      	cbnz	r0, 800460e <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80045f2:	f240 10d4 	movw	r0, #468	@ 0x1d4
 80045f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80045fa:	f7ff fb1b 	bl	8003c34 <USBD_Start>
 80045fe:	b948      	cbnz	r0, 8004614 <MX_USB_DEVICE_Init+0x68>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004600:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004602:	f7fc f923 	bl	800084c <Error_Handler>
 8004606:	e7de      	b.n	80045c6 <MX_USB_DEVICE_Init+0x1a>
    Error_Handler();
 8004608:	f7fc f920 	bl	800084c <Error_Handler>
 800460c:	e7e6      	b.n	80045dc <MX_USB_DEVICE_Init+0x30>
    Error_Handler();
 800460e:	f7fc f91d 	bl	800084c <Error_Handler>
 8004612:	e7ee      	b.n	80045f2 <MX_USB_DEVICE_Init+0x46>
    Error_Handler();
 8004614:	f7fc f91a 	bl	800084c <Error_Handler>
}
 8004618:	e7f2      	b.n	8004600 <MX_USB_DEVICE_Init+0x54>

0800461a <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800461a:	2000      	movs	r0, #0
 800461c:	4770      	bx	lr

0800461e <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800461e:	2000      	movs	r0, #0
 8004620:	4770      	bx	lr

08004622 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004622:	b538      	push	{r3, r4, r5, lr}
 8004624:	4604      	mov	r4, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004626:	f240 15d4 	movw	r5, #468	@ 0x1d4
 800462a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800462e:	4601      	mov	r1, r0
 8004630:	4628      	mov	r0, r5
 8004632:	f7ff fa98 	bl	8003b66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004636:	4628      	mov	r0, r5
 8004638:	f7ff fab4 	bl	8003ba4 <USBD_CDC_ReceivePacket>
  //my code begin
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//LED ON
 800463c:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8004640:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8004644:	2200      	movs	r2, #0
 8004646:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800464a:	4628      	mov	r0, r5
 800464c:	f7fc fd90 	bl	8001170 <HAL_GPIO_WritePin>
							  (Buf[1]<<8) +
							  Buf[0];//32bit Word contains 4 Bytes
		flashWord(dataToFlash);
	}else
	{
		messageHandler(Buf);
 8004650:	4620      	mov	r0, r4
 8004652:	f7fb ffe7 	bl	8000624 <messageHandler>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);//LED OFF
 8004656:	2201      	movs	r2, #1
 8004658:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800465c:	4628      	mov	r0, r5
 800465e:	f7fc fd87 	bl	8001170 <HAL_GPIO_WritePin>
  //my code end
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004662:	2000      	movs	r0, #0
 8004664:	bd38      	pop	{r3, r4, r5, pc}

08004666 <CDC_Init_FS>:
{
 8004666:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004668:	f240 14d4 	movw	r4, #468	@ 0x1d4
 800466c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8004670:	2200      	movs	r2, #0
 8004672:	f240 4198 	movw	r1, #1176	@ 0x498
 8004676:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800467a:	4620      	mov	r0, r4
 800467c:	f7ff fa6b 	bl	8003b56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004680:	f640 0180 	movw	r1, #2176	@ 0x880
 8004684:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004688:	4620      	mov	r0, r4
 800468a:	f7ff fa6c 	bl	8003b66 <USBD_CDC_SetRxBuffer>
}
 800468e:	2000      	movs	r0, #0
 8004690:	bd10      	pop	{r4, pc}

08004692 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004692:	f240 13d4 	movw	r3, #468	@ 0x1d4
 8004696:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800469a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 800469e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80046a2:	b10b      	cbz	r3, 80046a8 <CDC_Transmit_FS+0x16>
    return USBD_BUSY;
 80046a4:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80046a6:	4770      	bx	lr
{
 80046a8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80046aa:	f240 14d4 	movw	r4, #468	@ 0x1d4
 80046ae:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80046b2:	460a      	mov	r2, r1
 80046b4:	4601      	mov	r1, r0
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fa4d 	bl	8003b56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80046bc:	4620      	mov	r0, r4
 80046be:	f7ff fa58 	bl	8003b72 <USBD_CDC_TransmitPacket>
}
 80046c2:	bd10      	pop	{r4, pc}

080046c4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80046c4:	2312      	movs	r3, #18
 80046c6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80046c8:	f240 104c 	movw	r0, #332	@ 0x14c
 80046cc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80046d0:	4770      	bx	lr

080046d2 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80046d2:	2304      	movs	r3, #4
 80046d4:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80046d6:	f240 1048 	movw	r0, #328	@ 0x148
 80046da:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80046de:	4770      	bx	lr

080046e0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80046e0:	2300      	movs	r3, #0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d21e      	bcs.n	8004724 <IntToUnicode+0x44>
{
 80046e6:	b500      	push	{lr}
 80046e8:	e010      	b.n	800470c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80046ea:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 80046ee:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 80046f2:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80046f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80046f8:	f10c 0c01 	add.w	ip, ip, #1
 80046fc:	f04f 0e00 	mov.w	lr, #0
 8004700:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004704:	3301      	adds	r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4293      	cmp	r3, r2
 800470a:	d209      	bcs.n	8004720 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800470c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004710:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8004714:	d2e9      	bcs.n	80046ea <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004716:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800471a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800471e:	e7e8      	b.n	80046f2 <IntToUnicode+0x12>
  }
}
 8004720:	f85d fb04 	ldr.w	pc, [sp], #4
 8004724:	4770      	bx	lr

08004726 <Get_SerialNum>:
{
 8004726:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004728:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800472c:	f6c1 73ff 	movt	r3, #8191	@ 0x1fff
 8004730:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004734:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004738:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 800473c:	18c0      	adds	r0, r0, r3
 800473e:	d100      	bne.n	8004742 <Get_SerialNum+0x1c>
}
 8004740:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004742:	f240 152e 	movw	r5, #302	@ 0x12e
 8004746:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800474a:	2208      	movs	r2, #8
 800474c:	4629      	mov	r1, r5
 800474e:	f7ff ffc7 	bl	80046e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004752:	2204      	movs	r2, #4
 8004754:	f105 0110 	add.w	r1, r5, #16
 8004758:	4620      	mov	r0, r4
 800475a:	f7ff ffc1 	bl	80046e0 <IntToUnicode>
}
 800475e:	e7ef      	b.n	8004740 <Get_SerialNum+0x1a>

08004760 <USBD_FS_SerialStrDescriptor>:
{
 8004760:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004762:	231a      	movs	r3, #26
 8004764:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004766:	f7ff ffde 	bl	8004726 <Get_SerialNum>
}
 800476a:	f240 102c 	movw	r0, #300	@ 0x12c
 800476e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004772:	bd08      	pop	{r3, pc}

08004774 <USBD_FS_ProductStrDescriptor>:
{
 8004774:	b508      	push	{r3, lr}
 8004776:	460a      	mov	r2, r1
  if(speed == 0)
 8004778:	b970      	cbnz	r0, 8004798 <USBD_FS_ProductStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800477a:	f640 4168 	movw	r1, #3176	@ 0xc68
 800477e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004782:	f644 401c 	movw	r0, #19484	@ 0x4c1c
 8004786:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800478a:	f7ff feb0 	bl	80044ee <USBD_GetString>
}
 800478e:	f640 4068 	movw	r0, #3176	@ 0xc68
 8004792:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004796:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004798:	f640 4168 	movw	r1, #3176	@ 0xc68
 800479c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80047a0:	f644 401c 	movw	r0, #19484	@ 0x4c1c
 80047a4:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80047a8:	f7ff fea1 	bl	80044ee <USBD_GetString>
 80047ac:	e7ef      	b.n	800478e <USBD_FS_ProductStrDescriptor+0x1a>

080047ae <USBD_FS_ManufacturerStrDescriptor>:
{
 80047ae:	b510      	push	{r4, lr}
 80047b0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80047b2:	f640 4468 	movw	r4, #3176	@ 0xc68
 80047b6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80047ba:	4621      	mov	r1, r4
 80047bc:	f644 4030 	movw	r0, #19504	@ 0x4c30
 80047c0:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80047c4:	f7ff fe93 	bl	80044ee <USBD_GetString>
}
 80047c8:	4620      	mov	r0, r4
 80047ca:	bd10      	pop	{r4, pc}

080047cc <USBD_FS_ConfigStrDescriptor>:
{
 80047cc:	b508      	push	{r3, lr}
 80047ce:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80047d0:	b970      	cbnz	r0, 80047f0 <USBD_FS_ConfigStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80047d2:	f640 4168 	movw	r1, #3176	@ 0xc68
 80047d6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80047da:	f644 403c 	movw	r0, #19516	@ 0x4c3c
 80047de:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80047e2:	f7ff fe84 	bl	80044ee <USBD_GetString>
}
 80047e6:	f640 4068 	movw	r0, #3176	@ 0xc68
 80047ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80047ee:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80047f0:	f640 4168 	movw	r1, #3176	@ 0xc68
 80047f4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80047f8:	f644 403c 	movw	r0, #19516	@ 0x4c3c
 80047fc:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8004800:	f7ff fe75 	bl	80044ee <USBD_GetString>
 8004804:	e7ef      	b.n	80047e6 <USBD_FS_ConfigStrDescriptor+0x1a>

08004806 <USBD_FS_InterfaceStrDescriptor>:
{
 8004806:	b508      	push	{r3, lr}
 8004808:	460a      	mov	r2, r1
  if(speed == 0)
 800480a:	b970      	cbnz	r0, 800482a <USBD_FS_InterfaceStrDescriptor+0x24>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800480c:	f640 4168 	movw	r1, #3176	@ 0xc68
 8004810:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004814:	f644 4048 	movw	r0, #19528	@ 0x4c48
 8004818:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800481c:	f7ff fe67 	bl	80044ee <USBD_GetString>
}
 8004820:	f640 4068 	movw	r0, #3176	@ 0xc68
 8004824:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004828:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800482a:	f640 4168 	movw	r1, #3176	@ 0xc68
 800482e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004832:	f644 4048 	movw	r0, #19528	@ 0x4c48
 8004836:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800483a:	f7ff fe58 	bl	80044ee <USBD_GetString>
 800483e:	e7ef      	b.n	8004820 <USBD_FS_InterfaceStrDescriptor+0x1a>

08004840 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004840:	2802      	cmp	r0, #2
 8004842:	d805      	bhi.n	8004850 <USBD_Get_USB_Status+0x10>
 8004844:	e8df f000 	tbb	[pc, r0]
 8004848:	0405      	.short	0x0405
 800484a:	02          	.byte	0x02
 800484b:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800484c:	2001      	movs	r0, #1
    break;
 800484e:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8004850:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004852:	4770      	bx	lr

08004854 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8004854:	6802      	ldr	r2, [r0, #0]
 8004856:	f44f 43b8 	mov.w	r3, #23552	@ 0x5c00
 800485a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800485e:	429a      	cmp	r2, r3
 8004860:	d000      	beq.n	8004864 <HAL_PCD_MspInit+0x10>
 8004862:	4770      	bx	lr
{
 8004864:	b500      	push	{lr}
 8004866:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8004868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800486c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004870:	69da      	ldr	r2, [r3, #28]
 8004872:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004876:	61da      	str	r2, [r3, #28]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004882:	2200      	movs	r2, #0
 8004884:	4611      	mov	r1, r2
 8004886:	2014      	movs	r0, #20
 8004888:	f7fc f90b 	bl	8000aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800488c:	2014      	movs	r0, #20
 800488e:	f7fc f918 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
}
 8004892:	b003      	add	sp, #12
 8004894:	f85d fb04 	ldr.w	pc, [sp], #4

08004898 <HAL_PCD_MspDeInit>:
{
 8004898:	b508      	push	{r3, lr}
  if(pcdHandle->Instance==USB)
 800489a:	6802      	ldr	r2, [r0, #0]
 800489c:	f44f 43b8 	mov.w	r3, #23552	@ 0x5c00
 80048a0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d000      	beq.n	80048aa <HAL_PCD_MspDeInit+0x12>
}
 80048a8:	bd08      	pop	{r3, pc}
    __HAL_RCC_USB_CLK_DISABLE();
 80048aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048ae:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80048b8:	61da      	str	r2, [r3, #28]
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 80048ba:	2014      	movs	r0, #20
 80048bc:	f7fc f90f 	bl	8000ade <HAL_NVIC_DisableIRQ>
}
 80048c0:	e7f2      	b.n	80048a8 <HAL_PCD_MspDeInit+0x10>

080048c2 <HAL_PCD_SetupStageCallback>:
{
 80048c2:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80048c4:	f500 712c 	add.w	r1, r0, #688	@ 0x2b0
 80048c8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	@ 0x2e8
 80048cc:	f7ff f9ca 	bl	8003c64 <USBD_LL_SetupStage>
}
 80048d0:	bd08      	pop	{r3, pc}

080048d2 <HAL_PCD_DataOutStageCallback>:
{
 80048d2:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80048d4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80048d8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80048dc:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 80048e0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	@ 0x2e8
 80048e4:	f7ff f9eb 	bl	8003cbe <USBD_LL_DataOutStage>
}
 80048e8:	bd08      	pop	{r3, pc}

080048ea <HAL_PCD_DataInStageCallback>:
{
 80048ea:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80048ec:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80048f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80048f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048f6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	@ 0x2e8
 80048fa:	f7ff fa26 	bl	8003d4a <USBD_LL_DataInStage>
}
 80048fe:	bd08      	pop	{r3, pc}

08004900 <HAL_PCD_SOFCallback>:
{
 8004900:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004902:	f8d0 02e8 	ldr.w	r0, [r0, #744]	@ 0x2e8
 8004906:	f7ff fac7 	bl	8003e98 <USBD_LL_SOF>
}
 800490a:	bd08      	pop	{r3, pc}

0800490c <HAL_PCD_ResetCallback>:
{
 800490c:	b510      	push	{r4, lr}
 800490e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004910:	6883      	ldr	r3, [r0, #8]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d109      	bne.n	800492a <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004916:	2101      	movs	r1, #1
 8004918:	f8d4 02e8 	ldr.w	r0, [r4, #744]	@ 0x2e8
 800491c:	f7ff faa5 	bl	8003e6a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004920:	f8d4 02e8 	ldr.w	r0, [r4, #744]	@ 0x2e8
 8004924:	f7ff fa79 	bl	8003e1a <USBD_LL_Reset>
}
 8004928:	bd10      	pop	{r4, pc}
    Error_Handler();
 800492a:	f7fb ff8f 	bl	800084c <Error_Handler>
 800492e:	e7f2      	b.n	8004916 <HAL_PCD_ResetCallback+0xa>

08004930 <HAL_PCD_SuspendCallback>:
{
 8004930:	b510      	push	{r4, lr}
 8004932:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004934:	f8d0 02e8 	ldr.w	r0, [r0, #744]	@ 0x2e8
 8004938:	f7ff fa9a 	bl	8003e70 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800493c:	69a3      	ldr	r3, [r4, #24]
 800493e:	b13b      	cbz	r3, 8004950 <HAL_PCD_SuspendCallback+0x20>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004940:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8004944:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	f042 0206 	orr.w	r2, r2, #6
 800494e:	611a      	str	r2, [r3, #16]
}
 8004950:	bd10      	pop	{r4, pc}

08004952 <HAL_PCD_ResumeCallback>:
{
 8004952:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004954:	f8d0 02e8 	ldr.w	r0, [r0, #744]	@ 0x2e8
 8004958:	f7ff fa93 	bl	8003e82 <USBD_LL_Resume>
}
 800495c:	bd08      	pop	{r3, pc}

0800495e <USBD_LL_Init>:
{
 800495e:	b510      	push	{r4, lr}
 8004960:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004962:	f241 0088 	movw	r0, #4232	@ 0x1088
 8004966:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800496a:	f8c0 42e8 	str.w	r4, [r0, #744]	@ 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800496e:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Instance = USB;
 8004972:	f44f 43b8 	mov.w	r3, #23552	@ 0x5c00
 8004976:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800497a:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800497c:	2308      	movs	r3, #8
 800497e:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004980:	2302      	movs	r3, #2
 8004982:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004984:	2300      	movs	r3, #0
 8004986:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004988:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800498a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800498c:	f7fc fc84 	bl	8001298 <HAL_PCD_Init>
 8004990:	bb30      	cbnz	r0, 80049e0 <USBD_LL_Init+0x82>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004992:	2318      	movs	r3, #24
 8004994:	2200      	movs	r2, #0
 8004996:	4611      	mov	r1, r2
 8004998:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800499c:	f7fd fb14 	bl	8001fc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80049a0:	2358      	movs	r3, #88	@ 0x58
 80049a2:	2200      	movs	r2, #0
 80049a4:	2180      	movs	r1, #128	@ 0x80
 80049a6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80049aa:	f7fd fb0d 	bl	8001fc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80049ae:	23c0      	movs	r3, #192	@ 0xc0
 80049b0:	2200      	movs	r2, #0
 80049b2:	2181      	movs	r1, #129	@ 0x81
 80049b4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80049b8:	f7fd fb06 	bl	8001fc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80049bc:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80049c0:	2200      	movs	r2, #0
 80049c2:	2101      	movs	r1, #1
 80049c4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80049c8:	f7fd fafe 	bl	8001fc8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80049cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049d0:	2200      	movs	r2, #0
 80049d2:	2182      	movs	r1, #130	@ 0x82
 80049d4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80049d8:	f7fd faf6 	bl	8001fc8 <HAL_PCDEx_PMAConfig>
}
 80049dc:	2000      	movs	r0, #0
 80049de:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80049e0:	f7fb ff34 	bl	800084c <Error_Handler>
 80049e4:	e7d5      	b.n	8004992 <USBD_LL_Init+0x34>

080049e6 <USBD_LL_DeInit>:
{
 80049e6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_DeInit(pdev->pData);
 80049e8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80049ec:	f7fc fce0 	bl	80013b0 <HAL_PCD_DeInit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80049f0:	f7ff ff26 	bl	8004840 <USBD_Get_USB_Status>
}
 80049f4:	bd08      	pop	{r3, pc}

080049f6 <USBD_LL_Start>:
{
 80049f6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80049f8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80049fc:	f7fc fcef 	bl	80013de <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a00:	f7ff ff1e 	bl	8004840 <USBD_Get_USB_Status>
}
 8004a04:	bd08      	pop	{r3, pc}

08004a06 <USBD_LL_Stop>:
{
 8004a06:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8004a08:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004a0c:	f7fc fd00 	bl	8001410 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a10:	f7ff ff16 	bl	8004840 <USBD_Get_USB_Status>
}
 8004a14:	bd08      	pop	{r3, pc}

08004a16 <USBD_LL_OpenEP>:
{
 8004a16:	b508      	push	{r3, lr}
 8004a18:	4694      	mov	ip, r2
 8004a1a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004a1c:	4663      	mov	r3, ip
 8004a1e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004a22:	f7fd f993 	bl	8001d4c <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a26:	f7ff ff0b 	bl	8004840 <USBD_Get_USB_Status>
}
 8004a2a:	bd08      	pop	{r3, pc}

08004a2c <USBD_LL_CloseEP>:
{
 8004a2c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004a2e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004a32:	f7fd f9cd 	bl	8001dd0 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a36:	f7ff ff03 	bl	8004840 <USBD_Get_USB_Status>
}
 8004a3a:	bd08      	pop	{r3, pc}

08004a3c <USBD_LL_StallEP>:
{
 8004a3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004a3e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004a42:	f7fd fa4a 	bl	8001eda <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a46:	f7ff fefb 	bl	8004840 <USBD_Get_USB_Status>
}
 8004a4a:	bd08      	pop	{r3, pc}

08004a4c <USBD_LL_ClearStallEP>:
{
 8004a4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004a4e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004a52:	f7fd fa7e 	bl	8001f52 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a56:	f7ff fef3 	bl	8004840 <USBD_Get_USB_Status>
}
 8004a5a:	bd08      	pop	{r3, pc}

08004a5c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004a5c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004a60:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004a64:	d108      	bne.n	8004a78 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004a66:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004a6a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004a6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004a72:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
}
 8004a76:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004a78:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004a7c:	3101      	adds	r1, #1
 8004a7e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004a82:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004a86:	7898      	ldrb	r0, [r3, #2]
 8004a88:	4770      	bx	lr

08004a8a <USBD_LL_SetUSBAddress>:
{
 8004a8a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004a8c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004a90:	f7fd f85e 	bl	8001b50 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a94:	f7ff fed4 	bl	8004840 <USBD_Get_USB_Status>
}
 8004a98:	bd08      	pop	{r3, pc}

08004a9a <USBD_LL_Transmit>:
{
 8004a9a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004a9c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004aa0:	f7fd f9f3 	bl	8001e8a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004aa4:	f7ff fecc 	bl	8004840 <USBD_Get_USB_Status>
}
 8004aa8:	bd08      	pop	{r3, pc}

08004aaa <USBD_LL_PrepareReceive>:
{
 8004aaa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004aac:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004ab0:	f7fd f9c0 	bl	8001e34 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ab4:	f7ff fec4 	bl	8004840 <USBD_Get_USB_Status>
}
 8004ab8:	bd08      	pop	{r3, pc}

08004aba <USBD_LL_GetRxDataSize>:
{
 8004aba:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004abc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8004ac0:	f7fd f9da 	bl	8001e78 <HAL_PCD_EP_GetRxCount>
}
 8004ac4:	bd08      	pop	{r3, pc}

08004ac6 <USBD_static_malloc>:
}
 8004ac6:	f640 6068 	movw	r0, #3688	@ 0xe68
 8004aca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004ace:	4770      	bx	lr

08004ad0 <USBD_static_free>:
}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_PCDEx_SetConnectionState>:
}
 8004ad2:	4770      	bx	lr

08004ad4 <memset>:
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4402      	add	r2, r0
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d100      	bne.n	8004ade <memset+0xa>
 8004adc:	4770      	bx	lr
 8004ade:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae2:	e7f9      	b.n	8004ad8 <memset+0x4>

08004ae4 <__libc_init_array>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	4d0c      	ldr	r5, [pc, #48]	@ (8004b1c <__libc_init_array+0x38>)
 8004aea:	4c0d      	ldr	r4, [pc, #52]	@ (8004b20 <__libc_init_array+0x3c>)
 8004aec:	1b64      	subs	r4, r4, r5
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	42a6      	cmp	r6, r4
 8004af2:	d109      	bne.n	8004b08 <__libc_init_array+0x24>
 8004af4:	f000 f81a 	bl	8004b2c <_init>
 8004af8:	2600      	movs	r6, #0
 8004afa:	4d0a      	ldr	r5, [pc, #40]	@ (8004b24 <__libc_init_array+0x40>)
 8004afc:	4c0a      	ldr	r4, [pc, #40]	@ (8004b28 <__libc_init_array+0x44>)
 8004afe:	1b64      	subs	r4, r4, r5
 8004b00:	10a4      	asrs	r4, r4, #2
 8004b02:	42a6      	cmp	r6, r4
 8004b04:	d105      	bne.n	8004b12 <__libc_init_array+0x2e>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0c:	4798      	blx	r3
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7ee      	b.n	8004af0 <__libc_init_array+0xc>
 8004b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b16:	4798      	blx	r3
 8004b18:	3601      	adds	r6, #1
 8004b1a:	e7f2      	b.n	8004b02 <__libc_init_array+0x1e>
 8004b1c:	08004c58 	.word	0x08004c58
 8004b20:	08004c58 	.word	0x08004c58
 8004b24:	08004c58 	.word	0x08004c58
 8004b28:	08004c5c 	.word	0x08004c5c

08004b2c <_init>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr

08004b38 <_fini>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr
